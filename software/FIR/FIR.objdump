
FIR.elf:     file format elf32-littlenios2
FIR.elf
architecture: nios2, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x020001b8

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x02000020 paddr 0x02000020 align 2**12
         filesz 0x00005cc4 memsz 0x00005cc4 flags r-x
    LOAD off    0x00006ce4 vaddr 0x02005ce4 paddr 0x020077f0 align 2**12
         filesz 0x00001b0c memsz 0x00001b0c flags rw-
    LOAD off    0x000092fc vaddr 0x020092fc paddr 0x020092fc align 2**12
         filesz 0x00000000 memsz 0x000002e0 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000198  02000020  02000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00005ad8  020001b8  020001b8  000011b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000054  02005c90  02005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b0c  02005ce4  020077f0  00006ce4  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          000002e0  020092fc  020092fc  000092fc  2**2
                  ALLOC, SMALL_DATA
  6 .comment      00000023  00000000  00000000  000087f0  2**0
                  CONTENTS, READONLY
  7 .debug_aranges 000009b0  00000000  00000000  00008818  2**3
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_info   0001843f  00000000  00000000  000091c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00005f33  00000000  00000000  00021607  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_line   00007052  00000000  00000000  0002753a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_frame  00001104  00000000  00000000  0002e58c  2**2
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_str    000021ac  00000000  00000000  0002f690  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    0000560a  00000000  00000000  0003183c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_alt_sim_info 00000030  00000000  00000000  00036e48  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000398  00000000  00000000  00036e78  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .thread_model 00000003  00000000  00000000  0003987c  2**0
                  CONTENTS, READONLY
 17 .cpu          00000003  00000000  00000000  0003987f  2**0
                  CONTENTS, READONLY
 18 .qsys         00000001  00000000  00000000  00039882  2**0
                  CONTENTS, READONLY
 19 .simulation_enabled 00000001  00000000  00000000  00039883  2**0
                  CONTENTS, READONLY
 20 .sysid_hash   00000004  00000000  00000000  00039884  2**0
                  CONTENTS, READONLY
 21 .sysid_base   00000004  00000000  00000000  00039888  2**0
                  CONTENTS, READONLY
 22 .sysid_time   00000004  00000000  00000000  0003988c  2**0
                  CONTENTS, READONLY
 23 .stderr_dev   00000009  00000000  00000000  00039890  2**0
                  CONTENTS, READONLY
 24 .stdin_dev    00000009  00000000  00000000  00039899  2**0
                  CONTENTS, READONLY
 25 .stdout_dev   00000009  00000000  00000000  000398a2  2**0
                  CONTENTS, READONLY
 26 .sopc_system_name 00000008  00000000  00000000  000398ab  2**0
                  CONTENTS, READONLY
 27 .quartus_project_dir 0000000b  00000000  00000000  000398b3  2**0
                  CONTENTS, READONLY
 28 .sopcinfo     00031109  00000000  00000000  000398be  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
02000020 l    d  .exceptions	00000000 .exceptions
020001b8 l    d  .text	00000000 .text
02005c90 l    d  .rodata	00000000 .rodata
02005ce4 l    d  .rwdata	00000000 .rwdata
020092fc l    d  .bss	00000000 .bss
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FIR_bsp//obj/HAL/src/crt0.o
02000200 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_exception_entry.o
02000094 l       .exceptions	00000000 alt_exception_unknown
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 impure.c
02005ce4 l     O .rwdata	00000400 impure_data
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
02001cc8 l     F .text	00000008 __fp_lock
02001cd0 l     F .text	00000008 __fp_unlock
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 alt_close.c
02002c94 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
02002dac l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_fstat.c
02002dd8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_isatty.c
02002ed4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
02002fc4 l     F .text	0000006c alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
020030b0 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
02003288 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
020077e0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_write.c
020034d8 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
02003614 l     F .text	00000038 alt_dev_reg
02006694 l     O .rwdata	00001060 JTAG_UART
020076f4 l     O .rwdata	000000c4 UART
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0200390c l     F .text	00000204 altera_avalon_jtag_uart_irq
02003b10 l     F .text	000000a4 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
02004304 l     F .text	00000098 altera_avalon_uart_irq
0200439c l     F .text	000000d8 altera_avalon_uart_rxirq
02004474 l     F .text	0000013c altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
02004604 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
02004858 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
02004bd4 l     F .text	00000050 alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
02005074 l     F .text	000000c0 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
020051ac l     F .text	00000050 alt_get_errno
020051fc l     F .text	000000cc alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 
02002b58 g     F .text	00000064 _isatty_r
020031d0 g     F .text	00000078 alt_main
02000238 g     F .text	00000084 _puts_r
0200934c g     O .bss	00000100 alt_irq
02002bbc g     F .text	0000006c _lseek_r
020077f0 g       *ABS*	00000000 __flash_rwdata_start
020095dc g       *ABS*	00000000 __alt_heap_start
0200286c g     F .text	0000005c __sseek
02001d58 g     F .text	0000010c __sinit
02001ce4 g     F .text	00000064 __sfmoreglue
02003268 g     F .text	00000020 __malloc_unlock
020011b4 g     F .text	00000128 memmove
02001d48 g     F .text	00000010 _cleanup
00000000  w      *UND*	00000000 __errno
02000000 g     F .entry	0000001c __reset
02000020 g       *ABS*	00000000 __flash_exceptions_start
02002af0 g     F .text	00000068 _fstat_r
02009308 g     O .bss	00000004 errno
02009310 g     O .bss	00000004 alt_argv
0200f7b8 g       *ABS*	00000000 _gp
02006514 g     O .rwdata	00000180 alt_fd_list
020055d8 g     F .text	00000090 alt_find_dev
020010bc g     F .text	000000f8 memcpy
02001cd8 g     F .text	0000000c _cleanup_r
02005134 g     F .text	00000078 alt_io_redirect
02005c90 g       *ABS*	00000000 __DTOR_END__
020002bc g     F .text	00000014 puts
02003d10 g     F .text	00000218 altera_avalon_jtag_uart_read
00000000  w      *UND*	00000000 malloc
02002f24 g     F .text	000000a0 isatty
02005830 g     F .text	0000008c alt_icache_flush
02009304 g     O .bss	00000004 __malloc_top_pad
0200035c g     F .text	000004e4 __sfvwrite_r
020018d8 g     F .text	00000064 _sbrk_r
02002c28 g     F .text	0000006c _read_r
020077d8 g     O .rwdata	00000004 alt_max_fd
020029a0 g     F .text	0000013c _fclose_r
02001c98 g     F .text	00000030 fflush
02009300 g     O .bss	00000004 __malloc_max_sbrked_mem
02003100 g     F .text	000000d0 lseek
020077b8 g     O .rwdata	00000004 _global_impure_ptr
020012dc g     F .text	000005fc _realloc_r
020095dc g       *ABS*	00000000 __bss_end
02004f84 g     F .text	000000f0 alt_iic_isr_register
020054b4 g     F .text	00000104 alt_tick
0200425c g     F .text	000000a8 altera_avalon_uart_init
02001f70 g     F .text	00000018 __fp_lock_all
02004f38 g     F .text	0000004c alt_ic_irq_enabled
0200541c g     F .text	00000098 alt_alarm_stop
02009318 g     O .bss	00000004 alt_irq_active
020000ec g     F .exceptions	000000cc alt_irq_handler
020064ec g     O .rwdata	00000028 alt_dev_null
02004b90 g     F .text	00000044 alt_dcache_flush_all
020077f0 g       *ABS*	00000000 __ram_rwdata_end
020077d0 g     O .rwdata	00000008 alt_dev_list
02003528 g     F .text	000000ec write
02005ce4 g       *ABS*	00000000 __ram_rodata_end
02002e28 g     F .text	000000ac fstat
02000000 g       *ABS*	00000000 __alt_mem_SDRAM
020095dc g       *ABS*	00000000 end
020048a8 g     F .text	000001a8 altera_avalon_uart_write
0200384c g     F .text	000000c0 altera_avalon_jtag_uart_init
02005c90 g       *ABS*	00000000 __CTOR_LIST__
04000000 g       *ABS*	00000000 __alt_stack_pointer
020041ac g     F .text	00000060 altera_avalon_uart_write_fd
0200420c g     F .text	00000050 altera_avalon_uart_close_fd
02003f28 g     F .text	00000224 altera_avalon_jtag_uart_write
02001f60 g     F .text	00000004 __sfp_lock_acquire
02000fc4 g     F .text	000000f8 memchr
020020dc g     F .text	000002d0 _free_r
02005ab4 g     F .text	000001a0 __call_exitprocs
020077c0 g     O .rwdata	00000004 __malloc_sbrk_base
020001b8 g     F .text	0000004c _start
0200931c g     O .bss	00000004 _alt_tick_rate
02009320 g     O .bss	00000004 _alt_nticks
020032d8 g     F .text	000000f0 read
02003680 g     F .text	00000068 alt_sys_init
02005984 g     F .text	00000130 __register_exitproc
02003bb4 g     F .text	00000068 altera_avalon_jtag_uart_close
02005ce4 g       *ABS*	00000000 __ram_rwdata_start
02005c90 g       *ABS*	00000000 __ram_rodata_start
02009324 g     O .bss	00000028 __malloc_current_mallinfo
020036e8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0200577c g     F .text	000000b4 alt_get_fd
0200293c g     F .text	00000064 _close_r
02005908 g     F .text	0000007c memcmp
020037a8 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
020095dc g       *ABS*	00000000 __alt_stack_base
020037f8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0200193c g     F .text	00000174 __swsetup_r
02001e64 g     F .text	000000fc __sfp
020060e4 g     O .rwdata	00000408 __malloc_av_
02001f6c g     F .text	00000004 __sinit_lock_release
02002790 g     F .text	00000054 __sread
02005668 g     F .text	00000114 alt_find_file
02004c24 g     F .text	000000a0 alt_dev_llist_insert
02003248 g     F .text	00000020 __malloc_lock
02003428 g     F .text	000000b0 sbrk
02001ab0 g     F .text	000001e8 _fflush_r
020092fc g       *ABS*	00000000 __bss_start
020026b4 g     F .text	000000dc memset
02000204 g     F .text	00000034 main
02009314 g     O .bss	00000004 alt_envp
020092fc g     O .bss	00000004 __malloc_max_total_mem
02003748 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
020028c8 g     F .text	00000008 __sclose
04000000 g       *ABS*	00000000 __alt_heap_limit
02002adc g     F .text	00000014 fclose
0200944c g     O .bss	00000190 _atexit0
02000840 g     F .text	00000784 _malloc_r
020077dc g     O .rwdata	00000004 alt_errno
020023ac g     F .text	000000a8 _fwalk
02001fa0 g     F .text	0000013c _malloc_trim_r
02005c90 g       *ABS*	00000000 __CTOR_END__
02005c90 g       *ABS*	00000000 __flash_rodata_start
02005c90 g       *ABS*	00000000 __DTOR_LIST__
0200364c g     F .text	00000034 alt_irq_init
020033c8 g     F .text	00000060 alt_release_fd
020058bc g     F .text	00000014 atexit
020028d0 g     F .text	0000006c _write_r
020077bc g     O .rwdata	00000004 _impure_ptr
0200930c g     O .bss	00000004 alt_argc
02004d20 g     F .text	0000005c _do_dtors
02000020 g       .exceptions	00000000 alt_irq_entry
02001f88 g     F .text	00000018 __fp_unlock_all
020077c8 g     O .rwdata	00000008 alt_fs_list
02000020 g       *ABS*	00000000 __ram_exceptions_start
02004dac g     F .text	00000050 alt_ic_isr_register
020077f0 g       *ABS*	00000000 _edata
0200414c g     F .text	00000060 altera_avalon_uart_read_fd
020095dc g       *ABS*	00000000 _end
020001b8 g       *ABS*	00000000 __ram_exceptions_end
02003c1c g     F .text	000000f4 altera_avalon_jtag_uart_ioctl
02004e98 g     F .text	000000a0 alt_ic_irq_disable
020027e4 g     F .text	00000088 __swrite
020077c4 g     O .rwdata	00000004 __malloc_trim_threshold
020055b8 g     F .text	00000020 altera_nios2_qsys_irq_init
020058d0 g     F .text	00000038 exit
02002454 g     F .text	000000b8 _fwalk_reent
04000000 g       *ABS*	00000000 __alt_data_end
02000020 g     F .exceptions	00000000 alt_exception
02001f64 g     F .text	00000004 __sfp_lock_release
020045b0 g     F .text	00000054 altera_avalon_uart_close
02005c54 g     F .text	0000003c _exit
02004a50 g     F .text	00000140 alt_alarm_start
0200250c g     F .text	000001a8 __smakebuf_r
020002d0 g     F .text	0000008c strlen
020052c8 g     F .text	00000154 open
02004d7c g     F .text	00000030 alt_icache_flush_all
020077e4 g     O .rwdata	00000004 alt_priority_mask
02004dfc g     F .text	0000009c alt_ic_irq_enable
02004654 g     F .text	00000204 altera_avalon_uart_read
020077e8 g     O .rwdata	00000008 alt_alarm_list
02004cc4 g     F .text	0000005c _do_ctors
02002ce4 g     F .text	000000c8 close
02003030 g     F .text	00000080 alt_load
00000000  w      *UND*	00000000 free
02001f68 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

02000000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && !defined(ALT_SIM_OPTIMIZE)
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
 2000000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
 2000004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
 2000008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
 200000c:	00bffd16 	blt	zero,r2,2000004 <__reset+0x4>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000010:	00408034 	movhi	at,512
    ori r1, r1, %lo(_start)
 2000014:	08406e14 	ori	at,at,440
    jmp r1
 2000018:	0800683a 	jmp	at
 200001c:	00000000 	call	0 <__alt_mem_SDRAM-0x2000000>

Disassembly of section .exceptions:

02000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 2000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 2000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 2000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 200002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 2000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 2000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 2000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 200003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 2000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 2000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 2000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 200004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 2000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 2000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 2000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 200005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 2000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 2000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 2000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 200006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 2000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 2000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 2000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 200007c:	10000326 	beq	r2,zero,200008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 2000080:	20000226 	beq	r4,zero,200008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 2000084:	20000ec0 	call	20000ec <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 2000088:	00000306 	br	2000098 <alt_exception_unknown+0x4>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw   ea,  72(sp)  /* Don't re-issue */
 200008c:	df401215 	stw	ea,72(sp)
        ldw   r2, -4(ea)   /* Instruction that caused exception */
 2000090:	e8bfff17 	ldw	r2,-4(ea)

02000094 <alt_exception_unknown>:
#ifdef NIOS2_HAS_DEBUG_STUB
       /*
        *  Either tell the user now (if there is a debugger attached) or go into
        *  the debug monitor which will loop until a debugger is attached.
        */
        break
 2000094:	003da03a 	break	0
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 2000098:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 200009c:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 20000a0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 20000a4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 20000a8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 20000ac:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 20000b0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 20000b4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 20000b8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 20000bc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 20000c0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 20000c4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 20000c8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 20000cc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 20000d0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 20000d4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 20000d8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 20000dc:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 20000e0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 20000e4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 20000e8:	ef80083a 	eret

020000ec <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 20000ec:	defff904 	addi	sp,sp,-28
 20000f0:	dfc00615 	stw	ra,24(sp)
 20000f4:	df000515 	stw	fp,20(sp)
 20000f8:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 20000fc:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 2000100:	0005313a 	rdctl	r2,ipending
 2000104:	e0bffe15 	stw	r2,-8(fp)

  return active;
 2000108:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 200010c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 2000110:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 2000114:	00800044 	movi	r2,1
 2000118:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 200011c:	e0fffb17 	ldw	r3,-20(fp)
 2000120:	e0bffc17 	ldw	r2,-16(fp)
 2000124:	1884703a 	and	r2,r3,r2
 2000128:	10001726 	beq	r2,zero,2000188 <alt_irq_handler+0x9c>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 200012c:	00c08074 	movhi	r3,513
 2000130:	18e4d304 	addi	r3,r3,-27828
 2000134:	e0bffd17 	ldw	r2,-12(fp)
 2000138:	100490fa 	slli	r2,r2,3
 200013c:	1885883a 	add	r2,r3,r2
 2000140:	10c00017 	ldw	r3,0(r2)
 2000144:	01008074 	movhi	r4,513
 2000148:	2124d304 	addi	r4,r4,-27828
 200014c:	e0bffd17 	ldw	r2,-12(fp)
 2000150:	100490fa 	slli	r2,r2,3
 2000154:	2085883a 	add	r2,r4,r2
 2000158:	10800104 	addi	r2,r2,4
 200015c:	10800017 	ldw	r2,0(r2)
 2000160:	1009883a 	mov	r4,r2
 2000164:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 2000168:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 200016c:	0005313a 	rdctl	r2,ipending
 2000170:	e0bfff15 	stw	r2,-4(fp)

  return active;
 2000174:	e0bfff17 	ldw	r2,-4(fp)
      mask <<= 1;
      i++;

    } while (1);

    active = alt_irq_pending ();
 2000178:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 200017c:	e0bffb17 	ldw	r2,-20(fp)
 2000180:	103fe31e 	bne	r2,zero,2000110 <alt_irq_handler+0x24>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 2000184:	00000706 	br	20001a4 <alt_irq_handler+0xb8>
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
 2000188:	e0bffc17 	ldw	r2,-16(fp)
 200018c:	1085883a 	add	r2,r2,r2
 2000190:	e0bffc15 	stw	r2,-16(fp)
      i++;
 2000194:	e0bffd17 	ldw	r2,-12(fp)
 2000198:	10800044 	addi	r2,r2,1
 200019c:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 20001a0:	003fde06 	br	200011c <alt_irq_handler+0x30>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
 20001a4:	e037883a 	mov	sp,fp
 20001a8:	dfc00117 	ldw	ra,4(sp)
 20001ac:	df000017 	ldw	fp,0(sp)
 20001b0:	dec00204 	addi	sp,sp,8
 20001b4:	f800283a 	ret

Disassembly of section .text:

020001b8 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
 20001b8:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
 20001bc:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
 20001c0:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
 20001c4:	00bffd16 	blt	zero,r2,20001bc <_start+0x4>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 20001c8:	06c10034 	movhi	sp,1024
    ori sp, sp, %lo(__alt_stack_pointer)
 20001cc:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 20001d0:	06808034 	movhi	gp,512
    ori gp, gp, %lo(_gp)
 20001d4:	d6bdee14 	ori	gp,gp,63416
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 20001d8:	00808034 	movhi	r2,512
    ori r2, r2, %lo(__bss_start)
 20001dc:	10a4bf14 	ori	r2,r2,37628

    movhi r3, %hi(__bss_end)
 20001e0:	00c08034 	movhi	r3,512
    ori r3, r3, %lo(__bss_end)
 20001e4:	18e57714 	ori	r3,r3,38364

    beq r2, r3, 1f
 20001e8:	10c00326 	beq	r2,r3,20001f8 <_start+0x40>

0:
    stw zero, (r2)
 20001ec:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 20001f0:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 20001f4:	10fffd36 	bltu	r2,r3,20001ec <_start+0x34>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 20001f8:	20030300 	call	2003030 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 20001fc:	20031d00 	call	20031d0 <alt_main>

02000200 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 2000200:	003fff06 	br	2000200 <alt_after_alt_main>

02000204 <main>:
 */

#include <stdio.h>

int main()
{
 2000204:	defffe04 	addi	sp,sp,-8
 2000208:	dfc00115 	stw	ra,4(sp)
 200020c:	df000015 	stw	fp,0(sp)
 2000210:	d839883a 	mov	fp,sp
  printf("Hello from Nios II!\n");
 2000214:	01008034 	movhi	r4,512
 2000218:	21172404 	addi	r4,r4,23696
 200021c:	20002bc0 	call	20002bc <puts>

  return 0;
 2000220:	0005883a 	mov	r2,zero
}
 2000224:	e037883a 	mov	sp,fp
 2000228:	dfc00117 	ldw	ra,4(sp)
 200022c:	df000017 	ldw	fp,0(sp)
 2000230:	dec00204 	addi	sp,sp,8
 2000234:	f800283a 	ret

02000238 <_puts_r>:
 2000238:	defff604 	addi	sp,sp,-40
 200023c:	dc400815 	stw	r17,32(sp)
 2000240:	2023883a 	mov	r17,r4
 2000244:	2809883a 	mov	r4,r5
 2000248:	dc000715 	stw	r16,28(sp)
 200024c:	dfc00915 	stw	ra,36(sp)
 2000250:	2821883a 	mov	r16,r5
 2000254:	20002d00 	call	20002d0 <strlen>
 2000258:	10c00044 	addi	r3,r2,1
 200025c:	d8800115 	stw	r2,4(sp)
 2000260:	89400217 	ldw	r5,8(r17)
 2000264:	00808034 	movhi	r2,512
 2000268:	10972904 	addi	r2,r2,23716
 200026c:	d8800215 	stw	r2,8(sp)
 2000270:	00800044 	movi	r2,1
 2000274:	d8800315 	stw	r2,12(sp)
 2000278:	8809883a 	mov	r4,r17
 200027c:	00800084 	movi	r2,2
 2000280:	d9800404 	addi	r6,sp,16
 2000284:	dc000015 	stw	r16,0(sp)
 2000288:	d8c00615 	stw	r3,24(sp)
 200028c:	dec00415 	stw	sp,16(sp)
 2000290:	d8800515 	stw	r2,20(sp)
 2000294:	200035c0 	call	200035c <__sfvwrite_r>
 2000298:	1000061e 	bne	r2,zero,20002b4 <_puts_r+0x7c>
 200029c:	00800284 	movi	r2,10
 20002a0:	dfc00917 	ldw	ra,36(sp)
 20002a4:	dc400817 	ldw	r17,32(sp)
 20002a8:	dc000717 	ldw	r16,28(sp)
 20002ac:	dec00a04 	addi	sp,sp,40
 20002b0:	f800283a 	ret
 20002b4:	00bfffc4 	movi	r2,-1
 20002b8:	003ff906 	br	20002a0 <_puts_r+0x68>

020002bc <puts>:
 20002bc:	00808034 	movhi	r2,512
 20002c0:	109def04 	addi	r2,r2,30652
 20002c4:	200b883a 	mov	r5,r4
 20002c8:	11000017 	ldw	r4,0(r2)
 20002cc:	20002381 	jmpi	2000238 <_puts_r>

020002d0 <strlen>:
 20002d0:	208000cc 	andi	r2,r4,3
 20002d4:	10001f1e 	bne	r2,zero,2000354 <strlen+0x84>
 20002d8:	20800017 	ldw	r2,0(r4)
 20002dc:	01ffbff4 	movhi	r7,65279
 20002e0:	39ffbfc4 	addi	r7,r7,-257
 20002e4:	01a02074 	movhi	r6,32897
 20002e8:	31a02004 	addi	r6,r6,-32640
 20002ec:	11c7883a 	add	r3,r2,r7
 20002f0:	0084303a 	nor	r2,zero,r2
 20002f4:	1886703a 	and	r3,r3,r2
 20002f8:	1986703a 	and	r3,r3,r6
 20002fc:	2005883a 	mov	r2,r4
 2000300:	1800101e 	bne	r3,zero,2000344 <strlen+0x74>
 2000304:	10800104 	addi	r2,r2,4
 2000308:	10c00017 	ldw	r3,0(r2)
 200030c:	19cb883a 	add	r5,r3,r7
 2000310:	00c6303a 	nor	r3,zero,r3
 2000314:	28c6703a 	and	r3,r5,r3
 2000318:	1986703a 	and	r3,r3,r6
 200031c:	1800091e 	bne	r3,zero,2000344 <strlen+0x74>
 2000320:	10800104 	addi	r2,r2,4
 2000324:	10c00017 	ldw	r3,0(r2)
 2000328:	19cb883a 	add	r5,r3,r7
 200032c:	00c6303a 	nor	r3,zero,r3
 2000330:	28c6703a 	and	r3,r5,r3
 2000334:	1986703a 	and	r3,r3,r6
 2000338:	183ff226 	beq	r3,zero,2000304 <strlen+0x34>
 200033c:	00000106 	br	2000344 <strlen+0x74>
 2000340:	10800044 	addi	r2,r2,1
 2000344:	10c00007 	ldb	r3,0(r2)
 2000348:	183ffd1e 	bne	r3,zero,2000340 <strlen+0x70>
 200034c:	1105c83a 	sub	r2,r2,r4
 2000350:	f800283a 	ret
 2000354:	2005883a 	mov	r2,r4
 2000358:	003ffa06 	br	2000344 <strlen+0x74>

0200035c <__sfvwrite_r>:
 200035c:	30800217 	ldw	r2,8(r6)
 2000360:	defff504 	addi	sp,sp,-44
 2000364:	dd400615 	stw	r21,24(sp)
 2000368:	dd000515 	stw	r20,20(sp)
 200036c:	dc000115 	stw	r16,4(sp)
 2000370:	dfc00a15 	stw	ra,40(sp)
 2000374:	df000915 	stw	fp,36(sp)
 2000378:	ddc00815 	stw	r23,32(sp)
 200037c:	dd800715 	stw	r22,28(sp)
 2000380:	dcc00415 	stw	r19,16(sp)
 2000384:	dc800315 	stw	r18,12(sp)
 2000388:	dc400215 	stw	r17,8(sp)
 200038c:	3029883a 	mov	r20,r6
 2000390:	202b883a 	mov	r21,r4
 2000394:	2821883a 	mov	r16,r5
 2000398:	10002126 	beq	r2,zero,2000420 <__sfvwrite_r+0xc4>
 200039c:	2880030b 	ldhu	r2,12(r5)
 20003a0:	10c0020c 	andi	r3,r2,8
 20003a4:	18ffffcc 	andi	r3,r3,65535
 20003a8:	18e0001c 	xori	r3,r3,32768
 20003ac:	18e00004 	addi	r3,r3,-32768
 20003b0:	18002826 	beq	r3,zero,2000454 <__sfvwrite_r+0xf8>
 20003b4:	28c00417 	ldw	r3,16(r5)
 20003b8:	18002626 	beq	r3,zero,2000454 <__sfvwrite_r+0xf8>
 20003bc:	10c0008c 	andi	r3,r2,2
 20003c0:	18ffffcc 	andi	r3,r3,65535
 20003c4:	18e0001c 	xori	r3,r3,32768
 20003c8:	18e00004 	addi	r3,r3,-32768
 20003cc:	a4400017 	ldw	r17,0(r20)
 20003d0:	18002b26 	beq	r3,zero,2000480 <__sfvwrite_r+0x124>
 20003d4:	0027883a 	mov	r19,zero
 20003d8:	0025883a 	mov	r18,zero
 20003dc:	05810004 	movi	r22,1024
 20003e0:	980d883a 	mov	r6,r19
 20003e4:	a809883a 	mov	r4,r21
 20003e8:	90004f26 	beq	r18,zero,2000528 <__sfvwrite_r+0x1cc>
 20003ec:	900f883a 	mov	r7,r18
 20003f0:	81400717 	ldw	r5,28(r16)
 20003f4:	b480012e 	bgeu	r22,r18,20003fc <__sfvwrite_r+0xa0>
 20003f8:	01c10004 	movi	r7,1024
 20003fc:	80800917 	ldw	r2,36(r16)
 2000400:	103ee83a 	callr	r2
 2000404:	0080540e 	bge	zero,r2,2000558 <__sfvwrite_r+0x1fc>
 2000408:	a0c00217 	ldw	r3,8(r20)
 200040c:	98a7883a 	add	r19,r19,r2
 2000410:	90a5c83a 	sub	r18,r18,r2
 2000414:	1885c83a 	sub	r2,r3,r2
 2000418:	a0800215 	stw	r2,8(r20)
 200041c:	103ff01e 	bne	r2,zero,20003e0 <__sfvwrite_r+0x84>
 2000420:	0005883a 	mov	r2,zero
 2000424:	dfc00a17 	ldw	ra,40(sp)
 2000428:	df000917 	ldw	fp,36(sp)
 200042c:	ddc00817 	ldw	r23,32(sp)
 2000430:	dd800717 	ldw	r22,28(sp)
 2000434:	dd400617 	ldw	r21,24(sp)
 2000438:	dd000517 	ldw	r20,20(sp)
 200043c:	dcc00417 	ldw	r19,16(sp)
 2000440:	dc800317 	ldw	r18,12(sp)
 2000444:	dc400217 	ldw	r17,8(sp)
 2000448:	dc000117 	ldw	r16,4(sp)
 200044c:	dec00b04 	addi	sp,sp,44
 2000450:	f800283a 	ret
 2000454:	a809883a 	mov	r4,r21
 2000458:	800b883a 	mov	r5,r16
 200045c:	200193c0 	call	200193c <__swsetup_r>
 2000460:	1000f01e 	bne	r2,zero,2000824 <__sfvwrite_r+0x4c8>
 2000464:	8080030b 	ldhu	r2,12(r16)
 2000468:	a4400017 	ldw	r17,0(r20)
 200046c:	10c0008c 	andi	r3,r2,2
 2000470:	18ffffcc 	andi	r3,r3,65535
 2000474:	18e0001c 	xori	r3,r3,32768
 2000478:	18e00004 	addi	r3,r3,-32768
 200047c:	183fd51e 	bne	r3,zero,20003d4 <__sfvwrite_r+0x78>
 2000480:	10c0004c 	andi	r3,r2,1
 2000484:	002d883a 	mov	r22,zero
 2000488:	1800381e 	bne	r3,zero,200056c <__sfvwrite_r+0x210>
 200048c:	0025883a 	mov	r18,zero
 2000490:	90002126 	beq	r18,zero,2000518 <__sfvwrite_r+0x1bc>
 2000494:	10c0800c 	andi	r3,r2,512
 2000498:	18ffffcc 	andi	r3,r3,65535
 200049c:	18e0001c 	xori	r3,r3,32768
 20004a0:	18e00004 	addi	r3,r3,-32768
 20004a4:	84c00217 	ldw	r19,8(r16)
 20004a8:	18006b26 	beq	r3,zero,2000658 <__sfvwrite_r+0x2fc>
 20004ac:	980f883a 	mov	r7,r19
 20004b0:	94c08636 	bltu	r18,r19,20006cc <__sfvwrite_r+0x370>
 20004b4:	10c1200c 	andi	r3,r2,1152
 20004b8:	18009f1e 	bne	r3,zero,2000738 <__sfvwrite_r+0x3dc>
 20004bc:	81000017 	ldw	r4,0(r16)
 20004c0:	982f883a 	mov	r23,r19
 20004c4:	9039883a 	mov	fp,r18
 20004c8:	9027883a 	mov	r19,r18
 20004cc:	380d883a 	mov	r6,r7
 20004d0:	b00b883a 	mov	r5,r22
 20004d4:	d9c00015 	stw	r7,0(sp)
 20004d8:	20011b40 	call	20011b4 <memmove>
 20004dc:	d9c00017 	ldw	r7,0(sp)
 20004e0:	81000217 	ldw	r4,8(r16)
 20004e4:	80800017 	ldw	r2,0(r16)
 20004e8:	25efc83a 	sub	r23,r4,r23
 20004ec:	11cf883a 	add	r7,r2,r7
 20004f0:	85c00215 	stw	r23,8(r16)
 20004f4:	81c00015 	stw	r7,0(r16)
 20004f8:	a0800217 	ldw	r2,8(r20)
 20004fc:	b72d883a 	add	r22,r22,fp
 2000500:	9725c83a 	sub	r18,r18,fp
 2000504:	14e7c83a 	sub	r19,r2,r19
 2000508:	a4c00215 	stw	r19,8(r20)
 200050c:	983fc426 	beq	r19,zero,2000420 <__sfvwrite_r+0xc4>
 2000510:	8080030b 	ldhu	r2,12(r16)
 2000514:	903fdf1e 	bne	r18,zero,2000494 <__sfvwrite_r+0x138>
 2000518:	8d800017 	ldw	r22,0(r17)
 200051c:	8c800117 	ldw	r18,4(r17)
 2000520:	8c400204 	addi	r17,r17,8
 2000524:	003fda06 	br	2000490 <__sfvwrite_r+0x134>
 2000528:	8cc00017 	ldw	r19,0(r17)
 200052c:	8c800117 	ldw	r18,4(r17)
 2000530:	8c400204 	addi	r17,r17,8
 2000534:	003faa06 	br	20003e0 <__sfvwrite_r+0x84>
 2000538:	20012dc0 	call	20012dc <_realloc_r>
 200053c:	102f883a 	mov	r23,r2
 2000540:	10009f1e 	bne	r2,zero,20007c0 <__sfvwrite_r+0x464>
 2000544:	81400417 	ldw	r5,16(r16)
 2000548:	a809883a 	mov	r4,r21
 200054c:	20020dc0 	call	20020dc <_free_r>
 2000550:	00800304 	movi	r2,12
 2000554:	a8800015 	stw	r2,0(r21)
 2000558:	80c0030b 	ldhu	r3,12(r16)
 200055c:	00bfffc4 	movi	r2,-1
 2000560:	18c01014 	ori	r3,r3,64
 2000564:	80c0030d 	sth	r3,12(r16)
 2000568:	003fae06 	br	2000424 <__sfvwrite_r+0xc8>
 200056c:	0007883a 	mov	r3,zero
 2000570:	0039883a 	mov	fp,zero
 2000574:	0025883a 	mov	r18,zero
 2000578:	90001e26 	beq	r18,zero,20005f4 <__sfvwrite_r+0x298>
 200057c:	18006526 	beq	r3,zero,2000714 <__sfvwrite_r+0x3b8>
 2000580:	b02f883a 	mov	r23,r22
 2000584:	9580012e 	bgeu	r18,r22,200058c <__sfvwrite_r+0x230>
 2000588:	902f883a 	mov	r23,r18
 200058c:	81000017 	ldw	r4,0(r16)
 2000590:	80800417 	ldw	r2,16(r16)
 2000594:	84c00217 	ldw	r19,8(r16)
 2000598:	81c00517 	ldw	r7,20(r16)
 200059c:	1100022e 	bgeu	r2,r4,20005a8 <__sfvwrite_r+0x24c>
 20005a0:	99e7883a 	add	r19,r19,r7
 20005a4:	9dc01816 	blt	r19,r23,2000608 <__sfvwrite_r+0x2ac>
 20005a8:	b9c03b16 	blt	r23,r7,2000698 <__sfvwrite_r+0x33c>
 20005ac:	80800917 	ldw	r2,36(r16)
 20005b0:	81400717 	ldw	r5,28(r16)
 20005b4:	a809883a 	mov	r4,r21
 20005b8:	d8c00015 	stw	r3,0(sp)
 20005bc:	e00d883a 	mov	r6,fp
 20005c0:	103ee83a 	callr	r2
 20005c4:	1027883a 	mov	r19,r2
 20005c8:	d8c00017 	ldw	r3,0(sp)
 20005cc:	00bfe20e 	bge	zero,r2,2000558 <__sfvwrite_r+0x1fc>
 20005d0:	b4edc83a 	sub	r22,r22,r19
 20005d4:	b0001a26 	beq	r22,zero,2000640 <__sfvwrite_r+0x2e4>
 20005d8:	a0800217 	ldw	r2,8(r20)
 20005dc:	e4f9883a 	add	fp,fp,r19
 20005e0:	94e5c83a 	sub	r18,r18,r19
 20005e4:	14e7c83a 	sub	r19,r2,r19
 20005e8:	a4c00215 	stw	r19,8(r20)
 20005ec:	983f8c26 	beq	r19,zero,2000420 <__sfvwrite_r+0xc4>
 20005f0:	903fe21e 	bne	r18,zero,200057c <__sfvwrite_r+0x220>
 20005f4:	8f000017 	ldw	fp,0(r17)
 20005f8:	8c800117 	ldw	r18,4(r17)
 20005fc:	0007883a 	mov	r3,zero
 2000600:	8c400204 	addi	r17,r17,8
 2000604:	003fdc06 	br	2000578 <__sfvwrite_r+0x21c>
 2000608:	e00b883a 	mov	r5,fp
 200060c:	980d883a 	mov	r6,r19
 2000610:	d8c00015 	stw	r3,0(sp)
 2000614:	20011b40 	call	20011b4 <memmove>
 2000618:	80800017 	ldw	r2,0(r16)
 200061c:	a809883a 	mov	r4,r21
 2000620:	800b883a 	mov	r5,r16
 2000624:	14c5883a 	add	r2,r2,r19
 2000628:	80800015 	stw	r2,0(r16)
 200062c:	2001ab00 	call	2001ab0 <_fflush_r>
 2000630:	d8c00017 	ldw	r3,0(sp)
 2000634:	103fc81e 	bne	r2,zero,2000558 <__sfvwrite_r+0x1fc>
 2000638:	b4edc83a 	sub	r22,r22,r19
 200063c:	b03fe61e 	bne	r22,zero,20005d8 <__sfvwrite_r+0x27c>
 2000640:	a809883a 	mov	r4,r21
 2000644:	800b883a 	mov	r5,r16
 2000648:	2001ab00 	call	2001ab0 <_fflush_r>
 200064c:	103fc21e 	bne	r2,zero,2000558 <__sfvwrite_r+0x1fc>
 2000650:	0007883a 	mov	r3,zero
 2000654:	003fe006 	br	20005d8 <__sfvwrite_r+0x27c>
 2000658:	81000017 	ldw	r4,0(r16)
 200065c:	80800417 	ldw	r2,16(r16)
 2000660:	1100022e 	bgeu	r2,r4,200066c <__sfvwrite_r+0x310>
 2000664:	9839883a 	mov	fp,r19
 2000668:	9c806036 	bltu	r19,r18,20007ec <__sfvwrite_r+0x490>
 200066c:	81c00517 	ldw	r7,20(r16)
 2000670:	91c01c36 	bltu	r18,r7,20006e4 <__sfvwrite_r+0x388>
 2000674:	80800917 	ldw	r2,36(r16)
 2000678:	81400717 	ldw	r5,28(r16)
 200067c:	a809883a 	mov	r4,r21
 2000680:	b00d883a 	mov	r6,r22
 2000684:	103ee83a 	callr	r2
 2000688:	1027883a 	mov	r19,r2
 200068c:	00bfb20e 	bge	zero,r2,2000558 <__sfvwrite_r+0x1fc>
 2000690:	1039883a 	mov	fp,r2
 2000694:	003f9806 	br	20004f8 <__sfvwrite_r+0x19c>
 2000698:	b80d883a 	mov	r6,r23
 200069c:	e00b883a 	mov	r5,fp
 20006a0:	d8c00015 	stw	r3,0(sp)
 20006a4:	20011b40 	call	20011b4 <memmove>
 20006a8:	80800217 	ldw	r2,8(r16)
 20006ac:	81000017 	ldw	r4,0(r16)
 20006b0:	b827883a 	mov	r19,r23
 20006b4:	15c5c83a 	sub	r2,r2,r23
 20006b8:	25ef883a 	add	r23,r4,r23
 20006bc:	80800215 	stw	r2,8(r16)
 20006c0:	85c00015 	stw	r23,0(r16)
 20006c4:	d8c00017 	ldw	r3,0(sp)
 20006c8:	003fc106 	br	20005d0 <__sfvwrite_r+0x274>
 20006cc:	81000017 	ldw	r4,0(r16)
 20006d0:	902f883a 	mov	r23,r18
 20006d4:	9039883a 	mov	fp,r18
 20006d8:	9027883a 	mov	r19,r18
 20006dc:	900f883a 	mov	r7,r18
 20006e0:	003f7a06 	br	20004cc <__sfvwrite_r+0x170>
 20006e4:	b00b883a 	mov	r5,r22
 20006e8:	900d883a 	mov	r6,r18
 20006ec:	20011b40 	call	20011b4 <memmove>
 20006f0:	80c00217 	ldw	r3,8(r16)
 20006f4:	80800017 	ldw	r2,0(r16)
 20006f8:	9027883a 	mov	r19,r18
 20006fc:	1c87c83a 	sub	r3,r3,r18
 2000700:	1485883a 	add	r2,r2,r18
 2000704:	80c00215 	stw	r3,8(r16)
 2000708:	80800015 	stw	r2,0(r16)
 200070c:	9039883a 	mov	fp,r18
 2000710:	003f7906 	br	20004f8 <__sfvwrite_r+0x19c>
 2000714:	e009883a 	mov	r4,fp
 2000718:	01400284 	movi	r5,10
 200071c:	900d883a 	mov	r6,r18
 2000720:	2000fc40 	call	2000fc4 <memchr>
 2000724:	10003c26 	beq	r2,zero,2000818 <__sfvwrite_r+0x4bc>
 2000728:	15800044 	addi	r22,r2,1
 200072c:	b72dc83a 	sub	r22,r22,fp
 2000730:	00c00044 	movi	r3,1
 2000734:	003f9206 	br	2000580 <__sfvwrite_r+0x224>
 2000738:	81000517 	ldw	r4,20(r16)
 200073c:	81400417 	ldw	r5,16(r16)
 2000740:	80c00017 	ldw	r3,0(r16)
 2000744:	210d883a 	add	r6,r4,r4
 2000748:	3109883a 	add	r4,r6,r4
 200074c:	2026d7fa 	srli	r19,r4,31
 2000750:	1979c83a 	sub	fp,r3,r5
 2000754:	e1800044 	addi	r6,fp,1
 2000758:	9909883a 	add	r4,r19,r4
 200075c:	2027d07a 	srai	r19,r4,1
 2000760:	3489883a 	add	r4,r6,r18
 2000764:	980d883a 	mov	r6,r19
 2000768:	9900022e 	bgeu	r19,r4,2000774 <__sfvwrite_r+0x418>
 200076c:	2027883a 	mov	r19,r4
 2000770:	200d883a 	mov	r6,r4
 2000774:	1081000c 	andi	r2,r2,1024
 2000778:	10bfffcc 	andi	r2,r2,65535
 200077c:	10a0001c 	xori	r2,r2,32768
 2000780:	10a00004 	addi	r2,r2,-32768
 2000784:	a809883a 	mov	r4,r21
 2000788:	103f6b26 	beq	r2,zero,2000538 <__sfvwrite_r+0x1dc>
 200078c:	300b883a 	mov	r5,r6
 2000790:	20008400 	call	2000840 <_malloc_r>
 2000794:	102f883a 	mov	r23,r2
 2000798:	103f6d26 	beq	r2,zero,2000550 <__sfvwrite_r+0x1f4>
 200079c:	81400417 	ldw	r5,16(r16)
 20007a0:	1009883a 	mov	r4,r2
 20007a4:	e00d883a 	mov	r6,fp
 20007a8:	20010bc0 	call	20010bc <memcpy>
 20007ac:	8080030b 	ldhu	r2,12(r16)
 20007b0:	00fedfc4 	movi	r3,-1153
 20007b4:	10c4703a 	and	r2,r2,r3
 20007b8:	10802014 	ori	r2,r2,128
 20007bc:	8080030d 	sth	r2,12(r16)
 20007c0:	bf09883a 	add	r4,r23,fp
 20007c4:	9f07c83a 	sub	r3,r19,fp
 20007c8:	85c00415 	stw	r23,16(r16)
 20007cc:	84c00515 	stw	r19,20(r16)
 20007d0:	81000015 	stw	r4,0(r16)
 20007d4:	902f883a 	mov	r23,r18
 20007d8:	80c00215 	stw	r3,8(r16)
 20007dc:	9039883a 	mov	fp,r18
 20007e0:	9027883a 	mov	r19,r18
 20007e4:	900f883a 	mov	r7,r18
 20007e8:	003f3806 	br	20004cc <__sfvwrite_r+0x170>
 20007ec:	b00b883a 	mov	r5,r22
 20007f0:	980d883a 	mov	r6,r19
 20007f4:	20011b40 	call	20011b4 <memmove>
 20007f8:	80800017 	ldw	r2,0(r16)
 20007fc:	a809883a 	mov	r4,r21
 2000800:	800b883a 	mov	r5,r16
 2000804:	14c5883a 	add	r2,r2,r19
 2000808:	80800015 	stw	r2,0(r16)
 200080c:	2001ab00 	call	2001ab0 <_fflush_r>
 2000810:	103f3926 	beq	r2,zero,20004f8 <__sfvwrite_r+0x19c>
 2000814:	003f5006 	br	2000558 <__sfvwrite_r+0x1fc>
 2000818:	95800044 	addi	r22,r18,1
 200081c:	00c00044 	movi	r3,1
 2000820:	003f5706 	br	2000580 <__sfvwrite_r+0x224>
 2000824:	80c0030b 	ldhu	r3,12(r16)
 2000828:	00bfffc4 	movi	r2,-1
 200082c:	18c01014 	ori	r3,r3,64
 2000830:	80c0030d 	sth	r3,12(r16)
 2000834:	00c00244 	movi	r3,9
 2000838:	a8c00015 	stw	r3,0(r21)
 200083c:	003ef906 	br	2000424 <__sfvwrite_r+0xc8>

02000840 <_malloc_r>:
 2000840:	defff604 	addi	sp,sp,-40
 2000844:	dc800215 	stw	r18,8(sp)
 2000848:	dfc00915 	stw	ra,36(sp)
 200084c:	df000815 	stw	fp,32(sp)
 2000850:	ddc00715 	stw	r23,28(sp)
 2000854:	dd800615 	stw	r22,24(sp)
 2000858:	dd400515 	stw	r21,20(sp)
 200085c:	dd000415 	stw	r20,16(sp)
 2000860:	dcc00315 	stw	r19,12(sp)
 2000864:	dc400115 	stw	r17,4(sp)
 2000868:	dc000015 	stw	r16,0(sp)
 200086c:	288002c4 	addi	r2,r5,11
 2000870:	00c00584 	movi	r3,22
 2000874:	2025883a 	mov	r18,r4
 2000878:	18802b2e 	bgeu	r3,r2,2000928 <_malloc_r+0xe8>
 200087c:	047ffe04 	movi	r17,-8
 2000880:	1462703a 	and	r17,r2,r17
 2000884:	88002a16 	blt	r17,zero,2000930 <_malloc_r+0xf0>
 2000888:	89402936 	bltu	r17,r5,2000930 <_malloc_r+0xf0>
 200088c:	9009883a 	mov	r4,r18
 2000890:	20032480 	call	2003248 <__malloc_lock>
 2000894:	00807dc4 	movi	r2,503
 2000898:	14402936 	bltu	r2,r17,2000940 <_malloc_r+0x100>
 200089c:	8808d0fa 	srli	r4,r17,3
 20008a0:	04c08034 	movhi	r19,512
 20008a4:	9cd83904 	addi	r19,r19,24804
 20008a8:	2105883a 	add	r2,r4,r4
 20008ac:	1085883a 	add	r2,r2,r2
 20008b0:	1085883a 	add	r2,r2,r2
 20008b4:	9885883a 	add	r2,r19,r2
 20008b8:	14000317 	ldw	r16,12(r2)
 20008bc:	80815526 	beq	r16,r2,2000e14 <_malloc_r+0x5d4>
 20008c0:	81000117 	ldw	r4,4(r16)
 20008c4:	00bfff04 	movi	r2,-4
 20008c8:	80c00317 	ldw	r3,12(r16)
 20008cc:	2084703a 	and	r2,r4,r2
 20008d0:	8085883a 	add	r2,r16,r2
 20008d4:	11800117 	ldw	r6,4(r2)
 20008d8:	81400217 	ldw	r5,8(r16)
 20008dc:	9009883a 	mov	r4,r18
 20008e0:	31800054 	ori	r6,r6,1
 20008e4:	11800115 	stw	r6,4(r2)
 20008e8:	28c00315 	stw	r3,12(r5)
 20008ec:	19400215 	stw	r5,8(r3)
 20008f0:	20032680 	call	2003268 <__malloc_unlock>
 20008f4:	80800204 	addi	r2,r16,8
 20008f8:	dfc00917 	ldw	ra,36(sp)
 20008fc:	df000817 	ldw	fp,32(sp)
 2000900:	ddc00717 	ldw	r23,28(sp)
 2000904:	dd800617 	ldw	r22,24(sp)
 2000908:	dd400517 	ldw	r21,20(sp)
 200090c:	dd000417 	ldw	r20,16(sp)
 2000910:	dcc00317 	ldw	r19,12(sp)
 2000914:	dc800217 	ldw	r18,8(sp)
 2000918:	dc400117 	ldw	r17,4(sp)
 200091c:	dc000017 	ldw	r16,0(sp)
 2000920:	dec00a04 	addi	sp,sp,40
 2000924:	f800283a 	ret
 2000928:	04400404 	movi	r17,16
 200092c:	897fd72e 	bgeu	r17,r5,200088c <_malloc_r+0x4c>
 2000930:	00800304 	movi	r2,12
 2000934:	90800015 	stw	r2,0(r18)
 2000938:	0005883a 	mov	r2,zero
 200093c:	003fee06 	br	20008f8 <_malloc_r+0xb8>
 2000940:	8808d27a 	srli	r4,r17,9
 2000944:	20007126 	beq	r4,zero,2000b0c <_malloc_r+0x2cc>
 2000948:	00800104 	movi	r2,4
 200094c:	1100eb36 	bltu	r2,r4,2000cfc <_malloc_r+0x4bc>
 2000950:	8808d1ba 	srli	r4,r17,6
 2000954:	21000e04 	addi	r4,r4,56
 2000958:	210b883a 	add	r5,r4,r4
 200095c:	294b883a 	add	r5,r5,r5
 2000960:	294b883a 	add	r5,r5,r5
 2000964:	04c08034 	movhi	r19,512
 2000968:	9cd83904 	addi	r19,r19,24804
 200096c:	994b883a 	add	r5,r19,r5
 2000970:	2c000317 	ldw	r16,12(r5)
 2000974:	2c000e26 	beq	r5,r16,20009b0 <_malloc_r+0x170>
 2000978:	80c00117 	ldw	r3,4(r16)
 200097c:	01ffff04 	movi	r7,-4
 2000980:	018003c4 	movi	r6,15
 2000984:	19c6703a 	and	r3,r3,r7
 2000988:	1c45c83a 	sub	r2,r3,r17
 200098c:	30800716 	blt	r6,r2,20009ac <_malloc_r+0x16c>
 2000990:	1000610e 	bge	r2,zero,2000b18 <_malloc_r+0x2d8>
 2000994:	84000317 	ldw	r16,12(r16)
 2000998:	2c000526 	beq	r5,r16,20009b0 <_malloc_r+0x170>
 200099c:	80c00117 	ldw	r3,4(r16)
 20009a0:	19c6703a 	and	r3,r3,r7
 20009a4:	1c45c83a 	sub	r2,r3,r17
 20009a8:	30bff90e 	bge	r6,r2,2000990 <_malloc_r+0x150>
 20009ac:	213fffc4 	addi	r4,r4,-1
 20009b0:	21000044 	addi	r4,r4,1
 20009b4:	9c000417 	ldw	r16,16(r19)
 20009b8:	00c08034 	movhi	r3,512
 20009bc:	18d83904 	addi	r3,r3,24804
 20009c0:	1a400204 	addi	r9,r3,8
 20009c4:	8240ff26 	beq	r16,r9,2000dc4 <_malloc_r+0x584>
 20009c8:	81400117 	ldw	r5,4(r16)
 20009cc:	00bfff04 	movi	r2,-4
 20009d0:	018003c4 	movi	r6,15
 20009d4:	2884703a 	and	r2,r5,r2
 20009d8:	144bc83a 	sub	r5,r2,r17
 20009dc:	3140ea16 	blt	r6,r5,2000d88 <_malloc_r+0x548>
 20009e0:	1a400515 	stw	r9,20(r3)
 20009e4:	1a400415 	stw	r9,16(r3)
 20009e8:	2800570e 	bge	r5,zero,2000b48 <_malloc_r+0x308>
 20009ec:	01407fc4 	movi	r5,511
 20009f0:	2880ca36 	bltu	r5,r2,2000d1c <_malloc_r+0x4dc>
 20009f4:	1004d0fa 	srli	r2,r2,3
 20009f8:	02000044 	movi	r8,1
 20009fc:	19c00117 	ldw	r7,4(r3)
 2000a00:	108b883a 	add	r5,r2,r2
 2000a04:	294b883a 	add	r5,r5,r5
 2000a08:	1005d0ba 	srai	r2,r2,2
 2000a0c:	294b883a 	add	r5,r5,r5
 2000a10:	28cb883a 	add	r5,r5,r3
 2000a14:	29800217 	ldw	r6,8(r5)
 2000a18:	4084983a 	sll	r2,r8,r2
 2000a1c:	81400315 	stw	r5,12(r16)
 2000a20:	81800215 	stw	r6,8(r16)
 2000a24:	11c4b03a 	or	r2,r2,r7
 2000a28:	18800115 	stw	r2,4(r3)
 2000a2c:	2c000215 	stw	r16,8(r5)
 2000a30:	34000315 	stw	r16,12(r6)
 2000a34:	200bd0ba 	srai	r5,r4,2
 2000a38:	00c00044 	movi	r3,1
 2000a3c:	194a983a 	sll	r5,r3,r5
 2000a40:	11404936 	bltu	r2,r5,2000b68 <_malloc_r+0x328>
 2000a44:	1146703a 	and	r3,r2,r5
 2000a48:	18000a1e 	bne	r3,zero,2000a74 <_malloc_r+0x234>
 2000a4c:	00ffff04 	movi	r3,-4
 2000a50:	294b883a 	add	r5,r5,r5
 2000a54:	20c8703a 	and	r4,r4,r3
 2000a58:	1146703a 	and	r3,r2,r5
 2000a5c:	21000104 	addi	r4,r4,4
 2000a60:	1800041e 	bne	r3,zero,2000a74 <_malloc_r+0x234>
 2000a64:	294b883a 	add	r5,r5,r5
 2000a68:	1146703a 	and	r3,r2,r5
 2000a6c:	21000104 	addi	r4,r4,4
 2000a70:	183ffc26 	beq	r3,zero,2000a64 <_malloc_r+0x224>
 2000a74:	023fff04 	movi	r8,-4
 2000a78:	01c003c4 	movi	r7,15
 2000a7c:	2105883a 	add	r2,r4,r4
 2000a80:	1085883a 	add	r2,r2,r2
 2000a84:	1085883a 	add	r2,r2,r2
 2000a88:	9899883a 	add	r12,r19,r2
 2000a8c:	62800304 	addi	r10,r12,12
 2000a90:	2017883a 	mov	r11,r4
 2000a94:	54000017 	ldw	r16,0(r10)
 2000a98:	51bffd04 	addi	r6,r10,-12
 2000a9c:	8180041e 	bne	r16,r6,2000ab0 <_malloc_r+0x270>
 2000aa0:	0000ca06 	br	2000dcc <_malloc_r+0x58c>
 2000aa4:	10001c0e 	bge	r2,zero,2000b18 <_malloc_r+0x2d8>
 2000aa8:	84000317 	ldw	r16,12(r16)
 2000aac:	8180c726 	beq	r16,r6,2000dcc <_malloc_r+0x58c>
 2000ab0:	80c00117 	ldw	r3,4(r16)
 2000ab4:	1a06703a 	and	r3,r3,r8
 2000ab8:	1c45c83a 	sub	r2,r3,r17
 2000abc:	38bff90e 	bge	r7,r2,2000aa4 <_malloc_r+0x264>
 2000ac0:	81000317 	ldw	r4,12(r16)
 2000ac4:	81400217 	ldw	r5,8(r16)
 2000ac8:	8447883a 	add	r3,r16,r17
 2000acc:	8c400054 	ori	r17,r17,1
 2000ad0:	29000315 	stw	r4,12(r5)
 2000ad4:	21400215 	stw	r5,8(r4)
 2000ad8:	84400115 	stw	r17,4(r16)
 2000adc:	1889883a 	add	r4,r3,r2
 2000ae0:	11400054 	ori	r5,r2,1
 2000ae4:	98c00515 	stw	r3,20(r19)
 2000ae8:	98c00415 	stw	r3,16(r19)
 2000aec:	20800015 	stw	r2,0(r4)
 2000af0:	1a400315 	stw	r9,12(r3)
 2000af4:	1a400215 	stw	r9,8(r3)
 2000af8:	19400115 	stw	r5,4(r3)
 2000afc:	9009883a 	mov	r4,r18
 2000b00:	20032680 	call	2003268 <__malloc_unlock>
 2000b04:	80800204 	addi	r2,r16,8
 2000b08:	003f7b06 	br	20008f8 <_malloc_r+0xb8>
 2000b0c:	8808d0fa 	srli	r4,r17,3
 2000b10:	210b883a 	add	r5,r4,r4
 2000b14:	003f9106 	br	200095c <_malloc_r+0x11c>
 2000b18:	80c7883a 	add	r3,r16,r3
 2000b1c:	19400117 	ldw	r5,4(r3)
 2000b20:	80800317 	ldw	r2,12(r16)
 2000b24:	81000217 	ldw	r4,8(r16)
 2000b28:	29400054 	ori	r5,r5,1
 2000b2c:	19400115 	stw	r5,4(r3)
 2000b30:	20800315 	stw	r2,12(r4)
 2000b34:	11000215 	stw	r4,8(r2)
 2000b38:	9009883a 	mov	r4,r18
 2000b3c:	20032680 	call	2003268 <__malloc_unlock>
 2000b40:	80800204 	addi	r2,r16,8
 2000b44:	003f6c06 	br	20008f8 <_malloc_r+0xb8>
 2000b48:	8085883a 	add	r2,r16,r2
 2000b4c:	10c00117 	ldw	r3,4(r2)
 2000b50:	9009883a 	mov	r4,r18
 2000b54:	18c00054 	ori	r3,r3,1
 2000b58:	10c00115 	stw	r3,4(r2)
 2000b5c:	20032680 	call	2003268 <__malloc_unlock>
 2000b60:	80800204 	addi	r2,r16,8
 2000b64:	003f6406 	br	20008f8 <_malloc_r+0xb8>
 2000b68:	9c000217 	ldw	r16,8(r19)
 2000b6c:	00bfff04 	movi	r2,-4
 2000b70:	85400117 	ldw	r21,4(r16)
 2000b74:	a8aa703a 	and	r21,r21,r2
 2000b78:	ac400336 	bltu	r21,r17,2000b88 <_malloc_r+0x348>
 2000b7c:	ac45c83a 	sub	r2,r21,r17
 2000b80:	00c003c4 	movi	r3,15
 2000b84:	18805316 	blt	r3,r2,2000cd4 <_malloc_r+0x494>
 2000b88:	d5e6d317 	ldw	r23,-25780(gp)
 2000b8c:	d0e00217 	ldw	r3,-32760(gp)
 2000b90:	00bfffc4 	movi	r2,-1
 2000b94:	8579883a 	add	fp,r16,r21
 2000b98:	8def883a 	add	r23,r17,r23
 2000b9c:	1880d226 	beq	r3,r2,2000ee8 <_malloc_r+0x6a8>
 2000ba0:	bdc403c4 	addi	r23,r23,4111
 2000ba4:	00bc0004 	movi	r2,-4096
 2000ba8:	b8ae703a 	and	r23,r23,r2
 2000bac:	9009883a 	mov	r4,r18
 2000bb0:	b80b883a 	mov	r5,r23
 2000bb4:	20018d80 	call	20018d8 <_sbrk_r>
 2000bb8:	1029883a 	mov	r20,r2
 2000bbc:	00bfffc4 	movi	r2,-1
 2000bc0:	a080d126 	beq	r20,r2,2000f08 <_malloc_r+0x6c8>
 2000bc4:	a7009f36 	bltu	r20,fp,2000e44 <_malloc_r+0x604>
 2000bc8:	05808074 	movhi	r22,513
 2000bcc:	b5a4c904 	addi	r22,r22,-27868
 2000bd0:	b0800017 	ldw	r2,0(r22)
 2000bd4:	b885883a 	add	r2,r23,r2
 2000bd8:	b0800015 	stw	r2,0(r22)
 2000bdc:	e500cf26 	beq	fp,r20,2000f1c <_malloc_r+0x6dc>
 2000be0:	d1200217 	ldw	r4,-32760(gp)
 2000be4:	00ffffc4 	movi	r3,-1
 2000be8:	20c0e026 	beq	r4,r3,2000f6c <_malloc_r+0x72c>
 2000bec:	a739c83a 	sub	fp,r20,fp
 2000bf0:	1705883a 	add	r2,r2,fp
 2000bf4:	b0800015 	stw	r2,0(r22)
 2000bf8:	a08001cc 	andi	r2,r20,7
 2000bfc:	1000a526 	beq	r2,zero,2000e94 <_malloc_r+0x654>
 2000c00:	a0a9c83a 	sub	r20,r20,r2
 2000c04:	00c40204 	movi	r3,4104
 2000c08:	a5000204 	addi	r20,r20,8
 2000c0c:	1885c83a 	sub	r2,r3,r2
 2000c10:	a5c7883a 	add	r3,r20,r23
 2000c14:	18c3ffcc 	andi	r3,r3,4095
 2000c18:	10efc83a 	sub	r23,r2,r3
 2000c1c:	9009883a 	mov	r4,r18
 2000c20:	b80b883a 	mov	r5,r23
 2000c24:	20018d80 	call	20018d8 <_sbrk_r>
 2000c28:	00ffffc4 	movi	r3,-1
 2000c2c:	10c0cc26 	beq	r2,r3,2000f60 <_malloc_r+0x720>
 2000c30:	1505c83a 	sub	r2,r2,r20
 2000c34:	b887883a 	add	r3,r23,r2
 2000c38:	18c00054 	ori	r3,r3,1
 2000c3c:	b0800017 	ldw	r2,0(r22)
 2000c40:	9d000215 	stw	r20,8(r19)
 2000c44:	a0c00115 	stw	r3,4(r20)
 2000c48:	b885883a 	add	r2,r23,r2
 2000c4c:	b0800015 	stw	r2,0(r22)
 2000c50:	84c00e26 	beq	r16,r19,2000c8c <_malloc_r+0x44c>
 2000c54:	00c003c4 	movi	r3,15
 2000c58:	1d40902e 	bgeu	r3,r21,2000e9c <_malloc_r+0x65c>
 2000c5c:	ad7ffd04 	addi	r21,r21,-12
 2000c60:	013ffe04 	movi	r4,-8
 2000c64:	a908703a 	and	r4,r21,r4
 2000c68:	810b883a 	add	r5,r16,r4
 2000c6c:	01800144 	movi	r6,5
 2000c70:	29800115 	stw	r6,4(r5)
 2000c74:	29800215 	stw	r6,8(r5)
 2000c78:	81400117 	ldw	r5,4(r16)
 2000c7c:	2940004c 	andi	r5,r5,1
 2000c80:	214ab03a 	or	r5,r4,r5
 2000c84:	81400115 	stw	r5,4(r16)
 2000c88:	1900ae36 	bltu	r3,r4,2000f44 <_malloc_r+0x704>
 2000c8c:	d0e6d217 	ldw	r3,-25784(gp)
 2000c90:	1880012e 	bgeu	r3,r2,2000c98 <_malloc_r+0x458>
 2000c94:	d0a6d215 	stw	r2,-25784(gp)
 2000c98:	d0e6d117 	ldw	r3,-25788(gp)
 2000c9c:	9c000217 	ldw	r16,8(r19)
 2000ca0:	1880012e 	bgeu	r3,r2,2000ca8 <_malloc_r+0x468>
 2000ca4:	d0a6d115 	stw	r2,-25788(gp)
 2000ca8:	80c00117 	ldw	r3,4(r16)
 2000cac:	00bfff04 	movi	r2,-4
 2000cb0:	1886703a 	and	r3,r3,r2
 2000cb4:	1c45c83a 	sub	r2,r3,r17
 2000cb8:	1c400236 	bltu	r3,r17,2000cc4 <_malloc_r+0x484>
 2000cbc:	00c003c4 	movi	r3,15
 2000cc0:	18800416 	blt	r3,r2,2000cd4 <_malloc_r+0x494>
 2000cc4:	9009883a 	mov	r4,r18
 2000cc8:	20032680 	call	2003268 <__malloc_unlock>
 2000ccc:	0005883a 	mov	r2,zero
 2000cd0:	003f0906 	br	20008f8 <_malloc_r+0xb8>
 2000cd4:	88c00054 	ori	r3,r17,1
 2000cd8:	10800054 	ori	r2,r2,1
 2000cdc:	80c00115 	stw	r3,4(r16)
 2000ce0:	8463883a 	add	r17,r16,r17
 2000ce4:	88800115 	stw	r2,4(r17)
 2000ce8:	9009883a 	mov	r4,r18
 2000cec:	9c400215 	stw	r17,8(r19)
 2000cf0:	20032680 	call	2003268 <__malloc_unlock>
 2000cf4:	80800204 	addi	r2,r16,8
 2000cf8:	003eff06 	br	20008f8 <_malloc_r+0xb8>
 2000cfc:	00800504 	movi	r2,20
 2000d00:	1100492e 	bgeu	r2,r4,2000e28 <_malloc_r+0x5e8>
 2000d04:	00801504 	movi	r2,84
 2000d08:	11005c36 	bltu	r2,r4,2000e7c <_malloc_r+0x63c>
 2000d0c:	8808d33a 	srli	r4,r17,12
 2000d10:	21001b84 	addi	r4,r4,110
 2000d14:	210b883a 	add	r5,r4,r4
 2000d18:	003f1006 	br	200095c <_malloc_r+0x11c>
 2000d1c:	1006d27a 	srli	r3,r2,9
 2000d20:	01400104 	movi	r5,4
 2000d24:	28c0432e 	bgeu	r5,r3,2000e34 <_malloc_r+0x5f4>
 2000d28:	01400504 	movi	r5,20
 2000d2c:	28c07036 	bltu	r5,r3,2000ef0 <_malloc_r+0x6b0>
 2000d30:	194016c4 	addi	r5,r3,91
 2000d34:	294d883a 	add	r6,r5,r5
 2000d38:	318d883a 	add	r6,r6,r6
 2000d3c:	318d883a 	add	r6,r6,r6
 2000d40:	998d883a 	add	r6,r19,r6
 2000d44:	30c00217 	ldw	r3,8(r6)
 2000d48:	01c08034 	movhi	r7,512
 2000d4c:	39d83904 	addi	r7,r7,24804
 2000d50:	19805726 	beq	r3,r6,2000eb0 <_malloc_r+0x670>
 2000d54:	01ffff04 	movi	r7,-4
 2000d58:	19400117 	ldw	r5,4(r3)
 2000d5c:	29ca703a 	and	r5,r5,r7
 2000d60:	1140022e 	bgeu	r2,r5,2000d6c <_malloc_r+0x52c>
 2000d64:	18c00217 	ldw	r3,8(r3)
 2000d68:	30fffb1e 	bne	r6,r3,2000d58 <_malloc_r+0x518>
 2000d6c:	19400317 	ldw	r5,12(r3)
 2000d70:	98800117 	ldw	r2,4(r19)
 2000d74:	81400315 	stw	r5,12(r16)
 2000d78:	80c00215 	stw	r3,8(r16)
 2000d7c:	2c000215 	stw	r16,8(r5)
 2000d80:	1c000315 	stw	r16,12(r3)
 2000d84:	003f2b06 	br	2000a34 <_malloc_r+0x1f4>
 2000d88:	8445883a 	add	r2,r16,r17
 2000d8c:	8c400054 	ori	r17,r17,1
 2000d90:	18800515 	stw	r2,20(r3)
 2000d94:	18800415 	stw	r2,16(r3)
 2000d98:	29000054 	ori	r4,r5,1
 2000d9c:	1147883a 	add	r3,r2,r5
 2000da0:	84400115 	stw	r17,4(r16)
 2000da4:	11000115 	stw	r4,4(r2)
 2000da8:	12400315 	stw	r9,12(r2)
 2000dac:	12400215 	stw	r9,8(r2)
 2000db0:	19400015 	stw	r5,0(r3)
 2000db4:	9009883a 	mov	r4,r18
 2000db8:	20032680 	call	2003268 <__malloc_unlock>
 2000dbc:	80800204 	addi	r2,r16,8
 2000dc0:	003ecd06 	br	20008f8 <_malloc_r+0xb8>
 2000dc4:	18800117 	ldw	r2,4(r3)
 2000dc8:	003f1a06 	br	2000a34 <_malloc_r+0x1f4>
 2000dcc:	5ac00044 	addi	r11,r11,1
 2000dd0:	588000cc 	andi	r2,r11,3
 2000dd4:	52800204 	addi	r10,r10,8
 2000dd8:	103f2e1e 	bne	r2,zero,2000a94 <_malloc_r+0x254>
 2000ddc:	20c000cc 	andi	r3,r4,3
 2000de0:	60bffe04 	addi	r2,r12,-8
 2000de4:	18006f26 	beq	r3,zero,2000fa4 <_malloc_r+0x764>
 2000de8:	63000017 	ldw	r12,0(r12)
 2000dec:	213fffc4 	addi	r4,r4,-1
 2000df0:	60bffa26 	beq	r12,r2,2000ddc <_malloc_r+0x59c>
 2000df4:	98800117 	ldw	r2,4(r19)
 2000df8:	294b883a 	add	r5,r5,r5
 2000dfc:	117f5a36 	bltu	r2,r5,2000b68 <_malloc_r+0x328>
 2000e00:	283f5926 	beq	r5,zero,2000b68 <_malloc_r+0x328>
 2000e04:	1146703a 	and	r3,r2,r5
 2000e08:	18001626 	beq	r3,zero,2000e64 <_malloc_r+0x624>
 2000e0c:	5809883a 	mov	r4,r11
 2000e10:	003f1a06 	br	2000a7c <_malloc_r+0x23c>
 2000e14:	80800204 	addi	r2,r16,8
 2000e18:	84000517 	ldw	r16,20(r16)
 2000e1c:	143ea81e 	bne	r2,r16,20008c0 <_malloc_r+0x80>
 2000e20:	21000084 	addi	r4,r4,2
 2000e24:	003ee306 	br	20009b4 <_malloc_r+0x174>
 2000e28:	210016c4 	addi	r4,r4,91
 2000e2c:	210b883a 	add	r5,r4,r4
 2000e30:	003eca06 	br	200095c <_malloc_r+0x11c>
 2000e34:	100ad1ba 	srli	r5,r2,6
 2000e38:	29400e04 	addi	r5,r5,56
 2000e3c:	294d883a 	add	r6,r5,r5
 2000e40:	003fbd06 	br	2000d38 <_malloc_r+0x4f8>
 2000e44:	84ff6026 	beq	r16,r19,2000bc8 <_malloc_r+0x388>
 2000e48:	00808034 	movhi	r2,512
 2000e4c:	10983904 	addi	r2,r2,24804
 2000e50:	14000217 	ldw	r16,8(r2)
 2000e54:	00bfff04 	movi	r2,-4
 2000e58:	80c00117 	ldw	r3,4(r16)
 2000e5c:	1886703a 	and	r3,r3,r2
 2000e60:	003f9406 	br	2000cb4 <_malloc_r+0x474>
 2000e64:	294b883a 	add	r5,r5,r5
 2000e68:	1146703a 	and	r3,r2,r5
 2000e6c:	5ac00104 	addi	r11,r11,4
 2000e70:	183ffc26 	beq	r3,zero,2000e64 <_malloc_r+0x624>
 2000e74:	5809883a 	mov	r4,r11
 2000e78:	003f0006 	br	2000a7c <_malloc_r+0x23c>
 2000e7c:	00805504 	movi	r2,340
 2000e80:	11001336 	bltu	r2,r4,2000ed0 <_malloc_r+0x690>
 2000e84:	8808d3fa 	srli	r4,r17,15
 2000e88:	21001dc4 	addi	r4,r4,119
 2000e8c:	210b883a 	add	r5,r4,r4
 2000e90:	003eb206 	br	200095c <_malloc_r+0x11c>
 2000e94:	00840004 	movi	r2,4096
 2000e98:	003f5d06 	br	2000c10 <_malloc_r+0x3d0>
 2000e9c:	00800044 	movi	r2,1
 2000ea0:	a0800115 	stw	r2,4(r20)
 2000ea4:	a021883a 	mov	r16,r20
 2000ea8:	0007883a 	mov	r3,zero
 2000eac:	003f8106 	br	2000cb4 <_malloc_r+0x474>
 2000eb0:	280bd0ba 	srai	r5,r5,2
 2000eb4:	01800044 	movi	r6,1
 2000eb8:	38800117 	ldw	r2,4(r7)
 2000ebc:	314c983a 	sll	r6,r6,r5
 2000ec0:	180b883a 	mov	r5,r3
 2000ec4:	3084b03a 	or	r2,r6,r2
 2000ec8:	38800115 	stw	r2,4(r7)
 2000ecc:	003fa906 	br	2000d74 <_malloc_r+0x534>
 2000ed0:	00815504 	movi	r2,1364
 2000ed4:	11001836 	bltu	r2,r4,2000f38 <_malloc_r+0x6f8>
 2000ed8:	8808d4ba 	srli	r4,r17,18
 2000edc:	21001f04 	addi	r4,r4,124
 2000ee0:	210b883a 	add	r5,r4,r4
 2000ee4:	003e9d06 	br	200095c <_malloc_r+0x11c>
 2000ee8:	bdc00404 	addi	r23,r23,16
 2000eec:	003f2f06 	br	2000bac <_malloc_r+0x36c>
 2000ef0:	01401504 	movi	r5,84
 2000ef4:	28c01f36 	bltu	r5,r3,2000f74 <_malloc_r+0x734>
 2000ef8:	100ad33a 	srli	r5,r2,12
 2000efc:	29401b84 	addi	r5,r5,110
 2000f00:	294d883a 	add	r6,r5,r5
 2000f04:	003f8c06 	br	2000d38 <_malloc_r+0x4f8>
 2000f08:	9c000217 	ldw	r16,8(r19)
 2000f0c:	00bfff04 	movi	r2,-4
 2000f10:	80c00117 	ldw	r3,4(r16)
 2000f14:	1886703a 	and	r3,r3,r2
 2000f18:	003f6606 	br	2000cb4 <_malloc_r+0x474>
 2000f1c:	e0c3ffcc 	andi	r3,fp,4095
 2000f20:	183f2f1e 	bne	r3,zero,2000be0 <_malloc_r+0x3a0>
 2000f24:	98c00217 	ldw	r3,8(r19)
 2000f28:	bd49883a 	add	r4,r23,r21
 2000f2c:	21000054 	ori	r4,r4,1
 2000f30:	19000115 	stw	r4,4(r3)
 2000f34:	003f5506 	br	2000c8c <_malloc_r+0x44c>
 2000f38:	01403f04 	movi	r5,252
 2000f3c:	01001f84 	movi	r4,126
 2000f40:	003e8606 	br	200095c <_malloc_r+0x11c>
 2000f44:	9009883a 	mov	r4,r18
 2000f48:	81400204 	addi	r5,r16,8
 2000f4c:	20020dc0 	call	20020dc <_free_r>
 2000f50:	00808074 	movhi	r2,513
 2000f54:	10a4c904 	addi	r2,r2,-27868
 2000f58:	10800017 	ldw	r2,0(r2)
 2000f5c:	003f4b06 	br	2000c8c <_malloc_r+0x44c>
 2000f60:	00c00044 	movi	r3,1
 2000f64:	002f883a 	mov	r23,zero
 2000f68:	003f3406 	br	2000c3c <_malloc_r+0x3fc>
 2000f6c:	d5200215 	stw	r20,-32760(gp)
 2000f70:	003f2106 	br	2000bf8 <_malloc_r+0x3b8>
 2000f74:	01405504 	movi	r5,340
 2000f78:	28c00436 	bltu	r5,r3,2000f8c <_malloc_r+0x74c>
 2000f7c:	100ad3fa 	srli	r5,r2,15
 2000f80:	29401dc4 	addi	r5,r5,119
 2000f84:	294d883a 	add	r6,r5,r5
 2000f88:	003f6b06 	br	2000d38 <_malloc_r+0x4f8>
 2000f8c:	01415504 	movi	r5,1364
 2000f90:	28c00936 	bltu	r5,r3,2000fb8 <_malloc_r+0x778>
 2000f94:	100ad4ba 	srli	r5,r2,18
 2000f98:	29401f04 	addi	r5,r5,124
 2000f9c:	294d883a 	add	r6,r5,r5
 2000fa0:	003f6506 	br	2000d38 <_malloc_r+0x4f8>
 2000fa4:	98800117 	ldw	r2,4(r19)
 2000fa8:	0146303a 	nor	r3,zero,r5
 2000fac:	1884703a 	and	r2,r3,r2
 2000fb0:	98800115 	stw	r2,4(r19)
 2000fb4:	003f9006 	br	2000df8 <_malloc_r+0x5b8>
 2000fb8:	01803f04 	movi	r6,252
 2000fbc:	01401f84 	movi	r5,126
 2000fc0:	003f5d06 	br	2000d38 <_malloc_r+0x4f8>

02000fc4 <memchr>:
 2000fc4:	008000c4 	movi	r2,3
 2000fc8:	29403fcc 	andi	r5,r5,255
 2000fcc:	1180282e 	bgeu	r2,r6,2001070 <memchr+0xac>
 2000fd0:	2086703a 	and	r3,r4,r2
 2000fd4:	1800351e 	bne	r3,zero,20010ac <memchr+0xe8>
 2000fd8:	2816923a 	slli	r11,r5,8
 2000fdc:	2093883a 	add	r9,r4,r2
 2000fe0:	22000084 	addi	r8,r4,2
 2000fe4:	5957883a 	add	r11,r11,r5
 2000fe8:	5816923a 	slli	r11,r11,8
 2000fec:	20c00044 	addi	r3,r4,1
 2000ff0:	037fbff4 	movhi	r13,65279
 2000ff4:	6b7fbfc4 	addi	r13,r13,-257
 2000ff8:	5957883a 	add	r11,r11,r5
 2000ffc:	5816923a 	slli	r11,r11,8
 2001000:	03202074 	movhi	r12,32897
 2001004:	63202004 	addi	r12,r12,-32640
 2001008:	101d883a 	mov	r14,r2
 200100c:	5957883a 	add	r11,r11,r5
 2001010:	21c00017 	ldw	r7,0(r4)
 2001014:	31bfff04 	addi	r6,r6,-4
 2001018:	1805883a 	mov	r2,r3
 200101c:	3acef03a 	xor	r7,r7,r11
 2001020:	3b55883a 	add	r10,r7,r13
 2001024:	01ce303a 	nor	r7,zero,r7
 2001028:	51ce703a 	and	r7,r10,r7
 200102c:	3b0e703a 	and	r7,r7,r12
 2001030:	38000a26 	beq	r7,zero,200105c <memchr+0x98>
 2001034:	21c00003 	ldbu	r7,0(r4)
 2001038:	39401e26 	beq	r7,r5,20010b4 <memchr+0xf0>
 200103c:	19c00003 	ldbu	r7,0(r3)
 2001040:	39401926 	beq	r7,r5,20010a8 <memchr+0xe4>
 2001044:	41c00003 	ldbu	r7,0(r8)
 2001048:	4005883a 	mov	r2,r8
 200104c:	39401626 	beq	r7,r5,20010a8 <memchr+0xe4>
 2001050:	49c00003 	ldbu	r7,0(r9)
 2001054:	4805883a 	mov	r2,r9
 2001058:	39401326 	beq	r7,r5,20010a8 <memchr+0xe4>
 200105c:	21000104 	addi	r4,r4,4
 2001060:	4a400104 	addi	r9,r9,4
 2001064:	42000104 	addi	r8,r8,4
 2001068:	18c00104 	addi	r3,r3,4
 200106c:	71bfe836 	bltu	r14,r6,2001010 <memchr+0x4c>
 2001070:	2005883a 	mov	r2,r4
 2001074:	30000a26 	beq	r6,zero,20010a0 <memchr+0xdc>
 2001078:	10c00003 	ldbu	r3,0(r2)
 200107c:	19400a26 	beq	r3,r5,20010a8 <memchr+0xe4>
 2001080:	10c00044 	addi	r3,r2,1
 2001084:	118d883a 	add	r6,r2,r6
 2001088:	00000306 	br	2001098 <memchr+0xd4>
 200108c:	11000003 	ldbu	r4,0(r2)
 2001090:	18c00044 	addi	r3,r3,1
 2001094:	21400426 	beq	r4,r5,20010a8 <memchr+0xe4>
 2001098:	1805883a 	mov	r2,r3
 200109c:	19bffb1e 	bne	r3,r6,200108c <memchr+0xc8>
 20010a0:	0005883a 	mov	r2,zero
 20010a4:	f800283a 	ret
 20010a8:	f800283a 	ret
 20010ac:	2005883a 	mov	r2,r4
 20010b0:	003ff106 	br	2001078 <memchr+0xb4>
 20010b4:	2005883a 	mov	r2,r4
 20010b8:	f800283a 	ret

020010bc <memcpy>:
 20010bc:	00c003c4 	movi	r3,15
 20010c0:	2005883a 	mov	r2,r4
 20010c4:	3009883a 	mov	r4,r6
 20010c8:	1980032e 	bgeu	r3,r6,20010d8 <memcpy+0x1c>
 20010cc:	2886b03a 	or	r3,r5,r2
 20010d0:	18c000cc 	andi	r3,r3,3
 20010d4:	18000926 	beq	r3,zero,20010fc <memcpy+0x40>
 20010d8:	1007883a 	mov	r3,r2
 20010dc:	290f883a 	add	r7,r5,r4
 20010e0:	20000526 	beq	r4,zero,20010f8 <memcpy+0x3c>
 20010e4:	29800003 	ldbu	r6,0(r5)
 20010e8:	18c00044 	addi	r3,r3,1
 20010ec:	29400044 	addi	r5,r5,1
 20010f0:	19bfffc5 	stb	r6,-1(r3)
 20010f4:	29fffb1e 	bne	r5,r7,20010e4 <memcpy+0x28>
 20010f8:	f800283a 	ret
 20010fc:	327ffc04 	addi	r9,r6,-16
 2001100:	4812d13a 	srli	r9,r9,4
 2001104:	11000404 	addi	r4,r2,16
 2001108:	1007883a 	mov	r3,r2
 200110c:	4810913a 	slli	r8,r9,4
 2001110:	280f883a 	mov	r7,r5
 2001114:	2209883a 	add	r4,r4,r8
 2001118:	3a000017 	ldw	r8,0(r7)
 200111c:	18c00404 	addi	r3,r3,16
 2001120:	39c00404 	addi	r7,r7,16
 2001124:	1a3ffc15 	stw	r8,-16(r3)
 2001128:	3a3ffd17 	ldw	r8,-12(r7)
 200112c:	1a3ffd15 	stw	r8,-12(r3)
 2001130:	3a3ffe17 	ldw	r8,-8(r7)
 2001134:	1a3ffe15 	stw	r8,-8(r3)
 2001138:	3a3fff17 	ldw	r8,-4(r7)
 200113c:	1a3fff15 	stw	r8,-4(r3)
 2001140:	193ff51e 	bne	r3,r4,2001118 <memcpy+0x5c>
 2001144:	49c00044 	addi	r7,r9,1
 2001148:	380e913a 	slli	r7,r7,4
 200114c:	310003cc 	andi	r4,r6,15
 2001150:	018000c4 	movi	r6,3
 2001154:	11c7883a 	add	r3,r2,r7
 2001158:	29cb883a 	add	r5,r5,r7
 200115c:	313fdf2e 	bgeu	r6,r4,20010dc <memcpy+0x20>
 2001160:	213fff04 	addi	r4,r4,-4
 2001164:	2014d0ba 	srli	r10,r4,2
 2001168:	1a400104 	addi	r9,r3,4
 200116c:	180d883a 	mov	r6,r3
 2001170:	528f883a 	add	r7,r10,r10
 2001174:	39cf883a 	add	r7,r7,r7
 2001178:	49d3883a 	add	r9,r9,r7
 200117c:	280f883a 	mov	r7,r5
 2001180:	3a000017 	ldw	r8,0(r7)
 2001184:	31800104 	addi	r6,r6,4
 2001188:	39c00104 	addi	r7,r7,4
 200118c:	323fff15 	stw	r8,-4(r6)
 2001190:	327ffb1e 	bne	r6,r9,2001180 <memcpy+0xc4>
 2001194:	51800044 	addi	r6,r10,1
 2001198:	52bfff24 	muli	r10,r10,-4
 200119c:	318d883a 	add	r6,r6,r6
 20011a0:	318d883a 	add	r6,r6,r6
 20011a4:	5109883a 	add	r4,r10,r4
 20011a8:	298b883a 	add	r5,r5,r6
 20011ac:	1987883a 	add	r3,r3,r6
 20011b0:	003fca06 	br	20010dc <memcpy+0x20>

020011b4 <memmove>:
 20011b4:	2005883a 	mov	r2,r4
 20011b8:	300f883a 	mov	r7,r6
 20011bc:	29000b2e 	bgeu	r5,r4,20011ec <memmove+0x38>
 20011c0:	2987883a 	add	r3,r5,r6
 20011c4:	20c0092e 	bgeu	r4,r3,20011ec <memmove+0x38>
 20011c8:	218b883a 	add	r5,r4,r6
 20011cc:	198fc83a 	sub	r7,r3,r6
 20011d0:	30003f26 	beq	r6,zero,20012d0 <memmove+0x11c>
 20011d4:	18ffffc4 	addi	r3,r3,-1
 20011d8:	19000003 	ldbu	r4,0(r3)
 20011dc:	297fffc4 	addi	r5,r5,-1
 20011e0:	29000005 	stb	r4,0(r5)
 20011e4:	19fffb1e 	bne	r3,r7,20011d4 <memmove+0x20>
 20011e8:	f800283a 	ret
 20011ec:	00c003c4 	movi	r3,15
 20011f0:	1980382e 	bgeu	r3,r6,20012d4 <memmove+0x120>
 20011f4:	2886b03a 	or	r3,r5,r2
 20011f8:	18c000cc 	andi	r3,r3,3
 20011fc:	1800351e 	bne	r3,zero,20012d4 <memmove+0x120>
 2001200:	327ffc04 	addi	r9,r6,-16
 2001204:	4812d13a 	srli	r9,r9,4
 2001208:	12000404 	addi	r8,r2,16
 200120c:	1007883a 	mov	r3,r2
 2001210:	4808913a 	slli	r4,r9,4
 2001214:	280f883a 	mov	r7,r5
 2001218:	4111883a 	add	r8,r8,r4
 200121c:	39000017 	ldw	r4,0(r7)
 2001220:	18c00404 	addi	r3,r3,16
 2001224:	39c00404 	addi	r7,r7,16
 2001228:	193ffc15 	stw	r4,-16(r3)
 200122c:	393ffd17 	ldw	r4,-12(r7)
 2001230:	193ffd15 	stw	r4,-12(r3)
 2001234:	393ffe17 	ldw	r4,-8(r7)
 2001238:	193ffe15 	stw	r4,-8(r3)
 200123c:	393fff17 	ldw	r4,-4(r7)
 2001240:	193fff15 	stw	r4,-4(r3)
 2001244:	1a3ff51e 	bne	r3,r8,200121c <memmove+0x68>
 2001248:	49000044 	addi	r4,r9,1
 200124c:	2008913a 	slli	r4,r4,4
 2001250:	31c003cc 	andi	r7,r6,15
 2001254:	1107883a 	add	r3,r2,r4
 2001258:	290b883a 	add	r5,r5,r4
 200125c:	010000c4 	movi	r4,3
 2001260:	21c0142e 	bgeu	r4,r7,20012b4 <memmove+0x100>
 2001264:	39ffff04 	addi	r7,r7,-4
 2001268:	3814d0ba 	srli	r10,r7,2
 200126c:	1a400104 	addi	r9,r3,4
 2001270:	180d883a 	mov	r6,r3
 2001274:	5289883a 	add	r4,r10,r10
 2001278:	2109883a 	add	r4,r4,r4
 200127c:	4913883a 	add	r9,r9,r4
 2001280:	2809883a 	mov	r4,r5
 2001284:	22000017 	ldw	r8,0(r4)
 2001288:	31800104 	addi	r6,r6,4
 200128c:	21000104 	addi	r4,r4,4
 2001290:	323fff15 	stw	r8,-4(r6)
 2001294:	327ffb1e 	bne	r6,r9,2001284 <memmove+0xd0>
 2001298:	51000044 	addi	r4,r10,1
 200129c:	52bfff24 	muli	r10,r10,-4
 20012a0:	2109883a 	add	r4,r4,r4
 20012a4:	2109883a 	add	r4,r4,r4
 20012a8:	51cf883a 	add	r7,r10,r7
 20012ac:	290b883a 	add	r5,r5,r4
 20012b0:	1907883a 	add	r3,r3,r4
 20012b4:	38000626 	beq	r7,zero,20012d0 <memmove+0x11c>
 20012b8:	19cf883a 	add	r7,r3,r7
 20012bc:	29800003 	ldbu	r6,0(r5)
 20012c0:	18c00044 	addi	r3,r3,1
 20012c4:	29400044 	addi	r5,r5,1
 20012c8:	19bfffc5 	stb	r6,-1(r3)
 20012cc:	19fffb1e 	bne	r3,r7,20012bc <memmove+0x108>
 20012d0:	f800283a 	ret
 20012d4:	1007883a 	mov	r3,r2
 20012d8:	003ff606 	br	20012b4 <memmove+0x100>

020012dc <_realloc_r>:
 20012dc:	defff504 	addi	sp,sp,-44
 20012e0:	dd400615 	stw	r21,24(sp)
 20012e4:	dc800315 	stw	r18,12(sp)
 20012e8:	dc000115 	stw	r16,4(sp)
 20012ec:	dfc00a15 	stw	ra,40(sp)
 20012f0:	df000915 	stw	fp,36(sp)
 20012f4:	ddc00815 	stw	r23,32(sp)
 20012f8:	dd800715 	stw	r22,28(sp)
 20012fc:	dd000515 	stw	r20,20(sp)
 2001300:	dcc00415 	stw	r19,16(sp)
 2001304:	dc400215 	stw	r17,8(sp)
 2001308:	2821883a 	mov	r16,r5
 200130c:	202b883a 	mov	r21,r4
 2001310:	3025883a 	mov	r18,r6
 2001314:	28009626 	beq	r5,zero,2001570 <_realloc_r+0x294>
 2001318:	20032480 	call	2003248 <__malloc_lock>
 200131c:	80bfff17 	ldw	r2,-4(r16)
 2001320:	04ffff04 	movi	r19,-4
 2001324:	90c002c4 	addi	r3,r18,11
 2001328:	01000584 	movi	r4,22
 200132c:	85bffe04 	addi	r22,r16,-8
 2001330:	14e6703a 	and	r19,r2,r19
 2001334:	20c0372e 	bgeu	r4,r3,2001414 <_realloc_r+0x138>
 2001338:	047ffe04 	movi	r17,-8
 200133c:	1c62703a 	and	r17,r3,r17
 2001340:	8807883a 	mov	r3,r17
 2001344:	88005a16 	blt	r17,zero,20014b0 <_realloc_r+0x1d4>
 2001348:	8c805936 	bltu	r17,r18,20014b0 <_realloc_r+0x1d4>
 200134c:	98c0340e 	bge	r19,r3,2001420 <_realloc_r+0x144>
 2001350:	07008034 	movhi	fp,512
 2001354:	e7183904 	addi	fp,fp,24804
 2001358:	e1400217 	ldw	r5,8(fp)
 200135c:	b4c9883a 	add	r4,r22,r19
 2001360:	29009026 	beq	r5,r4,20015a4 <_realloc_r+0x2c8>
 2001364:	21800117 	ldw	r6,4(r4)
 2001368:	01ffff84 	movi	r7,-2
 200136c:	31ce703a 	and	r7,r6,r7
 2001370:	21cf883a 	add	r7,r4,r7
 2001374:	39c00117 	ldw	r7,4(r7)
 2001378:	39c0004c 	andi	r7,r7,1
 200137c:	38004326 	beq	r7,zero,200148c <_realloc_r+0x1b0>
 2001380:	000d883a 	mov	r6,zero
 2001384:	0009883a 	mov	r4,zero
 2001388:	1080004c 	andi	r2,r2,1
 200138c:	10005a1e 	bne	r2,zero,20014f8 <_realloc_r+0x21c>
 2001390:	85fffe17 	ldw	r23,-8(r16)
 2001394:	00bfff04 	movi	r2,-4
 2001398:	b5efc83a 	sub	r23,r22,r23
 200139c:	b9c00117 	ldw	r7,4(r23)
 20013a0:	388e703a 	and	r7,r7,r2
 20013a4:	3ccf883a 	add	r7,r7,r19
 20013a8:	20005226 	beq	r4,zero,20014f4 <_realloc_r+0x218>
 20013ac:	31e9883a 	add	r20,r6,r7
 20013b0:	2140c726 	beq	r4,r5,20016d0 <_realloc_r+0x3f4>
 20013b4:	a0c04f16 	blt	r20,r3,20014f4 <_realloc_r+0x218>
 20013b8:	20800317 	ldw	r2,12(r4)
 20013bc:	20c00217 	ldw	r3,8(r4)
 20013c0:	99bfff04 	addi	r6,r19,-4
 20013c4:	01000904 	movi	r4,36
 20013c8:	18800315 	stw	r2,12(r3)
 20013cc:	10c00215 	stw	r3,8(r2)
 20013d0:	b8c00217 	ldw	r3,8(r23)
 20013d4:	b8800317 	ldw	r2,12(r23)
 20013d8:	bc800204 	addi	r18,r23,8
 20013dc:	18800315 	stw	r2,12(r3)
 20013e0:	10c00215 	stw	r3,8(r2)
 20013e4:	2180ed36 	bltu	r4,r6,200179c <_realloc_r+0x4c0>
 20013e8:	008004c4 	movi	r2,19
 20013ec:	11809b2e 	bgeu	r2,r6,200165c <_realloc_r+0x380>
 20013f0:	80800017 	ldw	r2,0(r16)
 20013f4:	b8800215 	stw	r2,8(r23)
 20013f8:	80800117 	ldw	r2,4(r16)
 20013fc:	b8800315 	stw	r2,12(r23)
 2001400:	008006c4 	movi	r2,27
 2001404:	1180f936 	bltu	r2,r6,20017ec <_realloc_r+0x510>
 2001408:	b8800404 	addi	r2,r23,16
 200140c:	80c00204 	addi	r3,r16,8
 2001410:	00009406 	br	2001664 <_realloc_r+0x388>
 2001414:	00c00404 	movi	r3,16
 2001418:	1823883a 	mov	r17,r3
 200141c:	003fca06 	br	2001348 <_realloc_r+0x6c>
 2001420:	9829883a 	mov	r20,r19
 2001424:	a447c83a 	sub	r3,r20,r17
 2001428:	010003c4 	movi	r4,15
 200142c:	1080004c 	andi	r2,r2,1
 2001430:	20c02336 	bltu	r4,r3,20014c0 <_realloc_r+0x1e4>
 2001434:	1504b03a 	or	r2,r2,r20
 2001438:	b0800115 	stw	r2,4(r22)
 200143c:	b52d883a 	add	r22,r22,r20
 2001440:	b0800117 	ldw	r2,4(r22)
 2001444:	10800054 	ori	r2,r2,1
 2001448:	b0800115 	stw	r2,4(r22)
 200144c:	a809883a 	mov	r4,r21
 2001450:	20032680 	call	2003268 <__malloc_unlock>
 2001454:	8025883a 	mov	r18,r16
 2001458:	9005883a 	mov	r2,r18
 200145c:	dfc00a17 	ldw	ra,40(sp)
 2001460:	df000917 	ldw	fp,36(sp)
 2001464:	ddc00817 	ldw	r23,32(sp)
 2001468:	dd800717 	ldw	r22,28(sp)
 200146c:	dd400617 	ldw	r21,24(sp)
 2001470:	dd000517 	ldw	r20,20(sp)
 2001474:	dcc00417 	ldw	r19,16(sp)
 2001478:	dc800317 	ldw	r18,12(sp)
 200147c:	dc400217 	ldw	r17,8(sp)
 2001480:	dc000117 	ldw	r16,4(sp)
 2001484:	dec00b04 	addi	sp,sp,44
 2001488:	f800283a 	ret
 200148c:	01ffff04 	movi	r7,-4
 2001490:	31cc703a 	and	r6,r6,r7
 2001494:	34e9883a 	add	r20,r6,r19
 2001498:	a0ffbb16 	blt	r20,r3,2001388 <_realloc_r+0xac>
 200149c:	20c00317 	ldw	r3,12(r4)
 20014a0:	21000217 	ldw	r4,8(r4)
 20014a4:	20c00315 	stw	r3,12(r4)
 20014a8:	19000215 	stw	r4,8(r3)
 20014ac:	003fdd06 	br	2001424 <_realloc_r+0x148>
 20014b0:	00800304 	movi	r2,12
 20014b4:	a8800015 	stw	r2,0(r21)
 20014b8:	0025883a 	mov	r18,zero
 20014bc:	003fe606 	br	2001458 <_realloc_r+0x17c>
 20014c0:	1444b03a 	or	r2,r2,r17
 20014c4:	b0800115 	stw	r2,4(r22)
 20014c8:	b44b883a 	add	r5,r22,r17
 20014cc:	18800054 	ori	r2,r3,1
 20014d0:	28800115 	stw	r2,4(r5)
 20014d4:	28c7883a 	add	r3,r5,r3
 20014d8:	18800117 	ldw	r2,4(r3)
 20014dc:	a809883a 	mov	r4,r21
 20014e0:	29400204 	addi	r5,r5,8
 20014e4:	10800054 	ori	r2,r2,1
 20014e8:	18800115 	stw	r2,4(r3)
 20014ec:	20020dc0 	call	20020dc <_free_r>
 20014f0:	003fd606 	br	200144c <_realloc_r+0x170>
 20014f4:	38c0330e 	bge	r7,r3,20015c4 <_realloc_r+0x2e8>
 20014f8:	900b883a 	mov	r5,r18
 20014fc:	a809883a 	mov	r4,r21
 2001500:	20008400 	call	2000840 <_malloc_r>
 2001504:	1025883a 	mov	r18,r2
 2001508:	10001626 	beq	r2,zero,2001564 <_realloc_r+0x288>
 200150c:	80bfff17 	ldw	r2,-4(r16)
 2001510:	00ffff84 	movi	r3,-2
 2001514:	913ffe04 	addi	r4,r18,-8
 2001518:	10c6703a 	and	r3,r2,r3
 200151c:	b0c7883a 	add	r3,r22,r3
 2001520:	20c09926 	beq	r4,r3,2001788 <_realloc_r+0x4ac>
 2001524:	99bfff04 	addi	r6,r19,-4
 2001528:	00800904 	movi	r2,36
 200152c:	11806436 	bltu	r2,r6,20016c0 <_realloc_r+0x3e4>
 2001530:	00c004c4 	movi	r3,19
 2001534:	19804036 	bltu	r3,r6,2001638 <_realloc_r+0x35c>
 2001538:	9005883a 	mov	r2,r18
 200153c:	8007883a 	mov	r3,r16
 2001540:	19000017 	ldw	r4,0(r3)
 2001544:	11000015 	stw	r4,0(r2)
 2001548:	19000117 	ldw	r4,4(r3)
 200154c:	11000115 	stw	r4,4(r2)
 2001550:	18c00217 	ldw	r3,8(r3)
 2001554:	10c00215 	stw	r3,8(r2)
 2001558:	a809883a 	mov	r4,r21
 200155c:	800b883a 	mov	r5,r16
 2001560:	20020dc0 	call	20020dc <_free_r>
 2001564:	a809883a 	mov	r4,r21
 2001568:	20032680 	call	2003268 <__malloc_unlock>
 200156c:	003fba06 	br	2001458 <_realloc_r+0x17c>
 2001570:	300b883a 	mov	r5,r6
 2001574:	dfc00a17 	ldw	ra,40(sp)
 2001578:	df000917 	ldw	fp,36(sp)
 200157c:	ddc00817 	ldw	r23,32(sp)
 2001580:	dd800717 	ldw	r22,28(sp)
 2001584:	dd400617 	ldw	r21,24(sp)
 2001588:	dd000517 	ldw	r20,20(sp)
 200158c:	dcc00417 	ldw	r19,16(sp)
 2001590:	dc800317 	ldw	r18,12(sp)
 2001594:	dc400217 	ldw	r17,8(sp)
 2001598:	dc000117 	ldw	r16,4(sp)
 200159c:	dec00b04 	addi	sp,sp,44
 20015a0:	20008401 	jmpi	2000840 <_malloc_r>
 20015a4:	29800117 	ldw	r6,4(r5)
 20015a8:	013fff04 	movi	r4,-4
 20015ac:	89c00404 	addi	r7,r17,16
 20015b0:	310c703a 	and	r6,r6,r4
 20015b4:	34c9883a 	add	r4,r6,r19
 20015b8:	21c0340e 	bge	r4,r7,200168c <_realloc_r+0x3b0>
 20015bc:	2809883a 	mov	r4,r5
 20015c0:	003f7106 	br	2001388 <_realloc_r+0xac>
 20015c4:	b8800317 	ldw	r2,12(r23)
 20015c8:	b8c00217 	ldw	r3,8(r23)
 20015cc:	99bfff04 	addi	r6,r19,-4
 20015d0:	01000904 	movi	r4,36
 20015d4:	18800315 	stw	r2,12(r3)
 20015d8:	10c00215 	stw	r3,8(r2)
 20015dc:	bc800204 	addi	r18,r23,8
 20015e0:	21807836 	bltu	r4,r6,20017c4 <_realloc_r+0x4e8>
 20015e4:	008004c4 	movi	r2,19
 20015e8:	1180732e 	bgeu	r2,r6,20017b8 <_realloc_r+0x4dc>
 20015ec:	80800017 	ldw	r2,0(r16)
 20015f0:	b8800215 	stw	r2,8(r23)
 20015f4:	80800117 	ldw	r2,4(r16)
 20015f8:	b8800315 	stw	r2,12(r23)
 20015fc:	008006c4 	movi	r2,27
 2001600:	11808936 	bltu	r2,r6,2001828 <_realloc_r+0x54c>
 2001604:	b8800404 	addi	r2,r23,16
 2001608:	80c00204 	addi	r3,r16,8
 200160c:	19000017 	ldw	r4,0(r3)
 2001610:	9021883a 	mov	r16,r18
 2001614:	3829883a 	mov	r20,r7
 2001618:	11000015 	stw	r4,0(r2)
 200161c:	19000117 	ldw	r4,4(r3)
 2001620:	b82d883a 	mov	r22,r23
 2001624:	11000115 	stw	r4,4(r2)
 2001628:	18c00217 	ldw	r3,8(r3)
 200162c:	10c00215 	stw	r3,8(r2)
 2001630:	b8800117 	ldw	r2,4(r23)
 2001634:	003f7b06 	br	2001424 <_realloc_r+0x148>
 2001638:	80c00017 	ldw	r3,0(r16)
 200163c:	90c00015 	stw	r3,0(r18)
 2001640:	80c00117 	ldw	r3,4(r16)
 2001644:	90c00115 	stw	r3,4(r18)
 2001648:	00c006c4 	movi	r3,27
 200164c:	19804636 	bltu	r3,r6,2001768 <_realloc_r+0x48c>
 2001650:	90800204 	addi	r2,r18,8
 2001654:	80c00204 	addi	r3,r16,8
 2001658:	003fb906 	br	2001540 <_realloc_r+0x264>
 200165c:	9005883a 	mov	r2,r18
 2001660:	8007883a 	mov	r3,r16
 2001664:	19000017 	ldw	r4,0(r3)
 2001668:	9021883a 	mov	r16,r18
 200166c:	b82d883a 	mov	r22,r23
 2001670:	11000015 	stw	r4,0(r2)
 2001674:	19000117 	ldw	r4,4(r3)
 2001678:	11000115 	stw	r4,4(r2)
 200167c:	18c00217 	ldw	r3,8(r3)
 2001680:	10c00215 	stw	r3,8(r2)
 2001684:	b8800117 	ldw	r2,4(r23)
 2001688:	003f6606 	br	2001424 <_realloc_r+0x148>
 200168c:	2445c83a 	sub	r2,r4,r17
 2001690:	b46d883a 	add	r22,r22,r17
 2001694:	10800054 	ori	r2,r2,1
 2001698:	b0800115 	stw	r2,4(r22)
 200169c:	80bfff17 	ldw	r2,-4(r16)
 20016a0:	a809883a 	mov	r4,r21
 20016a4:	e5800215 	stw	r22,8(fp)
 20016a8:	1080004c 	andi	r2,r2,1
 20016ac:	88a2b03a 	or	r17,r17,r2
 20016b0:	847fff15 	stw	r17,-4(r16)
 20016b4:	20032680 	call	2003268 <__malloc_unlock>
 20016b8:	8025883a 	mov	r18,r16
 20016bc:	003f6606 	br	2001458 <_realloc_r+0x17c>
 20016c0:	9009883a 	mov	r4,r18
 20016c4:	800b883a 	mov	r5,r16
 20016c8:	20011b40 	call	20011b4 <memmove>
 20016cc:	003fa206 	br	2001558 <_realloc_r+0x27c>
 20016d0:	88800404 	addi	r2,r17,16
 20016d4:	a0bf8716 	blt	r20,r2,20014f4 <_realloc_r+0x218>
 20016d8:	b8800317 	ldw	r2,12(r23)
 20016dc:	b8c00217 	ldw	r3,8(r23)
 20016e0:	99bfff04 	addi	r6,r19,-4
 20016e4:	01000904 	movi	r4,36
 20016e8:	18800315 	stw	r2,12(r3)
 20016ec:	10c00215 	stw	r3,8(r2)
 20016f0:	bc800204 	addi	r18,r23,8
 20016f4:	21806536 	bltu	r4,r6,200188c <_realloc_r+0x5b0>
 20016f8:	008004c4 	movi	r2,19
 20016fc:	1180592e 	bgeu	r2,r6,2001864 <_realloc_r+0x588>
 2001700:	80800017 	ldw	r2,0(r16)
 2001704:	b8800215 	stw	r2,8(r23)
 2001708:	80800117 	ldw	r2,4(r16)
 200170c:	b8800315 	stw	r2,12(r23)
 2001710:	008006c4 	movi	r2,27
 2001714:	11806136 	bltu	r2,r6,200189c <_realloc_r+0x5c0>
 2001718:	b8800404 	addi	r2,r23,16
 200171c:	80c00204 	addi	r3,r16,8
 2001720:	19000017 	ldw	r4,0(r3)
 2001724:	11000015 	stw	r4,0(r2)
 2001728:	19000117 	ldw	r4,4(r3)
 200172c:	11000115 	stw	r4,4(r2)
 2001730:	18c00217 	ldw	r3,8(r3)
 2001734:	10c00215 	stw	r3,8(r2)
 2001738:	a447c83a 	sub	r3,r20,r17
 200173c:	bc45883a 	add	r2,r23,r17
 2001740:	18c00054 	ori	r3,r3,1
 2001744:	10c00115 	stw	r3,4(r2)
 2001748:	b8c00117 	ldw	r3,4(r23)
 200174c:	e0800215 	stw	r2,8(fp)
 2001750:	a809883a 	mov	r4,r21
 2001754:	1880004c 	andi	r2,r3,1
 2001758:	88a2b03a 	or	r17,r17,r2
 200175c:	bc400115 	stw	r17,4(r23)
 2001760:	20032680 	call	2003268 <__malloc_unlock>
 2001764:	003f3c06 	br	2001458 <_realloc_r+0x17c>
 2001768:	80c00217 	ldw	r3,8(r16)
 200176c:	90c00215 	stw	r3,8(r18)
 2001770:	80c00317 	ldw	r3,12(r16)
 2001774:	90c00315 	stw	r3,12(r18)
 2001778:	30802426 	beq	r6,r2,200180c <_realloc_r+0x530>
 200177c:	90800404 	addi	r2,r18,16
 2001780:	80c00404 	addi	r3,r16,16
 2001784:	003f6e06 	br	2001540 <_realloc_r+0x264>
 2001788:	953fff17 	ldw	r20,-4(r18)
 200178c:	00ffff04 	movi	r3,-4
 2001790:	a0e8703a 	and	r20,r20,r3
 2001794:	a4e9883a 	add	r20,r20,r19
 2001798:	003f2206 	br	2001424 <_realloc_r+0x148>
 200179c:	800b883a 	mov	r5,r16
 20017a0:	9009883a 	mov	r4,r18
 20017a4:	20011b40 	call	20011b4 <memmove>
 20017a8:	9021883a 	mov	r16,r18
 20017ac:	b8800117 	ldw	r2,4(r23)
 20017b0:	b82d883a 	mov	r22,r23
 20017b4:	003f1b06 	br	2001424 <_realloc_r+0x148>
 20017b8:	9005883a 	mov	r2,r18
 20017bc:	8007883a 	mov	r3,r16
 20017c0:	003f9206 	br	200160c <_realloc_r+0x330>
 20017c4:	800b883a 	mov	r5,r16
 20017c8:	9009883a 	mov	r4,r18
 20017cc:	d9c00015 	stw	r7,0(sp)
 20017d0:	20011b40 	call	20011b4 <memmove>
 20017d4:	d9c00017 	ldw	r7,0(sp)
 20017d8:	9021883a 	mov	r16,r18
 20017dc:	b8800117 	ldw	r2,4(r23)
 20017e0:	3829883a 	mov	r20,r7
 20017e4:	b82d883a 	mov	r22,r23
 20017e8:	003f0e06 	br	2001424 <_realloc_r+0x148>
 20017ec:	80800217 	ldw	r2,8(r16)
 20017f0:	b8800415 	stw	r2,16(r23)
 20017f4:	80800317 	ldw	r2,12(r16)
 20017f8:	b8800515 	stw	r2,20(r23)
 20017fc:	31001226 	beq	r6,r4,2001848 <_realloc_r+0x56c>
 2001800:	b8800604 	addi	r2,r23,24
 2001804:	80c00404 	addi	r3,r16,16
 2001808:	003f9606 	br	2001664 <_realloc_r+0x388>
 200180c:	81000417 	ldw	r4,16(r16)
 2001810:	90800604 	addi	r2,r18,24
 2001814:	80c00604 	addi	r3,r16,24
 2001818:	91000415 	stw	r4,16(r18)
 200181c:	81000517 	ldw	r4,20(r16)
 2001820:	91000515 	stw	r4,20(r18)
 2001824:	003f4606 	br	2001540 <_realloc_r+0x264>
 2001828:	80800217 	ldw	r2,8(r16)
 200182c:	b8800415 	stw	r2,16(r23)
 2001830:	80800317 	ldw	r2,12(r16)
 2001834:	b8800515 	stw	r2,20(r23)
 2001838:	31000d26 	beq	r6,r4,2001870 <_realloc_r+0x594>
 200183c:	b8800604 	addi	r2,r23,24
 2001840:	80c00404 	addi	r3,r16,16
 2001844:	003f7106 	br	200160c <_realloc_r+0x330>
 2001848:	81000417 	ldw	r4,16(r16)
 200184c:	b8800804 	addi	r2,r23,32
 2001850:	80c00604 	addi	r3,r16,24
 2001854:	b9000615 	stw	r4,24(r23)
 2001858:	81000517 	ldw	r4,20(r16)
 200185c:	b9000715 	stw	r4,28(r23)
 2001860:	003f8006 	br	2001664 <_realloc_r+0x388>
 2001864:	9005883a 	mov	r2,r18
 2001868:	8007883a 	mov	r3,r16
 200186c:	003fac06 	br	2001720 <_realloc_r+0x444>
 2001870:	81000417 	ldw	r4,16(r16)
 2001874:	b8800804 	addi	r2,r23,32
 2001878:	80c00604 	addi	r3,r16,24
 200187c:	b9000615 	stw	r4,24(r23)
 2001880:	81000517 	ldw	r4,20(r16)
 2001884:	b9000715 	stw	r4,28(r23)
 2001888:	003f6006 	br	200160c <_realloc_r+0x330>
 200188c:	9009883a 	mov	r4,r18
 2001890:	800b883a 	mov	r5,r16
 2001894:	20011b40 	call	20011b4 <memmove>
 2001898:	003fa706 	br	2001738 <_realloc_r+0x45c>
 200189c:	80800217 	ldw	r2,8(r16)
 20018a0:	b8800415 	stw	r2,16(r23)
 20018a4:	80800317 	ldw	r2,12(r16)
 20018a8:	b8800515 	stw	r2,20(r23)
 20018ac:	31000326 	beq	r6,r4,20018bc <_realloc_r+0x5e0>
 20018b0:	b8800604 	addi	r2,r23,24
 20018b4:	80c00404 	addi	r3,r16,16
 20018b8:	003f9906 	br	2001720 <_realloc_r+0x444>
 20018bc:	81000417 	ldw	r4,16(r16)
 20018c0:	b8800804 	addi	r2,r23,32
 20018c4:	80c00604 	addi	r3,r16,24
 20018c8:	b9000615 	stw	r4,24(r23)
 20018cc:	81000517 	ldw	r4,20(r16)
 20018d0:	b9000715 	stw	r4,28(r23)
 20018d4:	003f9206 	br	2001720 <_realloc_r+0x444>

020018d8 <_sbrk_r>:
 20018d8:	defffd04 	addi	sp,sp,-12
 20018dc:	dc400115 	stw	r17,4(sp)
 20018e0:	dc000015 	stw	r16,0(sp)
 20018e4:	2023883a 	mov	r17,r4
 20018e8:	04008074 	movhi	r16,513
 20018ec:	8424c204 	addi	r16,r16,-27896
 20018f0:	2809883a 	mov	r4,r5
 20018f4:	dfc00215 	stw	ra,8(sp)
 20018f8:	80000015 	stw	zero,0(r16)
 20018fc:	20034280 	call	2003428 <sbrk>
 2001900:	00ffffc4 	movi	r3,-1
 2001904:	10c00526 	beq	r2,r3,200191c <_sbrk_r+0x44>
 2001908:	dfc00217 	ldw	ra,8(sp)
 200190c:	dc400117 	ldw	r17,4(sp)
 2001910:	dc000017 	ldw	r16,0(sp)
 2001914:	dec00304 	addi	sp,sp,12
 2001918:	f800283a 	ret
 200191c:	80c00017 	ldw	r3,0(r16)
 2001920:	183ff926 	beq	r3,zero,2001908 <_sbrk_r+0x30>
 2001924:	88c00015 	stw	r3,0(r17)
 2001928:	dfc00217 	ldw	ra,8(sp)
 200192c:	dc400117 	ldw	r17,4(sp)
 2001930:	dc000017 	ldw	r16,0(sp)
 2001934:	dec00304 	addi	sp,sp,12
 2001938:	f800283a 	ret

0200193c <__swsetup_r>:
 200193c:	00808034 	movhi	r2,512
 2001940:	109def04 	addi	r2,r2,30652
 2001944:	10800017 	ldw	r2,0(r2)
 2001948:	defffd04 	addi	sp,sp,-12
 200194c:	dc400115 	stw	r17,4(sp)
 2001950:	dc000015 	stw	r16,0(sp)
 2001954:	dfc00215 	stw	ra,8(sp)
 2001958:	2023883a 	mov	r17,r4
 200195c:	2821883a 	mov	r16,r5
 2001960:	10000226 	beq	r2,zero,200196c <__swsetup_r+0x30>
 2001964:	10c00e17 	ldw	r3,56(r2)
 2001968:	18003d26 	beq	r3,zero,2001a60 <__swsetup_r+0x124>
 200196c:	8080030b 	ldhu	r2,12(r16)
 2001970:	10c0020c 	andi	r3,r2,8
 2001974:	18ffffcc 	andi	r3,r3,65535
 2001978:	18e0001c 	xori	r3,r3,32768
 200197c:	18e00004 	addi	r3,r3,-32768
 2001980:	18001226 	beq	r3,zero,20019cc <__swsetup_r+0x90>
 2001984:	80c00417 	ldw	r3,16(r16)
 2001988:	18001f26 	beq	r3,zero,2001a08 <__swsetup_r+0xcc>
 200198c:	1100004c 	andi	r4,r2,1
 2001990:	2000261e 	bne	r4,zero,2001a2c <__swsetup_r+0xf0>
 2001994:	1080008c 	andi	r2,r2,2
 2001998:	10bfffcc 	andi	r2,r2,65535
 200199c:	10a0001c 	xori	r2,r2,32768
 20019a0:	10a00004 	addi	r2,r2,-32768
 20019a4:	1000311e 	bne	r2,zero,2001a6c <__swsetup_r+0x130>
 20019a8:	80800517 	ldw	r2,20(r16)
 20019ac:	80800215 	stw	r2,8(r16)
 20019b0:	18002326 	beq	r3,zero,2001a40 <__swsetup_r+0x104>
 20019b4:	0005883a 	mov	r2,zero
 20019b8:	dfc00217 	ldw	ra,8(sp)
 20019bc:	dc400117 	ldw	r17,4(sp)
 20019c0:	dc000017 	ldw	r16,0(sp)
 20019c4:	dec00304 	addi	sp,sp,12
 20019c8:	f800283a 	ret
 20019cc:	10c0040c 	andi	r3,r2,16
 20019d0:	18ffffcc 	andi	r3,r3,65535
 20019d4:	18e0001c 	xori	r3,r3,32768
 20019d8:	18e00004 	addi	r3,r3,-32768
 20019dc:	18001e26 	beq	r3,zero,2001a58 <__swsetup_r+0x11c>
 20019e0:	10c0010c 	andi	r3,r2,4
 20019e4:	18ffffcc 	andi	r3,r3,65535
 20019e8:	18e0001c 	xori	r3,r3,32768
 20019ec:	18e00004 	addi	r3,r3,-32768
 20019f0:	1800211e 	bne	r3,zero,2001a78 <__swsetup_r+0x13c>
 20019f4:	80c00417 	ldw	r3,16(r16)
 20019f8:	11400214 	ori	r5,r2,8
 20019fc:	8140030d 	sth	r5,12(r16)
 2001a00:	2805883a 	mov	r2,r5
 2001a04:	183fe11e 	bne	r3,zero,200198c <__swsetup_r+0x50>
 2001a08:	1140a00c 	andi	r5,r2,640
 2001a0c:	01008004 	movi	r4,512
 2001a10:	293fde26 	beq	r5,r4,200198c <__swsetup_r+0x50>
 2001a14:	8809883a 	mov	r4,r17
 2001a18:	800b883a 	mov	r5,r16
 2001a1c:	200250c0 	call	200250c <__smakebuf_r>
 2001a20:	8080030b 	ldhu	r2,12(r16)
 2001a24:	80c00417 	ldw	r3,16(r16)
 2001a28:	003fd806 	br	200198c <__swsetup_r+0x50>
 2001a2c:	80800517 	ldw	r2,20(r16)
 2001a30:	80000215 	stw	zero,8(r16)
 2001a34:	0085c83a 	sub	r2,zero,r2
 2001a38:	80800615 	stw	r2,24(r16)
 2001a3c:	183fdd1e 	bne	r3,zero,20019b4 <__swsetup_r+0x78>
 2001a40:	8080030b 	ldhu	r2,12(r16)
 2001a44:	1080200c 	andi	r2,r2,128
 2001a48:	10bfffcc 	andi	r2,r2,65535
 2001a4c:	10a0001c 	xori	r2,r2,32768
 2001a50:	10a00004 	addi	r2,r2,-32768
 2001a54:	103fd826 	beq	r2,zero,20019b8 <__swsetup_r+0x7c>
 2001a58:	00bfffc4 	movi	r2,-1
 2001a5c:	003fd606 	br	20019b8 <__swsetup_r+0x7c>
 2001a60:	1009883a 	mov	r4,r2
 2001a64:	2001d580 	call	2001d58 <__sinit>
 2001a68:	003fc006 	br	200196c <__swsetup_r+0x30>
 2001a6c:	0005883a 	mov	r2,zero
 2001a70:	80800215 	stw	r2,8(r16)
 2001a74:	003fce06 	br	20019b0 <__swsetup_r+0x74>
 2001a78:	81400c17 	ldw	r5,48(r16)
 2001a7c:	28000626 	beq	r5,zero,2001a98 <__swsetup_r+0x15c>
 2001a80:	80c01004 	addi	r3,r16,64
 2001a84:	28c00326 	beq	r5,r3,2001a94 <__swsetup_r+0x158>
 2001a88:	8809883a 	mov	r4,r17
 2001a8c:	20020dc0 	call	20020dc <_free_r>
 2001a90:	8080030b 	ldhu	r2,12(r16)
 2001a94:	80000c15 	stw	zero,48(r16)
 2001a98:	80c00417 	ldw	r3,16(r16)
 2001a9c:	013ff6c4 	movi	r4,-37
 2001aa0:	2084703a 	and	r2,r4,r2
 2001aa4:	80000115 	stw	zero,4(r16)
 2001aa8:	80c00015 	stw	r3,0(r16)
 2001aac:	003fd206 	br	20019f8 <__swsetup_r+0xbc>

02001ab0 <_fflush_r>:
 2001ab0:	defffb04 	addi	sp,sp,-20
 2001ab4:	dcc00315 	stw	r19,12(sp)
 2001ab8:	dc400115 	stw	r17,4(sp)
 2001abc:	dfc00415 	stw	ra,16(sp)
 2001ac0:	dc800215 	stw	r18,8(sp)
 2001ac4:	dc000015 	stw	r16,0(sp)
 2001ac8:	2027883a 	mov	r19,r4
 2001acc:	2823883a 	mov	r17,r5
 2001ad0:	20000226 	beq	r4,zero,2001adc <_fflush_r+0x2c>
 2001ad4:	20800e17 	ldw	r2,56(r4)
 2001ad8:	10005726 	beq	r2,zero,2001c38 <_fflush_r+0x188>
 2001adc:	8880030b 	ldhu	r2,12(r17)
 2001ae0:	10c0020c 	andi	r3,r2,8
 2001ae4:	18ffffcc 	andi	r3,r3,65535
 2001ae8:	18e0001c 	xori	r3,r3,32768
 2001aec:	18e00004 	addi	r3,r3,-32768
 2001af0:	1800311e 	bne	r3,zero,2001bb8 <_fflush_r+0x108>
 2001af4:	89000117 	ldw	r4,4(r17)
 2001af8:	10c20014 	ori	r3,r2,2048
 2001afc:	88c0030d 	sth	r3,12(r17)
 2001b00:	180b883a 	mov	r5,r3
 2001b04:	0100520e 	bge	zero,r4,2001c50 <_fflush_r+0x1a0>
 2001b08:	88c00a17 	ldw	r3,40(r17)
 2001b0c:	18002226 	beq	r3,zero,2001b98 <_fflush_r+0xe8>
 2001b10:	1084000c 	andi	r2,r2,4096
 2001b14:	10bfffcc 	andi	r2,r2,65535
 2001b18:	10a0001c 	xori	r2,r2,32768
 2001b1c:	10a00004 	addi	r2,r2,-32768
 2001b20:	10004e26 	beq	r2,zero,2001c5c <_fflush_r+0x1ac>
 2001b24:	8c001417 	ldw	r16,80(r17)
 2001b28:	2940010c 	andi	r5,r5,4
 2001b2c:	297fffcc 	andi	r5,r5,65535
 2001b30:	2960001c 	xori	r5,r5,32768
 2001b34:	29600004 	addi	r5,r5,-32768
 2001b38:	28000626 	beq	r5,zero,2001b54 <_fflush_r+0xa4>
 2001b3c:	89000117 	ldw	r4,4(r17)
 2001b40:	88800c17 	ldw	r2,48(r17)
 2001b44:	8121c83a 	sub	r16,r16,r4
 2001b48:	10000226 	beq	r2,zero,2001b54 <_fflush_r+0xa4>
 2001b4c:	88800f17 	ldw	r2,60(r17)
 2001b50:	80a1c83a 	sub	r16,r16,r2
 2001b54:	89400717 	ldw	r5,28(r17)
 2001b58:	9809883a 	mov	r4,r19
 2001b5c:	800d883a 	mov	r6,r16
 2001b60:	000f883a 	mov	r7,zero
 2001b64:	183ee83a 	callr	r3
 2001b68:	8080281e 	bne	r16,r2,2001c0c <_fflush_r+0x15c>
 2001b6c:	8880030b 	ldhu	r2,12(r17)
 2001b70:	88c00417 	ldw	r3,16(r17)
 2001b74:	88000115 	stw	zero,4(r17)
 2001b78:	113dffcc 	andi	r4,r2,63487
 2001b7c:	1084000c 	andi	r2,r2,4096
 2001b80:	10bfffcc 	andi	r2,r2,65535
 2001b84:	10a0001c 	xori	r2,r2,32768
 2001b88:	8900030d 	sth	r4,12(r17)
 2001b8c:	88c00015 	stw	r3,0(r17)
 2001b90:	10a00004 	addi	r2,r2,-32768
 2001b94:	10002c1e 	bne	r2,zero,2001c48 <_fflush_r+0x198>
 2001b98:	0005883a 	mov	r2,zero
 2001b9c:	dfc00417 	ldw	ra,16(sp)
 2001ba0:	dcc00317 	ldw	r19,12(sp)
 2001ba4:	dc800217 	ldw	r18,8(sp)
 2001ba8:	dc400117 	ldw	r17,4(sp)
 2001bac:	dc000017 	ldw	r16,0(sp)
 2001bb0:	dec00504 	addi	sp,sp,20
 2001bb4:	f800283a 	ret
 2001bb8:	8c800417 	ldw	r18,16(r17)
 2001bbc:	903ff626 	beq	r18,zero,2001b98 <_fflush_r+0xe8>
 2001bc0:	8c000017 	ldw	r16,0(r17)
 2001bc4:	108000cc 	andi	r2,r2,3
 2001bc8:	8c800015 	stw	r18,0(r17)
 2001bcc:	84a1c83a 	sub	r16,r16,r18
 2001bd0:	10001b1e 	bne	r2,zero,2001c40 <_fflush_r+0x190>
 2001bd4:	88800517 	ldw	r2,20(r17)
 2001bd8:	88800215 	stw	r2,8(r17)
 2001bdc:	04000316 	blt	zero,r16,2001bec <_fflush_r+0x13c>
 2001be0:	003fed06 	br	2001b98 <_fflush_r+0xe8>
 2001be4:	90a5883a 	add	r18,r18,r2
 2001be8:	043feb0e 	bge	zero,r16,2001b98 <_fflush_r+0xe8>
 2001bec:	88800917 	ldw	r2,36(r17)
 2001bf0:	89400717 	ldw	r5,28(r17)
 2001bf4:	800f883a 	mov	r7,r16
 2001bf8:	900d883a 	mov	r6,r18
 2001bfc:	9809883a 	mov	r4,r19
 2001c00:	103ee83a 	callr	r2
 2001c04:	80a1c83a 	sub	r16,r16,r2
 2001c08:	00bff616 	blt	zero,r2,2001be4 <_fflush_r+0x134>
 2001c0c:	88c0030b 	ldhu	r3,12(r17)
 2001c10:	00bfffc4 	movi	r2,-1
 2001c14:	18c01014 	ori	r3,r3,64
 2001c18:	88c0030d 	sth	r3,12(r17)
 2001c1c:	dfc00417 	ldw	ra,16(sp)
 2001c20:	dcc00317 	ldw	r19,12(sp)
 2001c24:	dc800217 	ldw	r18,8(sp)
 2001c28:	dc400117 	ldw	r17,4(sp)
 2001c2c:	dc000017 	ldw	r16,0(sp)
 2001c30:	dec00504 	addi	sp,sp,20
 2001c34:	f800283a 	ret
 2001c38:	2001d580 	call	2001d58 <__sinit>
 2001c3c:	003fa706 	br	2001adc <_fflush_r+0x2c>
 2001c40:	0005883a 	mov	r2,zero
 2001c44:	003fe406 	br	2001bd8 <_fflush_r+0x128>
 2001c48:	8c001415 	stw	r16,80(r17)
 2001c4c:	003fd206 	br	2001b98 <_fflush_r+0xe8>
 2001c50:	88c00f17 	ldw	r3,60(r17)
 2001c54:	00ffac16 	blt	zero,r3,2001b08 <_fflush_r+0x58>
 2001c58:	003fcf06 	br	2001b98 <_fflush_r+0xe8>
 2001c5c:	89400717 	ldw	r5,28(r17)
 2001c60:	9809883a 	mov	r4,r19
 2001c64:	000d883a 	mov	r6,zero
 2001c68:	01c00044 	movi	r7,1
 2001c6c:	183ee83a 	callr	r3
 2001c70:	1021883a 	mov	r16,r2
 2001c74:	00bfffc4 	movi	r2,-1
 2001c78:	80800326 	beq	r16,r2,2001c88 <_fflush_r+0x1d8>
 2001c7c:	8940030b 	ldhu	r5,12(r17)
 2001c80:	88c00a17 	ldw	r3,40(r17)
 2001c84:	003fa806 	br	2001b28 <_fflush_r+0x78>
 2001c88:	98c00017 	ldw	r3,0(r19)
 2001c8c:	00800744 	movi	r2,29
 2001c90:	18bfde1e 	bne	r3,r2,2001c0c <_fflush_r+0x15c>
 2001c94:	003fc006 	br	2001b98 <_fflush_r+0xe8>

02001c98 <fflush>:
 2001c98:	200b883a 	mov	r5,r4
 2001c9c:	20000426 	beq	r4,zero,2001cb0 <fflush+0x18>
 2001ca0:	00808034 	movhi	r2,512
 2001ca4:	109def04 	addi	r2,r2,30652
 2001ca8:	11000017 	ldw	r4,0(r2)
 2001cac:	2001ab01 	jmpi	2001ab0 <_fflush_r>
 2001cb0:	00808034 	movhi	r2,512
 2001cb4:	109dee04 	addi	r2,r2,30648
 2001cb8:	11000017 	ldw	r4,0(r2)
 2001cbc:	01408034 	movhi	r5,512
 2001cc0:	2946ac04 	addi	r5,r5,6832
 2001cc4:	20024541 	jmpi	2002454 <_fwalk_reent>

02001cc8 <__fp_lock>:
 2001cc8:	0005883a 	mov	r2,zero
 2001ccc:	f800283a 	ret

02001cd0 <__fp_unlock>:
 2001cd0:	0005883a 	mov	r2,zero
 2001cd4:	f800283a 	ret

02001cd8 <_cleanup_r>:
 2001cd8:	01408034 	movhi	r5,512
 2001cdc:	294ab704 	addi	r5,r5,10972
 2001ce0:	20023ac1 	jmpi	20023ac <_fwalk>

02001ce4 <__sfmoreglue>:
 2001ce4:	defffc04 	addi	sp,sp,-16
 2001ce8:	dc400115 	stw	r17,4(sp)
 2001cec:	2c401724 	muli	r17,r5,92
 2001cf0:	dc800215 	stw	r18,8(sp)
 2001cf4:	2825883a 	mov	r18,r5
 2001cf8:	89400304 	addi	r5,r17,12
 2001cfc:	dc000015 	stw	r16,0(sp)
 2001d00:	dfc00315 	stw	ra,12(sp)
 2001d04:	20008400 	call	2000840 <_malloc_r>
 2001d08:	1021883a 	mov	r16,r2
 2001d0c:	10000726 	beq	r2,zero,2001d2c <__sfmoreglue+0x48>
 2001d10:	11000304 	addi	r4,r2,12
 2001d14:	10000015 	stw	zero,0(r2)
 2001d18:	14800115 	stw	r18,4(r2)
 2001d1c:	11000215 	stw	r4,8(r2)
 2001d20:	000b883a 	mov	r5,zero
 2001d24:	880d883a 	mov	r6,r17
 2001d28:	20026b40 	call	20026b4 <memset>
 2001d2c:	8005883a 	mov	r2,r16
 2001d30:	dfc00317 	ldw	ra,12(sp)
 2001d34:	dc800217 	ldw	r18,8(sp)
 2001d38:	dc400117 	ldw	r17,4(sp)
 2001d3c:	dc000017 	ldw	r16,0(sp)
 2001d40:	dec00404 	addi	sp,sp,16
 2001d44:	f800283a 	ret

02001d48 <_cleanup>:
 2001d48:	00808034 	movhi	r2,512
 2001d4c:	109dee04 	addi	r2,r2,30648
 2001d50:	11000017 	ldw	r4,0(r2)
 2001d54:	2001cd81 	jmpi	2001cd8 <_cleanup_r>

02001d58 <__sinit>:
 2001d58:	20800e17 	ldw	r2,56(r4)
 2001d5c:	1000401e 	bne	r2,zero,2001e60 <__sinit+0x108>
 2001d60:	21400117 	ldw	r5,4(r4)
 2001d64:	01808034 	movhi	r6,512
 2001d68:	31873604 	addi	r6,r6,7384
 2001d6c:	20c00217 	ldw	r3,8(r4)
 2001d70:	21800f15 	stw	r6,60(r4)
 2001d74:	2080bb04 	addi	r2,r4,748
 2001d78:	02400044 	movi	r9,1
 2001d7c:	018000c4 	movi	r6,3
 2001d80:	2180b915 	stw	r6,740(r4)
 2001d84:	2080ba15 	stw	r2,744(r4)
 2001d88:	22400e15 	stw	r9,56(r4)
 2001d8c:	20800317 	ldw	r2,12(r4)
 2001d90:	2000b815 	stw	zero,736(r4)
 2001d94:	02008034 	movhi	r8,512
 2001d98:	4209e404 	addi	r8,r8,10128
 2001d9c:	01c08034 	movhi	r7,512
 2001da0:	39c9f904 	addi	r7,r7,10212
 2001da4:	01808034 	movhi	r6,512
 2001da8:	318a1b04 	addi	r6,r6,10348
 2001dac:	01008034 	movhi	r4,512
 2001db0:	210a3204 	addi	r4,r4,10440
 2001db4:	02800104 	movi	r10,4
 2001db8:	28000015 	stw	zero,0(r5)
 2001dbc:	28000115 	stw	zero,4(r5)
 2001dc0:	28000215 	stw	zero,8(r5)
 2001dc4:	2a80030d 	sth	r10,12(r5)
 2001dc8:	2800038d 	sth	zero,14(r5)
 2001dcc:	28000415 	stw	zero,16(r5)
 2001dd0:	28000515 	stw	zero,20(r5)
 2001dd4:	28000615 	stw	zero,24(r5)
 2001dd8:	29400715 	stw	r5,28(r5)
 2001ddc:	2a000815 	stw	r8,32(r5)
 2001de0:	29c00915 	stw	r7,36(r5)
 2001de4:	29800a15 	stw	r6,40(r5)
 2001de8:	29000b15 	stw	r4,44(r5)
 2001dec:	01400284 	movi	r5,10
 2001df0:	18000015 	stw	zero,0(r3)
 2001df4:	18000115 	stw	zero,4(r3)
 2001df8:	18000215 	stw	zero,8(r3)
 2001dfc:	1940030d 	sth	r5,12(r3)
 2001e00:	1a40038d 	sth	r9,14(r3)
 2001e04:	18000415 	stw	zero,16(r3)
 2001e08:	18000515 	stw	zero,20(r3)
 2001e0c:	18000615 	stw	zero,24(r3)
 2001e10:	18c00715 	stw	r3,28(r3)
 2001e14:	1a000815 	stw	r8,32(r3)
 2001e18:	19c00915 	stw	r7,36(r3)
 2001e1c:	19800a15 	stw	r6,40(r3)
 2001e20:	19000b15 	stw	r4,44(r3)
 2001e24:	00c00484 	movi	r3,18
 2001e28:	10c0030d 	sth	r3,12(r2)
 2001e2c:	00c00084 	movi	r3,2
 2001e30:	10000015 	stw	zero,0(r2)
 2001e34:	10000115 	stw	zero,4(r2)
 2001e38:	10000215 	stw	zero,8(r2)
 2001e3c:	10c0038d 	sth	r3,14(r2)
 2001e40:	10000415 	stw	zero,16(r2)
 2001e44:	10000515 	stw	zero,20(r2)
 2001e48:	10000615 	stw	zero,24(r2)
 2001e4c:	10800715 	stw	r2,28(r2)
 2001e50:	12000815 	stw	r8,32(r2)
 2001e54:	11c00915 	stw	r7,36(r2)
 2001e58:	11800a15 	stw	r6,40(r2)
 2001e5c:	11000b15 	stw	r4,44(r2)
 2001e60:	f800283a 	ret

02001e64 <__sfp>:
 2001e64:	defffc04 	addi	sp,sp,-16
 2001e68:	00808034 	movhi	r2,512
 2001e6c:	109dee04 	addi	r2,r2,30648
 2001e70:	dc400115 	stw	r17,4(sp)
 2001e74:	14400017 	ldw	r17,0(r2)
 2001e78:	dc800215 	stw	r18,8(sp)
 2001e7c:	dfc00315 	stw	ra,12(sp)
 2001e80:	88800e17 	ldw	r2,56(r17)
 2001e84:	dc000015 	stw	r16,0(sp)
 2001e88:	2025883a 	mov	r18,r4
 2001e8c:	10002826 	beq	r2,zero,2001f30 <__sfp+0xcc>
 2001e90:	8c40b804 	addi	r17,r17,736
 2001e94:	043fffc4 	movi	r16,-1
 2001e98:	89400117 	ldw	r5,4(r17)
 2001e9c:	88800217 	ldw	r2,8(r17)
 2001ea0:	297fffc4 	addi	r5,r5,-1
 2001ea4:	28000a16 	blt	r5,zero,2001ed0 <__sfp+0x6c>
 2001ea8:	10c0030f 	ldh	r3,12(r2)
 2001eac:	18000c26 	beq	r3,zero,2001ee0 <__sfp+0x7c>
 2001eb0:	10c01a04 	addi	r3,r2,104
 2001eb4:	00000206 	br	2001ec0 <__sfp+0x5c>
 2001eb8:	19bfe90f 	ldh	r6,-92(r3)
 2001ebc:	30000826 	beq	r6,zero,2001ee0 <__sfp+0x7c>
 2001ec0:	297fffc4 	addi	r5,r5,-1
 2001ec4:	18bffd04 	addi	r2,r3,-12
 2001ec8:	18c01704 	addi	r3,r3,92
 2001ecc:	2c3ffa1e 	bne	r5,r16,2001eb8 <__sfp+0x54>
 2001ed0:	88800017 	ldw	r2,0(r17)
 2001ed4:	10001926 	beq	r2,zero,2001f3c <__sfp+0xd8>
 2001ed8:	1023883a 	mov	r17,r2
 2001edc:	003fee06 	br	2001e98 <__sfp+0x34>
 2001ee0:	00ffffc4 	movi	r3,-1
 2001ee4:	10c0038d 	sth	r3,14(r2)
 2001ee8:	00c00044 	movi	r3,1
 2001eec:	10c0030d 	sth	r3,12(r2)
 2001ef0:	10000015 	stw	zero,0(r2)
 2001ef4:	10000215 	stw	zero,8(r2)
 2001ef8:	10000115 	stw	zero,4(r2)
 2001efc:	10000415 	stw	zero,16(r2)
 2001f00:	10000515 	stw	zero,20(r2)
 2001f04:	10000615 	stw	zero,24(r2)
 2001f08:	10000c15 	stw	zero,48(r2)
 2001f0c:	10000d15 	stw	zero,52(r2)
 2001f10:	10001115 	stw	zero,68(r2)
 2001f14:	10001215 	stw	zero,72(r2)
 2001f18:	dfc00317 	ldw	ra,12(sp)
 2001f1c:	dc800217 	ldw	r18,8(sp)
 2001f20:	dc400117 	ldw	r17,4(sp)
 2001f24:	dc000017 	ldw	r16,0(sp)
 2001f28:	dec00404 	addi	sp,sp,16
 2001f2c:	f800283a 	ret
 2001f30:	8809883a 	mov	r4,r17
 2001f34:	2001d580 	call	2001d58 <__sinit>
 2001f38:	003fd506 	br	2001e90 <__sfp+0x2c>
 2001f3c:	9009883a 	mov	r4,r18
 2001f40:	01400104 	movi	r5,4
 2001f44:	2001ce40 	call	2001ce4 <__sfmoreglue>
 2001f48:	88800015 	stw	r2,0(r17)
 2001f4c:	103fe21e 	bne	r2,zero,2001ed8 <__sfp+0x74>
 2001f50:	00800304 	movi	r2,12
 2001f54:	90800015 	stw	r2,0(r18)
 2001f58:	0005883a 	mov	r2,zero
 2001f5c:	003fee06 	br	2001f18 <__sfp+0xb4>

02001f60 <__sfp_lock_acquire>:
 2001f60:	f800283a 	ret

02001f64 <__sfp_lock_release>:
 2001f64:	f800283a 	ret

02001f68 <__sinit_lock_acquire>:
 2001f68:	f800283a 	ret

02001f6c <__sinit_lock_release>:
 2001f6c:	f800283a 	ret

02001f70 <__fp_lock_all>:
 2001f70:	00808034 	movhi	r2,512
 2001f74:	109def04 	addi	r2,r2,30652
 2001f78:	11000017 	ldw	r4,0(r2)
 2001f7c:	01408034 	movhi	r5,512
 2001f80:	29473204 	addi	r5,r5,7368
 2001f84:	20023ac1 	jmpi	20023ac <_fwalk>

02001f88 <__fp_unlock_all>:
 2001f88:	00808034 	movhi	r2,512
 2001f8c:	109def04 	addi	r2,r2,30652
 2001f90:	11000017 	ldw	r4,0(r2)
 2001f94:	01408034 	movhi	r5,512
 2001f98:	29473404 	addi	r5,r5,7376
 2001f9c:	20023ac1 	jmpi	20023ac <_fwalk>

02001fa0 <_malloc_trim_r>:
 2001fa0:	defffb04 	addi	sp,sp,-20
 2001fa4:	dcc00315 	stw	r19,12(sp)
 2001fa8:	dc800215 	stw	r18,8(sp)
 2001fac:	dc400115 	stw	r17,4(sp)
 2001fb0:	dc000015 	stw	r16,0(sp)
 2001fb4:	2827883a 	mov	r19,r5
 2001fb8:	dfc00415 	stw	ra,16(sp)
 2001fbc:	04408034 	movhi	r17,512
 2001fc0:	8c583904 	addi	r17,r17,24804
 2001fc4:	2021883a 	mov	r16,r4
 2001fc8:	20032480 	call	2003248 <__malloc_lock>
 2001fcc:	88800217 	ldw	r2,8(r17)
 2001fd0:	14800117 	ldw	r18,4(r2)
 2001fd4:	00bfff04 	movi	r2,-4
 2001fd8:	90a4703a 	and	r18,r18,r2
 2001fdc:	9083fbc4 	addi	r2,r18,4079
 2001fe0:	14e7c83a 	sub	r19,r2,r19
 2001fe4:	9826d33a 	srli	r19,r19,12
 2001fe8:	0083ffc4 	movi	r2,4095
 2001fec:	9cffffc4 	addi	r19,r19,-1
 2001ff0:	9826933a 	slli	r19,r19,12
 2001ff4:	14c0060e 	bge	r2,r19,2002010 <_malloc_trim_r+0x70>
 2001ff8:	8009883a 	mov	r4,r16
 2001ffc:	000b883a 	mov	r5,zero
 2002000:	20018d80 	call	20018d8 <_sbrk_r>
 2002004:	88c00217 	ldw	r3,8(r17)
 2002008:	1c87883a 	add	r3,r3,r18
 200200c:	10c00a26 	beq	r2,r3,2002038 <_malloc_trim_r+0x98>
 2002010:	8009883a 	mov	r4,r16
 2002014:	20032680 	call	2003268 <__malloc_unlock>
 2002018:	0005883a 	mov	r2,zero
 200201c:	dfc00417 	ldw	ra,16(sp)
 2002020:	dcc00317 	ldw	r19,12(sp)
 2002024:	dc800217 	ldw	r18,8(sp)
 2002028:	dc400117 	ldw	r17,4(sp)
 200202c:	dc000017 	ldw	r16,0(sp)
 2002030:	dec00504 	addi	sp,sp,20
 2002034:	f800283a 	ret
 2002038:	8009883a 	mov	r4,r16
 200203c:	04cbc83a 	sub	r5,zero,r19
 2002040:	20018d80 	call	20018d8 <_sbrk_r>
 2002044:	00ffffc4 	movi	r3,-1
 2002048:	10c01326 	beq	r2,r3,2002098 <_malloc_trim_r+0xf8>
 200204c:	00808074 	movhi	r2,513
 2002050:	10a4c904 	addi	r2,r2,-27868
 2002054:	11000017 	ldw	r4,0(r2)
 2002058:	88c00217 	ldw	r3,8(r17)
 200205c:	94e5c83a 	sub	r18,r18,r19
 2002060:	94800054 	ori	r18,r18,1
 2002064:	24e7c83a 	sub	r19,r4,r19
 2002068:	1c800115 	stw	r18,4(r3)
 200206c:	8009883a 	mov	r4,r16
 2002070:	14c00015 	stw	r19,0(r2)
 2002074:	20032680 	call	2003268 <__malloc_unlock>
 2002078:	00800044 	movi	r2,1
 200207c:	dfc00417 	ldw	ra,16(sp)
 2002080:	dcc00317 	ldw	r19,12(sp)
 2002084:	dc800217 	ldw	r18,8(sp)
 2002088:	dc400117 	ldw	r17,4(sp)
 200208c:	dc000017 	ldw	r16,0(sp)
 2002090:	dec00504 	addi	sp,sp,20
 2002094:	f800283a 	ret
 2002098:	8009883a 	mov	r4,r16
 200209c:	000b883a 	mov	r5,zero
 20020a0:	20018d80 	call	20018d8 <_sbrk_r>
 20020a4:	88c00217 	ldw	r3,8(r17)
 20020a8:	014003c4 	movi	r5,15
 20020ac:	10c9c83a 	sub	r4,r2,r3
 20020b0:	293fd70e 	bge	r5,r4,2002010 <_malloc_trim_r+0x70>
 20020b4:	01408034 	movhi	r5,512
 20020b8:	295df004 	addi	r5,r5,30656
 20020bc:	29400017 	ldw	r5,0(r5)
 20020c0:	21000054 	ori	r4,r4,1
 20020c4:	19000115 	stw	r4,4(r3)
 20020c8:	1145c83a 	sub	r2,r2,r5
 20020cc:	01408074 	movhi	r5,513
 20020d0:	2964c904 	addi	r5,r5,-27868
 20020d4:	28800015 	stw	r2,0(r5)
 20020d8:	003fcd06 	br	2002010 <_malloc_trim_r+0x70>

020020dc <_free_r>:
 20020dc:	defffd04 	addi	sp,sp,-12
 20020e0:	dc400115 	stw	r17,4(sp)
 20020e4:	dc000015 	stw	r16,0(sp)
 20020e8:	dfc00215 	stw	ra,8(sp)
 20020ec:	2821883a 	mov	r16,r5
 20020f0:	2023883a 	mov	r17,r4
 20020f4:	28004b26 	beq	r5,zero,2002224 <_free_r+0x148>
 20020f8:	20032480 	call	2003248 <__malloc_lock>
 20020fc:	823fff17 	ldw	r8,-4(r16)
 2002100:	00bfff84 	movi	r2,-2
 2002104:	81bffe04 	addi	r6,r16,-8
 2002108:	4084703a 	and	r2,r8,r2
 200210c:	3087883a 	add	r3,r6,r2
 2002110:	01408034 	movhi	r5,512
 2002114:	29583904 	addi	r5,r5,24804
 2002118:	1a400117 	ldw	r9,4(r3)
 200211c:	29000217 	ldw	r4,8(r5)
 2002120:	01ffff04 	movi	r7,-4
 2002124:	49ce703a 	and	r7,r9,r7
 2002128:	20c06526 	beq	r4,r3,20022c0 <_free_r+0x1e4>
 200212c:	19c00115 	stw	r7,4(r3)
 2002130:	4200004c 	andi	r8,r8,1
 2002134:	40003026 	beq	r8,zero,20021f8 <_free_r+0x11c>
 2002138:	0009883a 	mov	r4,zero
 200213c:	19d1883a 	add	r8,r3,r7
 2002140:	42000117 	ldw	r8,4(r8)
 2002144:	4200004c 	andi	r8,r8,1
 2002148:	4000061e 	bne	r8,zero,2002164 <_free_r+0x88>
 200214c:	11c5883a 	add	r2,r2,r7
 2002150:	19c00217 	ldw	r7,8(r3)
 2002154:	20004e26 	beq	r4,zero,2002290 <_free_r+0x1b4>
 2002158:	18c00317 	ldw	r3,12(r3)
 200215c:	38c00315 	stw	r3,12(r7)
 2002160:	19c00215 	stw	r7,8(r3)
 2002164:	11c00054 	ori	r7,r2,1
 2002168:	3087883a 	add	r3,r6,r2
 200216c:	31c00115 	stw	r7,4(r6)
 2002170:	18800015 	stw	r2,0(r3)
 2002174:	20001a1e 	bne	r4,zero,20021e0 <_free_r+0x104>
 2002178:	00c07fc4 	movi	r3,511
 200217c:	18802e2e 	bgeu	r3,r2,2002238 <_free_r+0x15c>
 2002180:	1006d27a 	srli	r3,r2,9
 2002184:	01000104 	movi	r4,4
 2002188:	20c06636 	bltu	r4,r3,2002324 <_free_r+0x248>
 200218c:	1008d1ba 	srli	r4,r2,6
 2002190:	21000e04 	addi	r4,r4,56
 2002194:	210f883a 	add	r7,r4,r4
 2002198:	39cf883a 	add	r7,r7,r7
 200219c:	39cf883a 	add	r7,r7,r7
 20021a0:	29cf883a 	add	r7,r5,r7
 20021a4:	38c00217 	ldw	r3,8(r7)
 20021a8:	01408034 	movhi	r5,512
 20021ac:	29583904 	addi	r5,r5,24804
 20021b0:	19c06126 	beq	r3,r7,2002338 <_free_r+0x25c>
 20021b4:	013fff04 	movi	r4,-4
 20021b8:	19400117 	ldw	r5,4(r3)
 20021bc:	290a703a 	and	r5,r5,r4
 20021c0:	1140022e 	bgeu	r2,r5,20021cc <_free_r+0xf0>
 20021c4:	18c00217 	ldw	r3,8(r3)
 20021c8:	38fffb1e 	bne	r7,r3,20021b8 <_free_r+0xdc>
 20021cc:	18800317 	ldw	r2,12(r3)
 20021d0:	30800315 	stw	r2,12(r6)
 20021d4:	30c00215 	stw	r3,8(r6)
 20021d8:	11800215 	stw	r6,8(r2)
 20021dc:	19800315 	stw	r6,12(r3)
 20021e0:	8809883a 	mov	r4,r17
 20021e4:	dfc00217 	ldw	ra,8(sp)
 20021e8:	dc400117 	ldw	r17,4(sp)
 20021ec:	dc000017 	ldw	r16,0(sp)
 20021f0:	dec00304 	addi	sp,sp,12
 20021f4:	20032681 	jmpi	2003268 <__malloc_unlock>
 20021f8:	813ffe17 	ldw	r4,-8(r16)
 20021fc:	2a400204 	addi	r9,r5,8
 2002200:	310dc83a 	sub	r6,r6,r4
 2002204:	32000217 	ldw	r8,8(r6)
 2002208:	1105883a 	add	r2,r2,r4
 200220c:	42404326 	beq	r8,r9,200231c <_free_r+0x240>
 2002210:	32400317 	ldw	r9,12(r6)
 2002214:	0009883a 	mov	r4,zero
 2002218:	42400315 	stw	r9,12(r8)
 200221c:	4a000215 	stw	r8,8(r9)
 2002220:	003fc606 	br	200213c <_free_r+0x60>
 2002224:	dfc00217 	ldw	ra,8(sp)
 2002228:	dc400117 	ldw	r17,4(sp)
 200222c:	dc000017 	ldw	r16,0(sp)
 2002230:	dec00304 	addi	sp,sp,12
 2002234:	f800283a 	ret
 2002238:	1004d0fa 	srli	r2,r2,3
 200223c:	02000044 	movi	r8,1
 2002240:	29c00117 	ldw	r7,4(r5)
 2002244:	1087883a 	add	r3,r2,r2
 2002248:	18c7883a 	add	r3,r3,r3
 200224c:	1005d0ba 	srai	r2,r2,2
 2002250:	18c7883a 	add	r3,r3,r3
 2002254:	28c7883a 	add	r3,r5,r3
 2002258:	19000217 	ldw	r4,8(r3)
 200225c:	4084983a 	sll	r2,r8,r2
 2002260:	30c00315 	stw	r3,12(r6)
 2002264:	31000215 	stw	r4,8(r6)
 2002268:	11c4b03a 	or	r2,r2,r7
 200226c:	21800315 	stw	r6,12(r4)
 2002270:	8809883a 	mov	r4,r17
 2002274:	28800115 	stw	r2,4(r5)
 2002278:	19800215 	stw	r6,8(r3)
 200227c:	dfc00217 	ldw	ra,8(sp)
 2002280:	dc400117 	ldw	r17,4(sp)
 2002284:	dc000017 	ldw	r16,0(sp)
 2002288:	dec00304 	addi	sp,sp,12
 200228c:	20032681 	jmpi	2003268 <__malloc_unlock>
 2002290:	02008034 	movhi	r8,512
 2002294:	42183b04 	addi	r8,r8,24812
 2002298:	3a3faf1e 	bne	r7,r8,2002158 <_free_r+0x7c>
 200229c:	29800515 	stw	r6,20(r5)
 20022a0:	29800415 	stw	r6,16(r5)
 20022a4:	11000054 	ori	r4,r2,1
 20022a8:	3087883a 	add	r3,r6,r2
 20022ac:	31c00315 	stw	r7,12(r6)
 20022b0:	31c00215 	stw	r7,8(r6)
 20022b4:	31000115 	stw	r4,4(r6)
 20022b8:	18800015 	stw	r2,0(r3)
 20022bc:	003fc806 	br	20021e0 <_free_r+0x104>
 20022c0:	4200004c 	andi	r8,r8,1
 20022c4:	3885883a 	add	r2,r7,r2
 20022c8:	4000071e 	bne	r8,zero,20022e8 <_free_r+0x20c>
 20022cc:	81fffe17 	ldw	r7,-8(r16)
 20022d0:	31cdc83a 	sub	r6,r6,r7
 20022d4:	30c00317 	ldw	r3,12(r6)
 20022d8:	31000217 	ldw	r4,8(r6)
 20022dc:	11c5883a 	add	r2,r2,r7
 20022e0:	20c00315 	stw	r3,12(r4)
 20022e4:	19000215 	stw	r4,8(r3)
 20022e8:	00c08034 	movhi	r3,512
 20022ec:	18ddf104 	addi	r3,r3,30660
 20022f0:	18c00017 	ldw	r3,0(r3)
 20022f4:	11000054 	ori	r4,r2,1
 20022f8:	31000115 	stw	r4,4(r6)
 20022fc:	29800215 	stw	r6,8(r5)
 2002300:	10ffb736 	bltu	r2,r3,20021e0 <_free_r+0x104>
 2002304:	00808074 	movhi	r2,513
 2002308:	10a4c104 	addi	r2,r2,-27900
 200230c:	11400017 	ldw	r5,0(r2)
 2002310:	8809883a 	mov	r4,r17
 2002314:	2001fa00 	call	2001fa0 <_malloc_trim_r>
 2002318:	003fb106 	br	20021e0 <_free_r+0x104>
 200231c:	01000044 	movi	r4,1
 2002320:	003f8606 	br	200213c <_free_r+0x60>
 2002324:	01000504 	movi	r4,20
 2002328:	20c00b36 	bltu	r4,r3,2002358 <_free_r+0x27c>
 200232c:	190016c4 	addi	r4,r3,91
 2002330:	210f883a 	add	r7,r4,r4
 2002334:	003f9806 	br	2002198 <_free_r+0xbc>
 2002338:	2009d0ba 	srai	r4,r4,2
 200233c:	00800044 	movi	r2,1
 2002340:	29c00117 	ldw	r7,4(r5)
 2002344:	1108983a 	sll	r4,r2,r4
 2002348:	1805883a 	mov	r2,r3
 200234c:	21c8b03a 	or	r4,r4,r7
 2002350:	29000115 	stw	r4,4(r5)
 2002354:	003f9e06 	br	20021d0 <_free_r+0xf4>
 2002358:	01001504 	movi	r4,84
 200235c:	20c00436 	bltu	r4,r3,2002370 <_free_r+0x294>
 2002360:	1008d33a 	srli	r4,r2,12
 2002364:	21001b84 	addi	r4,r4,110
 2002368:	210f883a 	add	r7,r4,r4
 200236c:	003f8a06 	br	2002198 <_free_r+0xbc>
 2002370:	01005504 	movi	r4,340
 2002374:	20c00436 	bltu	r4,r3,2002388 <_free_r+0x2ac>
 2002378:	1008d3fa 	srli	r4,r2,15
 200237c:	21001dc4 	addi	r4,r4,119
 2002380:	210f883a 	add	r7,r4,r4
 2002384:	003f8406 	br	2002198 <_free_r+0xbc>
 2002388:	01015504 	movi	r4,1364
 200238c:	20c00436 	bltu	r4,r3,20023a0 <_free_r+0x2c4>
 2002390:	1008d4ba 	srli	r4,r2,18
 2002394:	21001f04 	addi	r4,r4,124
 2002398:	210f883a 	add	r7,r4,r4
 200239c:	003f7e06 	br	2002198 <_free_r+0xbc>
 20023a0:	01c03f04 	movi	r7,252
 20023a4:	01001f84 	movi	r4,126
 20023a8:	003f7b06 	br	2002198 <_free_r+0xbc>

020023ac <_fwalk>:
 20023ac:	defff904 	addi	sp,sp,-28
 20023b0:	dcc00315 	stw	r19,12(sp)
 20023b4:	24c0b804 	addi	r19,r4,736
 20023b8:	dd400515 	stw	r21,20(sp)
 20023bc:	dd000415 	stw	r20,16(sp)
 20023c0:	dfc00615 	stw	ra,24(sp)
 20023c4:	dc800215 	stw	r18,8(sp)
 20023c8:	dc400115 	stw	r17,4(sp)
 20023cc:	dc000015 	stw	r16,0(sp)
 20023d0:	282b883a 	mov	r21,r5
 20023d4:	0029883a 	mov	r20,zero
 20023d8:	2001f600 	call	2001f60 <__sfp_lock_acquire>
 20023dc:	98001226 	beq	r19,zero,2002428 <_fwalk+0x7c>
 20023e0:	04bfffc4 	movi	r18,-1
 20023e4:	9c400117 	ldw	r17,4(r19)
 20023e8:	9c000217 	ldw	r16,8(r19)
 20023ec:	8c7fffc4 	addi	r17,r17,-1
 20023f0:	88000b16 	blt	r17,zero,2002420 <_fwalk+0x74>
 20023f4:	84000304 	addi	r16,r16,12
 20023f8:	80c0000f 	ldh	r3,0(r16)
 20023fc:	8c7fffc4 	addi	r17,r17,-1
 2002400:	813ffd04 	addi	r4,r16,-12
 2002404:	18000426 	beq	r3,zero,2002418 <_fwalk+0x6c>
 2002408:	80c0008f 	ldh	r3,2(r16)
 200240c:	1c800226 	beq	r3,r18,2002418 <_fwalk+0x6c>
 2002410:	a83ee83a 	callr	r21
 2002414:	a0a8b03a 	or	r20,r20,r2
 2002418:	84001704 	addi	r16,r16,92
 200241c:	8cbff61e 	bne	r17,r18,20023f8 <_fwalk+0x4c>
 2002420:	9cc00017 	ldw	r19,0(r19)
 2002424:	983fef1e 	bne	r19,zero,20023e4 <_fwalk+0x38>
 2002428:	2001f640 	call	2001f64 <__sfp_lock_release>
 200242c:	a005883a 	mov	r2,r20
 2002430:	dfc00617 	ldw	ra,24(sp)
 2002434:	dd400517 	ldw	r21,20(sp)
 2002438:	dd000417 	ldw	r20,16(sp)
 200243c:	dcc00317 	ldw	r19,12(sp)
 2002440:	dc800217 	ldw	r18,8(sp)
 2002444:	dc400117 	ldw	r17,4(sp)
 2002448:	dc000017 	ldw	r16,0(sp)
 200244c:	dec00704 	addi	sp,sp,28
 2002450:	f800283a 	ret

02002454 <_fwalk_reent>:
 2002454:	defff804 	addi	sp,sp,-32
 2002458:	dcc00315 	stw	r19,12(sp)
 200245c:	24c0b804 	addi	r19,r4,736
 2002460:	dd800615 	stw	r22,24(sp)
 2002464:	dd400515 	stw	r21,20(sp)
 2002468:	dd000415 	stw	r20,16(sp)
 200246c:	dfc00715 	stw	ra,28(sp)
 2002470:	dc800215 	stw	r18,8(sp)
 2002474:	dc400115 	stw	r17,4(sp)
 2002478:	dc000015 	stw	r16,0(sp)
 200247c:	2029883a 	mov	r20,r4
 2002480:	282b883a 	mov	r21,r5
 2002484:	002d883a 	mov	r22,zero
 2002488:	2001f600 	call	2001f60 <__sfp_lock_acquire>
 200248c:	98001326 	beq	r19,zero,20024dc <_fwalk_reent+0x88>
 2002490:	04bfffc4 	movi	r18,-1
 2002494:	9c400117 	ldw	r17,4(r19)
 2002498:	9c000217 	ldw	r16,8(r19)
 200249c:	8c7fffc4 	addi	r17,r17,-1
 20024a0:	88000c16 	blt	r17,zero,20024d4 <_fwalk_reent+0x80>
 20024a4:	84000304 	addi	r16,r16,12
 20024a8:	80c0000f 	ldh	r3,0(r16)
 20024ac:	8c7fffc4 	addi	r17,r17,-1
 20024b0:	817ffd04 	addi	r5,r16,-12
 20024b4:	18000526 	beq	r3,zero,20024cc <_fwalk_reent+0x78>
 20024b8:	80c0008f 	ldh	r3,2(r16)
 20024bc:	a009883a 	mov	r4,r20
 20024c0:	1c800226 	beq	r3,r18,20024cc <_fwalk_reent+0x78>
 20024c4:	a83ee83a 	callr	r21
 20024c8:	b0acb03a 	or	r22,r22,r2
 20024cc:	84001704 	addi	r16,r16,92
 20024d0:	8cbff51e 	bne	r17,r18,20024a8 <_fwalk_reent+0x54>
 20024d4:	9cc00017 	ldw	r19,0(r19)
 20024d8:	983fee1e 	bne	r19,zero,2002494 <_fwalk_reent+0x40>
 20024dc:	2001f640 	call	2001f64 <__sfp_lock_release>
 20024e0:	b005883a 	mov	r2,r22
 20024e4:	dfc00717 	ldw	ra,28(sp)
 20024e8:	dd800617 	ldw	r22,24(sp)
 20024ec:	dd400517 	ldw	r21,20(sp)
 20024f0:	dd000417 	ldw	r20,16(sp)
 20024f4:	dcc00317 	ldw	r19,12(sp)
 20024f8:	dc800217 	ldw	r18,8(sp)
 20024fc:	dc400117 	ldw	r17,4(sp)
 2002500:	dc000017 	ldw	r16,0(sp)
 2002504:	dec00804 	addi	sp,sp,32
 2002508:	f800283a 	ret

0200250c <__smakebuf_r>:
 200250c:	2880030b 	ldhu	r2,12(r5)
 2002510:	deffed04 	addi	sp,sp,-76
 2002514:	dc401015 	stw	r17,64(sp)
 2002518:	10c0008c 	andi	r3,r2,2
 200251c:	18ffffcc 	andi	r3,r3,65535
 2002520:	18e0001c 	xori	r3,r3,32768
 2002524:	dc000f15 	stw	r16,60(sp)
 2002528:	dfc01215 	stw	ra,72(sp)
 200252c:	dc801115 	stw	r18,68(sp)
 2002530:	18e00004 	addi	r3,r3,-32768
 2002534:	2821883a 	mov	r16,r5
 2002538:	2023883a 	mov	r17,r4
 200253c:	1800381e 	bne	r3,zero,2002620 <__smakebuf_r+0x114>
 2002540:	2940038f 	ldh	r5,14(r5)
 2002544:	28002d16 	blt	r5,zero,20025fc <__smakebuf_r+0xf0>
 2002548:	d80d883a 	mov	r6,sp
 200254c:	2002af00 	call	2002af0 <_fstat_r>
 2002550:	10002916 	blt	r2,zero,20025f8 <__smakebuf_r+0xec>
 2002554:	d8800117 	ldw	r2,4(sp)
 2002558:	00e00014 	movui	r3,32768
 200255c:	10bc000c 	andi	r2,r2,61440
 2002560:	10c03c26 	beq	r2,r3,2002654 <__smakebuf_r+0x148>
 2002564:	80c0030b 	ldhu	r3,12(r16)
 2002568:	18c20014 	ori	r3,r3,2048
 200256c:	80c0030d 	sth	r3,12(r16)
 2002570:	00c80004 	movi	r3,8192
 2002574:	10c00c1e 	bne	r2,r3,20025a8 <__smakebuf_r+0x9c>
 2002578:	8140038f 	ldh	r5,14(r16)
 200257c:	8809883a 	mov	r4,r17
 2002580:	2002b580 	call	2002b58 <_isatty_r>
 2002584:	10000826 	beq	r2,zero,20025a8 <__smakebuf_r+0x9c>
 2002588:	80c0030b 	ldhu	r3,12(r16)
 200258c:	808010c4 	addi	r2,r16,67
 2002590:	80800015 	stw	r2,0(r16)
 2002594:	18c00054 	ori	r3,r3,1
 2002598:	80800415 	stw	r2,16(r16)
 200259c:	00800044 	movi	r2,1
 20025a0:	80c0030d 	sth	r3,12(r16)
 20025a4:	80800515 	stw	r2,20(r16)
 20025a8:	04810004 	movi	r18,1024
 20025ac:	8809883a 	mov	r4,r17
 20025b0:	900b883a 	mov	r5,r18
 20025b4:	20008400 	call	2000840 <_malloc_r>
 20025b8:	10003026 	beq	r2,zero,200267c <__smakebuf_r+0x170>
 20025bc:	80c0030b 	ldhu	r3,12(r16)
 20025c0:	01008034 	movhi	r4,512
 20025c4:	21073604 	addi	r4,r4,7384
 20025c8:	89000f15 	stw	r4,60(r17)
 20025cc:	18c02014 	ori	r3,r3,128
 20025d0:	80c0030d 	sth	r3,12(r16)
 20025d4:	80800015 	stw	r2,0(r16)
 20025d8:	80800415 	stw	r2,16(r16)
 20025dc:	84800515 	stw	r18,20(r16)
 20025e0:	dfc01217 	ldw	ra,72(sp)
 20025e4:	dc801117 	ldw	r18,68(sp)
 20025e8:	dc401017 	ldw	r17,64(sp)
 20025ec:	dc000f17 	ldw	r16,60(sp)
 20025f0:	dec01304 	addi	sp,sp,76
 20025f4:	f800283a 	ret
 20025f8:	8080030b 	ldhu	r2,12(r16)
 20025fc:	10c0200c 	andi	r3,r2,128
 2002600:	18ffffcc 	andi	r3,r3,65535
 2002604:	18e0001c 	xori	r3,r3,32768
 2002608:	18e00004 	addi	r3,r3,-32768
 200260c:	18000f1e 	bne	r3,zero,200264c <__smakebuf_r+0x140>
 2002610:	04810004 	movi	r18,1024
 2002614:	10820014 	ori	r2,r2,2048
 2002618:	8080030d 	sth	r2,12(r16)
 200261c:	003fe306 	br	20025ac <__smakebuf_r+0xa0>
 2002620:	288010c4 	addi	r2,r5,67
 2002624:	28800015 	stw	r2,0(r5)
 2002628:	28800415 	stw	r2,16(r5)
 200262c:	00800044 	movi	r2,1
 2002630:	28800515 	stw	r2,20(r5)
 2002634:	dfc01217 	ldw	ra,72(sp)
 2002638:	dc801117 	ldw	r18,68(sp)
 200263c:	dc401017 	ldw	r17,64(sp)
 2002640:	dc000f17 	ldw	r16,60(sp)
 2002644:	dec01304 	addi	sp,sp,76
 2002648:	f800283a 	ret
 200264c:	04801004 	movi	r18,64
 2002650:	003ff006 	br	2002614 <__smakebuf_r+0x108>
 2002654:	81000a17 	ldw	r4,40(r16)
 2002658:	00c08034 	movhi	r3,512
 200265c:	18ca1b04 	addi	r3,r3,10348
 2002660:	20ffc01e 	bne	r4,r3,2002564 <__smakebuf_r+0x58>
 2002664:	8080030b 	ldhu	r2,12(r16)
 2002668:	00c10004 	movi	r3,1024
 200266c:	80c01315 	stw	r3,76(r16)
 2002670:	10c4b03a 	or	r2,r2,r3
 2002674:	8080030d 	sth	r2,12(r16)
 2002678:	003fcb06 	br	20025a8 <__smakebuf_r+0x9c>
 200267c:	8080030b 	ldhu	r2,12(r16)
 2002680:	10c0800c 	andi	r3,r2,512
 2002684:	18ffffcc 	andi	r3,r3,65535
 2002688:	18e0001c 	xori	r3,r3,32768
 200268c:	18e00004 	addi	r3,r3,-32768
 2002690:	183fd31e 	bne	r3,zero,20025e0 <__smakebuf_r+0xd4>
 2002694:	10800094 	ori	r2,r2,2
 2002698:	80c010c4 	addi	r3,r16,67
 200269c:	8080030d 	sth	r2,12(r16)
 20026a0:	00800044 	movi	r2,1
 20026a4:	80c00015 	stw	r3,0(r16)
 20026a8:	80c00415 	stw	r3,16(r16)
 20026ac:	80800515 	stw	r2,20(r16)
 20026b0:	003fcb06 	br	20025e0 <__smakebuf_r+0xd4>

020026b4 <memset>:
 20026b4:	00c000c4 	movi	r3,3
 20026b8:	2005883a 	mov	r2,r4
 20026bc:	29403fcc 	andi	r5,r5,255
 20026c0:	19802d2e 	bgeu	r3,r6,2002778 <memset+0xc4>
 20026c4:	20c6703a 	and	r3,r4,r3
 20026c8:	18002e1e 	bne	r3,zero,2002784 <memset+0xd0>
 20026cc:	2806923a 	slli	r3,r5,8
 20026d0:	010003c4 	movi	r4,15
 20026d4:	3011883a 	mov	r8,r6
 20026d8:	1946b03a 	or	r3,r3,r5
 20026dc:	180e943a 	slli	r7,r3,16
 20026e0:	38ceb03a 	or	r7,r7,r3
 20026e4:	1007883a 	mov	r3,r2
 20026e8:	21800f2e 	bgeu	r4,r6,2002728 <memset+0x74>
 20026ec:	19c00015 	stw	r7,0(r3)
 20026f0:	19c00115 	stw	r7,4(r3)
 20026f4:	19c00215 	stw	r7,8(r3)
 20026f8:	19c00315 	stw	r7,12(r3)
 20026fc:	423ffc04 	addi	r8,r8,-16
 2002700:	18c00404 	addi	r3,r3,16
 2002704:	223ff936 	bltu	r4,r8,20026ec <memset+0x38>
 2002708:	30fffc04 	addi	r3,r6,-16
 200270c:	1806d13a 	srli	r3,r3,4
 2002710:	318003cc 	andi	r6,r6,15
 2002714:	010000c4 	movi	r4,3
 2002718:	18c00044 	addi	r3,r3,1
 200271c:	1806913a 	slli	r3,r3,4
 2002720:	10c7883a 	add	r3,r2,r3
 2002724:	21800e2e 	bgeu	r4,r6,2002760 <memset+0xac>
 2002728:	1813883a 	mov	r9,r3
 200272c:	3011883a 	mov	r8,r6
 2002730:	010000c4 	movi	r4,3
 2002734:	49c00015 	stw	r7,0(r9)
 2002738:	423fff04 	addi	r8,r8,-4
 200273c:	4a400104 	addi	r9,r9,4
 2002740:	223ffc36 	bltu	r4,r8,2002734 <memset+0x80>
 2002744:	313fff04 	addi	r4,r6,-4
 2002748:	2008d0ba 	srli	r4,r4,2
 200274c:	318000cc 	andi	r6,r6,3
 2002750:	21000044 	addi	r4,r4,1
 2002754:	2109883a 	add	r4,r4,r4
 2002758:	2109883a 	add	r4,r4,r4
 200275c:	1907883a 	add	r3,r3,r4
 2002760:	30000a26 	beq	r6,zero,200278c <memset+0xd8>
 2002764:	198d883a 	add	r6,r3,r6
 2002768:	19400005 	stb	r5,0(r3)
 200276c:	18c00044 	addi	r3,r3,1
 2002770:	19bffd1e 	bne	r3,r6,2002768 <memset+0xb4>
 2002774:	f800283a 	ret
 2002778:	2007883a 	mov	r3,r4
 200277c:	303ff91e 	bne	r6,zero,2002764 <memset+0xb0>
 2002780:	00000206 	br	200278c <memset+0xd8>
 2002784:	2007883a 	mov	r3,r4
 2002788:	003ff606 	br	2002764 <memset+0xb0>
 200278c:	f800283a 	ret

02002790 <__sread>:
 2002790:	defffe04 	addi	sp,sp,-8
 2002794:	dc000015 	stw	r16,0(sp)
 2002798:	2821883a 	mov	r16,r5
 200279c:	2940038f 	ldh	r5,14(r5)
 20027a0:	dfc00115 	stw	ra,4(sp)
 20027a4:	2002c280 	call	2002c28 <_read_r>
 20027a8:	10000716 	blt	r2,zero,20027c8 <__sread+0x38>
 20027ac:	80c01417 	ldw	r3,80(r16)
 20027b0:	1887883a 	add	r3,r3,r2
 20027b4:	80c01415 	stw	r3,80(r16)
 20027b8:	dfc00117 	ldw	ra,4(sp)
 20027bc:	dc000017 	ldw	r16,0(sp)
 20027c0:	dec00204 	addi	sp,sp,8
 20027c4:	f800283a 	ret
 20027c8:	80c0030b 	ldhu	r3,12(r16)
 20027cc:	18fbffcc 	andi	r3,r3,61439
 20027d0:	80c0030d 	sth	r3,12(r16)
 20027d4:	dfc00117 	ldw	ra,4(sp)
 20027d8:	dc000017 	ldw	r16,0(sp)
 20027dc:	dec00204 	addi	sp,sp,8
 20027e0:	f800283a 	ret

020027e4 <__swrite>:
 20027e4:	2880030b 	ldhu	r2,12(r5)
 20027e8:	defffb04 	addi	sp,sp,-20
 20027ec:	dcc00315 	stw	r19,12(sp)
 20027f0:	10c0400c 	andi	r3,r2,256
 20027f4:	18ffffcc 	andi	r3,r3,65535
 20027f8:	18e0001c 	xori	r3,r3,32768
 20027fc:	dc800215 	stw	r18,8(sp)
 2002800:	dc400115 	stw	r17,4(sp)
 2002804:	dc000015 	stw	r16,0(sp)
 2002808:	dfc00415 	stw	ra,16(sp)
 200280c:	18e00004 	addi	r3,r3,-32768
 2002810:	2821883a 	mov	r16,r5
 2002814:	2027883a 	mov	r19,r4
 2002818:	3025883a 	mov	r18,r6
 200281c:	3823883a 	mov	r17,r7
 2002820:	18000526 	beq	r3,zero,2002838 <__swrite+0x54>
 2002824:	2940038f 	ldh	r5,14(r5)
 2002828:	000d883a 	mov	r6,zero
 200282c:	01c00084 	movi	r7,2
 2002830:	2002bbc0 	call	2002bbc <_lseek_r>
 2002834:	8080030b 	ldhu	r2,12(r16)
 2002838:	8140038f 	ldh	r5,14(r16)
 200283c:	10bbffcc 	andi	r2,r2,61439
 2002840:	9809883a 	mov	r4,r19
 2002844:	900d883a 	mov	r6,r18
 2002848:	880f883a 	mov	r7,r17
 200284c:	8080030d 	sth	r2,12(r16)
 2002850:	dfc00417 	ldw	ra,16(sp)
 2002854:	dcc00317 	ldw	r19,12(sp)
 2002858:	dc800217 	ldw	r18,8(sp)
 200285c:	dc400117 	ldw	r17,4(sp)
 2002860:	dc000017 	ldw	r16,0(sp)
 2002864:	dec00504 	addi	sp,sp,20
 2002868:	20028d01 	jmpi	20028d0 <_write_r>

0200286c <__sseek>:
 200286c:	defffe04 	addi	sp,sp,-8
 2002870:	dc000015 	stw	r16,0(sp)
 2002874:	2821883a 	mov	r16,r5
 2002878:	2940038f 	ldh	r5,14(r5)
 200287c:	dfc00115 	stw	ra,4(sp)
 2002880:	2002bbc0 	call	2002bbc <_lseek_r>
 2002884:	00ffffc4 	movi	r3,-1
 2002888:	10c00826 	beq	r2,r3,20028ac <__sseek+0x40>
 200288c:	80c0030b 	ldhu	r3,12(r16)
 2002890:	80801415 	stw	r2,80(r16)
 2002894:	18c40014 	ori	r3,r3,4096
 2002898:	80c0030d 	sth	r3,12(r16)
 200289c:	dfc00117 	ldw	ra,4(sp)
 20028a0:	dc000017 	ldw	r16,0(sp)
 20028a4:	dec00204 	addi	sp,sp,8
 20028a8:	f800283a 	ret
 20028ac:	80c0030b 	ldhu	r3,12(r16)
 20028b0:	18fbffcc 	andi	r3,r3,61439
 20028b4:	80c0030d 	sth	r3,12(r16)
 20028b8:	dfc00117 	ldw	ra,4(sp)
 20028bc:	dc000017 	ldw	r16,0(sp)
 20028c0:	dec00204 	addi	sp,sp,8
 20028c4:	f800283a 	ret

020028c8 <__sclose>:
 20028c8:	2940038f 	ldh	r5,14(r5)
 20028cc:	200293c1 	jmpi	200293c <_close_r>

020028d0 <_write_r>:
 20028d0:	defffd04 	addi	sp,sp,-12
 20028d4:	dc400115 	stw	r17,4(sp)
 20028d8:	dc000015 	stw	r16,0(sp)
 20028dc:	2023883a 	mov	r17,r4
 20028e0:	04008074 	movhi	r16,513
 20028e4:	8424c204 	addi	r16,r16,-27896
 20028e8:	2809883a 	mov	r4,r5
 20028ec:	300b883a 	mov	r5,r6
 20028f0:	380d883a 	mov	r6,r7
 20028f4:	dfc00215 	stw	ra,8(sp)
 20028f8:	80000015 	stw	zero,0(r16)
 20028fc:	20035280 	call	2003528 <write>
 2002900:	00ffffc4 	movi	r3,-1
 2002904:	10c00526 	beq	r2,r3,200291c <_write_r+0x4c>
 2002908:	dfc00217 	ldw	ra,8(sp)
 200290c:	dc400117 	ldw	r17,4(sp)
 2002910:	dc000017 	ldw	r16,0(sp)
 2002914:	dec00304 	addi	sp,sp,12
 2002918:	f800283a 	ret
 200291c:	80c00017 	ldw	r3,0(r16)
 2002920:	183ff926 	beq	r3,zero,2002908 <_write_r+0x38>
 2002924:	88c00015 	stw	r3,0(r17)
 2002928:	dfc00217 	ldw	ra,8(sp)
 200292c:	dc400117 	ldw	r17,4(sp)
 2002930:	dc000017 	ldw	r16,0(sp)
 2002934:	dec00304 	addi	sp,sp,12
 2002938:	f800283a 	ret

0200293c <_close_r>:
 200293c:	defffd04 	addi	sp,sp,-12
 2002940:	dc400115 	stw	r17,4(sp)
 2002944:	dc000015 	stw	r16,0(sp)
 2002948:	2023883a 	mov	r17,r4
 200294c:	04008074 	movhi	r16,513
 2002950:	8424c204 	addi	r16,r16,-27896
 2002954:	2809883a 	mov	r4,r5
 2002958:	dfc00215 	stw	ra,8(sp)
 200295c:	80000015 	stw	zero,0(r16)
 2002960:	2002ce40 	call	2002ce4 <close>
 2002964:	00ffffc4 	movi	r3,-1
 2002968:	10c00526 	beq	r2,r3,2002980 <_close_r+0x44>
 200296c:	dfc00217 	ldw	ra,8(sp)
 2002970:	dc400117 	ldw	r17,4(sp)
 2002974:	dc000017 	ldw	r16,0(sp)
 2002978:	dec00304 	addi	sp,sp,12
 200297c:	f800283a 	ret
 2002980:	80c00017 	ldw	r3,0(r16)
 2002984:	183ff926 	beq	r3,zero,200296c <_close_r+0x30>
 2002988:	88c00015 	stw	r3,0(r17)
 200298c:	dfc00217 	ldw	ra,8(sp)
 2002990:	dc400117 	ldw	r17,4(sp)
 2002994:	dc000017 	ldw	r16,0(sp)
 2002998:	dec00304 	addi	sp,sp,12
 200299c:	f800283a 	ret

020029a0 <_fclose_r>:
 20029a0:	defffc04 	addi	sp,sp,-16
 20029a4:	dc400115 	stw	r17,4(sp)
 20029a8:	dc000015 	stw	r16,0(sp)
 20029ac:	dfc00315 	stw	ra,12(sp)
 20029b0:	dc800215 	stw	r18,8(sp)
 20029b4:	2821883a 	mov	r16,r5
 20029b8:	2023883a 	mov	r17,r4
 20029bc:	28003426 	beq	r5,zero,2002a90 <_fclose_r+0xf0>
 20029c0:	2001f600 	call	2001f60 <__sfp_lock_acquire>
 20029c4:	88000226 	beq	r17,zero,20029d0 <_fclose_r+0x30>
 20029c8:	88800e17 	ldw	r2,56(r17)
 20029cc:	10003826 	beq	r2,zero,2002ab0 <_fclose_r+0x110>
 20029d0:	8080030f 	ldh	r2,12(r16)
 20029d4:	10002526 	beq	r2,zero,2002a6c <_fclose_r+0xcc>
 20029d8:	8809883a 	mov	r4,r17
 20029dc:	800b883a 	mov	r5,r16
 20029e0:	2001ab00 	call	2001ab0 <_fflush_r>
 20029e4:	1025883a 	mov	r18,r2
 20029e8:	80800b17 	ldw	r2,44(r16)
 20029ec:	10000426 	beq	r2,zero,2002a00 <_fclose_r+0x60>
 20029f0:	81400717 	ldw	r5,28(r16)
 20029f4:	8809883a 	mov	r4,r17
 20029f8:	103ee83a 	callr	r2
 20029fc:	10003516 	blt	r2,zero,2002ad4 <_fclose_r+0x134>
 2002a00:	8080030b 	ldhu	r2,12(r16)
 2002a04:	1080200c 	andi	r2,r2,128
 2002a08:	10bfffcc 	andi	r2,r2,65535
 2002a0c:	10a0001c 	xori	r2,r2,32768
 2002a10:	10a00004 	addi	r2,r2,-32768
 2002a14:	10002b1e 	bne	r2,zero,2002ac4 <_fclose_r+0x124>
 2002a18:	81400c17 	ldw	r5,48(r16)
 2002a1c:	28000526 	beq	r5,zero,2002a34 <_fclose_r+0x94>
 2002a20:	80801004 	addi	r2,r16,64
 2002a24:	28800226 	beq	r5,r2,2002a30 <_fclose_r+0x90>
 2002a28:	8809883a 	mov	r4,r17
 2002a2c:	20020dc0 	call	20020dc <_free_r>
 2002a30:	80000c15 	stw	zero,48(r16)
 2002a34:	81401117 	ldw	r5,68(r16)
 2002a38:	28000326 	beq	r5,zero,2002a48 <_fclose_r+0xa8>
 2002a3c:	8809883a 	mov	r4,r17
 2002a40:	20020dc0 	call	20020dc <_free_r>
 2002a44:	80001115 	stw	zero,68(r16)
 2002a48:	8000030d 	sth	zero,12(r16)
 2002a4c:	2001f640 	call	2001f64 <__sfp_lock_release>
 2002a50:	9005883a 	mov	r2,r18
 2002a54:	dfc00317 	ldw	ra,12(sp)
 2002a58:	dc800217 	ldw	r18,8(sp)
 2002a5c:	dc400117 	ldw	r17,4(sp)
 2002a60:	dc000017 	ldw	r16,0(sp)
 2002a64:	dec00404 	addi	sp,sp,16
 2002a68:	f800283a 	ret
 2002a6c:	2001f640 	call	2001f64 <__sfp_lock_release>
 2002a70:	0025883a 	mov	r18,zero
 2002a74:	9005883a 	mov	r2,r18
 2002a78:	dfc00317 	ldw	ra,12(sp)
 2002a7c:	dc800217 	ldw	r18,8(sp)
 2002a80:	dc400117 	ldw	r17,4(sp)
 2002a84:	dc000017 	ldw	r16,0(sp)
 2002a88:	dec00404 	addi	sp,sp,16
 2002a8c:	f800283a 	ret
 2002a90:	0025883a 	mov	r18,zero
 2002a94:	9005883a 	mov	r2,r18
 2002a98:	dfc00317 	ldw	ra,12(sp)
 2002a9c:	dc800217 	ldw	r18,8(sp)
 2002aa0:	dc400117 	ldw	r17,4(sp)
 2002aa4:	dc000017 	ldw	r16,0(sp)
 2002aa8:	dec00404 	addi	sp,sp,16
 2002aac:	f800283a 	ret
 2002ab0:	8809883a 	mov	r4,r17
 2002ab4:	2001d580 	call	2001d58 <__sinit>
 2002ab8:	8080030f 	ldh	r2,12(r16)
 2002abc:	103fc61e 	bne	r2,zero,20029d8 <_fclose_r+0x38>
 2002ac0:	003fea06 	br	2002a6c <_fclose_r+0xcc>
 2002ac4:	81400417 	ldw	r5,16(r16)
 2002ac8:	8809883a 	mov	r4,r17
 2002acc:	20020dc0 	call	20020dc <_free_r>
 2002ad0:	003fd106 	br	2002a18 <_fclose_r+0x78>
 2002ad4:	04bfffc4 	movi	r18,-1
 2002ad8:	003fc906 	br	2002a00 <_fclose_r+0x60>

02002adc <fclose>:
 2002adc:	00808034 	movhi	r2,512
 2002ae0:	109def04 	addi	r2,r2,30652
 2002ae4:	200b883a 	mov	r5,r4
 2002ae8:	11000017 	ldw	r4,0(r2)
 2002aec:	20029a01 	jmpi	20029a0 <_fclose_r>

02002af0 <_fstat_r>:
 2002af0:	defffd04 	addi	sp,sp,-12
 2002af4:	dc400115 	stw	r17,4(sp)
 2002af8:	dc000015 	stw	r16,0(sp)
 2002afc:	2023883a 	mov	r17,r4
 2002b00:	04008074 	movhi	r16,513
 2002b04:	8424c204 	addi	r16,r16,-27896
 2002b08:	2809883a 	mov	r4,r5
 2002b0c:	300b883a 	mov	r5,r6
 2002b10:	dfc00215 	stw	ra,8(sp)
 2002b14:	80000015 	stw	zero,0(r16)
 2002b18:	2002e280 	call	2002e28 <fstat>
 2002b1c:	00ffffc4 	movi	r3,-1
 2002b20:	10c00526 	beq	r2,r3,2002b38 <_fstat_r+0x48>
 2002b24:	dfc00217 	ldw	ra,8(sp)
 2002b28:	dc400117 	ldw	r17,4(sp)
 2002b2c:	dc000017 	ldw	r16,0(sp)
 2002b30:	dec00304 	addi	sp,sp,12
 2002b34:	f800283a 	ret
 2002b38:	80c00017 	ldw	r3,0(r16)
 2002b3c:	183ff926 	beq	r3,zero,2002b24 <_fstat_r+0x34>
 2002b40:	88c00015 	stw	r3,0(r17)
 2002b44:	dfc00217 	ldw	ra,8(sp)
 2002b48:	dc400117 	ldw	r17,4(sp)
 2002b4c:	dc000017 	ldw	r16,0(sp)
 2002b50:	dec00304 	addi	sp,sp,12
 2002b54:	f800283a 	ret

02002b58 <_isatty_r>:
 2002b58:	defffd04 	addi	sp,sp,-12
 2002b5c:	dc400115 	stw	r17,4(sp)
 2002b60:	dc000015 	stw	r16,0(sp)
 2002b64:	2023883a 	mov	r17,r4
 2002b68:	04008074 	movhi	r16,513
 2002b6c:	8424c204 	addi	r16,r16,-27896
 2002b70:	2809883a 	mov	r4,r5
 2002b74:	dfc00215 	stw	ra,8(sp)
 2002b78:	80000015 	stw	zero,0(r16)
 2002b7c:	2002f240 	call	2002f24 <isatty>
 2002b80:	00ffffc4 	movi	r3,-1
 2002b84:	10c00526 	beq	r2,r3,2002b9c <_isatty_r+0x44>
 2002b88:	dfc00217 	ldw	ra,8(sp)
 2002b8c:	dc400117 	ldw	r17,4(sp)
 2002b90:	dc000017 	ldw	r16,0(sp)
 2002b94:	dec00304 	addi	sp,sp,12
 2002b98:	f800283a 	ret
 2002b9c:	80c00017 	ldw	r3,0(r16)
 2002ba0:	183ff926 	beq	r3,zero,2002b88 <_isatty_r+0x30>
 2002ba4:	88c00015 	stw	r3,0(r17)
 2002ba8:	dfc00217 	ldw	ra,8(sp)
 2002bac:	dc400117 	ldw	r17,4(sp)
 2002bb0:	dc000017 	ldw	r16,0(sp)
 2002bb4:	dec00304 	addi	sp,sp,12
 2002bb8:	f800283a 	ret

02002bbc <_lseek_r>:
 2002bbc:	defffd04 	addi	sp,sp,-12
 2002bc0:	dc400115 	stw	r17,4(sp)
 2002bc4:	dc000015 	stw	r16,0(sp)
 2002bc8:	2023883a 	mov	r17,r4
 2002bcc:	04008074 	movhi	r16,513
 2002bd0:	8424c204 	addi	r16,r16,-27896
 2002bd4:	2809883a 	mov	r4,r5
 2002bd8:	300b883a 	mov	r5,r6
 2002bdc:	380d883a 	mov	r6,r7
 2002be0:	dfc00215 	stw	ra,8(sp)
 2002be4:	80000015 	stw	zero,0(r16)
 2002be8:	20031000 	call	2003100 <lseek>
 2002bec:	00ffffc4 	movi	r3,-1
 2002bf0:	10c00526 	beq	r2,r3,2002c08 <_lseek_r+0x4c>
 2002bf4:	dfc00217 	ldw	ra,8(sp)
 2002bf8:	dc400117 	ldw	r17,4(sp)
 2002bfc:	dc000017 	ldw	r16,0(sp)
 2002c00:	dec00304 	addi	sp,sp,12
 2002c04:	f800283a 	ret
 2002c08:	80c00017 	ldw	r3,0(r16)
 2002c0c:	183ff926 	beq	r3,zero,2002bf4 <_lseek_r+0x38>
 2002c10:	88c00015 	stw	r3,0(r17)
 2002c14:	dfc00217 	ldw	ra,8(sp)
 2002c18:	dc400117 	ldw	r17,4(sp)
 2002c1c:	dc000017 	ldw	r16,0(sp)
 2002c20:	dec00304 	addi	sp,sp,12
 2002c24:	f800283a 	ret

02002c28 <_read_r>:
 2002c28:	defffd04 	addi	sp,sp,-12
 2002c2c:	dc400115 	stw	r17,4(sp)
 2002c30:	dc000015 	stw	r16,0(sp)
 2002c34:	2023883a 	mov	r17,r4
 2002c38:	04008074 	movhi	r16,513
 2002c3c:	8424c204 	addi	r16,r16,-27896
 2002c40:	2809883a 	mov	r4,r5
 2002c44:	300b883a 	mov	r5,r6
 2002c48:	380d883a 	mov	r6,r7
 2002c4c:	dfc00215 	stw	ra,8(sp)
 2002c50:	80000015 	stw	zero,0(r16)
 2002c54:	20032d80 	call	20032d8 <read>
 2002c58:	00ffffc4 	movi	r3,-1
 2002c5c:	10c00526 	beq	r2,r3,2002c74 <_read_r+0x4c>
 2002c60:	dfc00217 	ldw	ra,8(sp)
 2002c64:	dc400117 	ldw	r17,4(sp)
 2002c68:	dc000017 	ldw	r16,0(sp)
 2002c6c:	dec00304 	addi	sp,sp,12
 2002c70:	f800283a 	ret
 2002c74:	80c00017 	ldw	r3,0(r16)
 2002c78:	183ff926 	beq	r3,zero,2002c60 <_read_r+0x38>
 2002c7c:	88c00015 	stw	r3,0(r17)
 2002c80:	dfc00217 	ldw	ra,8(sp)
 2002c84:	dc400117 	ldw	r17,4(sp)
 2002c88:	dc000017 	ldw	r16,0(sp)
 2002c8c:	dec00304 	addi	sp,sp,12
 2002c90:	f800283a 	ret

02002c94 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002c94:	defffe04 	addi	sp,sp,-8
 2002c98:	dfc00115 	stw	ra,4(sp)
 2002c9c:	df000015 	stw	fp,0(sp)
 2002ca0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002ca4:	00808034 	movhi	r2,512
 2002ca8:	109df704 	addi	r2,r2,30684
 2002cac:	10800017 	ldw	r2,0(r2)
 2002cb0:	10000526 	beq	r2,zero,2002cc8 <alt_get_errno+0x34>
 2002cb4:	00808034 	movhi	r2,512
 2002cb8:	109df704 	addi	r2,r2,30684
 2002cbc:	10800017 	ldw	r2,0(r2)
 2002cc0:	103ee83a 	callr	r2
 2002cc4:	00000206 	br	2002cd0 <alt_get_errno+0x3c>
 2002cc8:	00808074 	movhi	r2,513
 2002ccc:	10a4c204 	addi	r2,r2,-27896
}
 2002cd0:	e037883a 	mov	sp,fp
 2002cd4:	dfc00117 	ldw	ra,4(sp)
 2002cd8:	df000017 	ldw	fp,0(sp)
 2002cdc:	dec00204 	addi	sp,sp,8
 2002ce0:	f800283a 	ret

02002ce4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 2002ce4:	defffb04 	addi	sp,sp,-20
 2002ce8:	dfc00415 	stw	ra,16(sp)
 2002cec:	df000315 	stw	fp,12(sp)
 2002cf0:	df000304 	addi	fp,sp,12
 2002cf4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 2002cf8:	e0bfff17 	ldw	r2,-4(fp)
 2002cfc:	10000616 	blt	r2,zero,2002d18 <close+0x34>
 2002d00:	e0bfff17 	ldw	r2,-4(fp)
 2002d04:	10c00324 	muli	r3,r2,12
 2002d08:	00808034 	movhi	r2,512
 2002d0c:	10994504 	addi	r2,r2,25876
 2002d10:	1885883a 	add	r2,r3,r2
 2002d14:	00000106 	br	2002d1c <close+0x38>
 2002d18:	0005883a 	mov	r2,zero
 2002d1c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 2002d20:	e0bffd17 	ldw	r2,-12(fp)
 2002d24:	10001826 	beq	r2,zero,2002d88 <close+0xa4>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 2002d28:	e0bffd17 	ldw	r2,-12(fp)
 2002d2c:	10800017 	ldw	r2,0(r2)
 2002d30:	10800417 	ldw	r2,16(r2)
 2002d34:	10000626 	beq	r2,zero,2002d50 <close+0x6c>
 2002d38:	e0bffd17 	ldw	r2,-12(fp)
 2002d3c:	10800017 	ldw	r2,0(r2)
 2002d40:	10800417 	ldw	r2,16(r2)
 2002d44:	e13ffd17 	ldw	r4,-12(fp)
 2002d48:	103ee83a 	callr	r2
 2002d4c:	00000106 	br	2002d54 <close+0x70>
 2002d50:	0005883a 	mov	r2,zero
 2002d54:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 2002d58:	e13fff17 	ldw	r4,-4(fp)
 2002d5c:	20033c80 	call	20033c8 <alt_release_fd>
    if (rval < 0)
 2002d60:	e0bffe17 	ldw	r2,-8(fp)
 2002d64:	1000060e 	bge	r2,zero,2002d80 <close+0x9c>
    {
      ALT_ERRNO = -rval;
 2002d68:	2002c940 	call	2002c94 <alt_get_errno>
 2002d6c:	e0fffe17 	ldw	r3,-8(fp)
 2002d70:	00c7c83a 	sub	r3,zero,r3
 2002d74:	10c00015 	stw	r3,0(r2)
      return -1;
 2002d78:	00bfffc4 	movi	r2,-1
 2002d7c:	00000606 	br	2002d98 <close+0xb4>
    }
    return 0;
 2002d80:	0005883a 	mov	r2,zero
 2002d84:	00000406 	br	2002d98 <close+0xb4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002d88:	2002c940 	call	2002c94 <alt_get_errno>
 2002d8c:	00c01444 	movi	r3,81
 2002d90:	10c00015 	stw	r3,0(r2)
    return -1;
 2002d94:	00bfffc4 	movi	r2,-1
  }
}
 2002d98:	e037883a 	mov	sp,fp
 2002d9c:	dfc00117 	ldw	ra,4(sp)
 2002da0:	df000017 	ldw	fp,0(sp)
 2002da4:	dec00204 	addi	sp,sp,8
 2002da8:	f800283a 	ret

02002dac <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 2002dac:	defffc04 	addi	sp,sp,-16
 2002db0:	df000315 	stw	fp,12(sp)
 2002db4:	df000304 	addi	fp,sp,12
 2002db8:	e13ffd15 	stw	r4,-12(fp)
 2002dbc:	e17ffe15 	stw	r5,-8(fp)
 2002dc0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 2002dc4:	e0bfff17 	ldw	r2,-4(fp)
}
 2002dc8:	e037883a 	mov	sp,fp
 2002dcc:	df000017 	ldw	fp,0(sp)
 2002dd0:	dec00104 	addi	sp,sp,4
 2002dd4:	f800283a 	ret

02002dd8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002dd8:	defffe04 	addi	sp,sp,-8
 2002ddc:	dfc00115 	stw	ra,4(sp)
 2002de0:	df000015 	stw	fp,0(sp)
 2002de4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002de8:	00808034 	movhi	r2,512
 2002dec:	109df704 	addi	r2,r2,30684
 2002df0:	10800017 	ldw	r2,0(r2)
 2002df4:	10000526 	beq	r2,zero,2002e0c <alt_get_errno+0x34>
 2002df8:	00808034 	movhi	r2,512
 2002dfc:	109df704 	addi	r2,r2,30684
 2002e00:	10800017 	ldw	r2,0(r2)
 2002e04:	103ee83a 	callr	r2
 2002e08:	00000206 	br	2002e14 <alt_get_errno+0x3c>
 2002e0c:	00808074 	movhi	r2,513
 2002e10:	10a4c204 	addi	r2,r2,-27896
}
 2002e14:	e037883a 	mov	sp,fp
 2002e18:	dfc00117 	ldw	ra,4(sp)
 2002e1c:	df000017 	ldw	fp,0(sp)
 2002e20:	dec00204 	addi	sp,sp,8
 2002e24:	f800283a 	ret

02002e28 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 2002e28:	defffb04 	addi	sp,sp,-20
 2002e2c:	dfc00415 	stw	ra,16(sp)
 2002e30:	df000315 	stw	fp,12(sp)
 2002e34:	df000304 	addi	fp,sp,12
 2002e38:	e13ffe15 	stw	r4,-8(fp)
 2002e3c:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2002e40:	e0bffe17 	ldw	r2,-8(fp)
 2002e44:	10000616 	blt	r2,zero,2002e60 <fstat+0x38>
 2002e48:	e0bffe17 	ldw	r2,-8(fp)
 2002e4c:	10c00324 	muli	r3,r2,12
 2002e50:	00808034 	movhi	r2,512
 2002e54:	10994504 	addi	r2,r2,25876
 2002e58:	1885883a 	add	r2,r3,r2
 2002e5c:	00000106 	br	2002e64 <fstat+0x3c>
 2002e60:	0005883a 	mov	r2,zero
 2002e64:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 2002e68:	e0bffd17 	ldw	r2,-12(fp)
 2002e6c:	10001026 	beq	r2,zero,2002eb0 <fstat+0x88>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 2002e70:	e0bffd17 	ldw	r2,-12(fp)
 2002e74:	10800017 	ldw	r2,0(r2)
 2002e78:	10800817 	ldw	r2,32(r2)
 2002e7c:	10000726 	beq	r2,zero,2002e9c <fstat+0x74>
    {
      return fd->dev->fstat(fd, st);
 2002e80:	e0bffd17 	ldw	r2,-12(fp)
 2002e84:	10800017 	ldw	r2,0(r2)
 2002e88:	10800817 	ldw	r2,32(r2)
 2002e8c:	e13ffd17 	ldw	r4,-12(fp)
 2002e90:	e17fff17 	ldw	r5,-4(fp)
 2002e94:	103ee83a 	callr	r2
 2002e98:	00000906 	br	2002ec0 <fstat+0x98>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 2002e9c:	e0bfff17 	ldw	r2,-4(fp)
 2002ea0:	00c80004 	movi	r3,8192
 2002ea4:	10c00115 	stw	r3,4(r2)
      return 0;
 2002ea8:	0005883a 	mov	r2,zero
 2002eac:	00000406 	br	2002ec0 <fstat+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002eb0:	2002dd80 	call	2002dd8 <alt_get_errno>
 2002eb4:	00c01444 	movi	r3,81
 2002eb8:	10c00015 	stw	r3,0(r2)
    return -1;
 2002ebc:	00bfffc4 	movi	r2,-1
  }
}
 2002ec0:	e037883a 	mov	sp,fp
 2002ec4:	dfc00117 	ldw	ra,4(sp)
 2002ec8:	df000017 	ldw	fp,0(sp)
 2002ecc:	dec00204 	addi	sp,sp,8
 2002ed0:	f800283a 	ret

02002ed4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2002ed4:	defffe04 	addi	sp,sp,-8
 2002ed8:	dfc00115 	stw	ra,4(sp)
 2002edc:	df000015 	stw	fp,0(sp)
 2002ee0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2002ee4:	00808034 	movhi	r2,512
 2002ee8:	109df704 	addi	r2,r2,30684
 2002eec:	10800017 	ldw	r2,0(r2)
 2002ef0:	10000526 	beq	r2,zero,2002f08 <alt_get_errno+0x34>
 2002ef4:	00808034 	movhi	r2,512
 2002ef8:	109df704 	addi	r2,r2,30684
 2002efc:	10800017 	ldw	r2,0(r2)
 2002f00:	103ee83a 	callr	r2
 2002f04:	00000206 	br	2002f10 <alt_get_errno+0x3c>
 2002f08:	00808074 	movhi	r2,513
 2002f0c:	10a4c204 	addi	r2,r2,-27896
}
 2002f10:	e037883a 	mov	sp,fp
 2002f14:	dfc00117 	ldw	ra,4(sp)
 2002f18:	df000017 	ldw	fp,0(sp)
 2002f1c:	dec00204 	addi	sp,sp,8
 2002f20:	f800283a 	ret

02002f24 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 2002f24:	deffed04 	addi	sp,sp,-76
 2002f28:	dfc01215 	stw	ra,72(sp)
 2002f2c:	df001115 	stw	fp,68(sp)
 2002f30:	df001104 	addi	fp,sp,68
 2002f34:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2002f38:	e0bfff17 	ldw	r2,-4(fp)
 2002f3c:	10000616 	blt	r2,zero,2002f58 <isatty+0x34>
 2002f40:	e0bfff17 	ldw	r2,-4(fp)
 2002f44:	10c00324 	muli	r3,r2,12
 2002f48:	00808034 	movhi	r2,512
 2002f4c:	10994504 	addi	r2,r2,25876
 2002f50:	1885883a 	add	r2,r3,r2
 2002f54:	00000106 	br	2002f5c <isatty+0x38>
 2002f58:	0005883a 	mov	r2,zero
 2002f5c:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 2002f60:	e0bfef17 	ldw	r2,-68(fp)
 2002f64:	10000e26 	beq	r2,zero,2002fa0 <isatty+0x7c>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 2002f68:	e0bfef17 	ldw	r2,-68(fp)
 2002f6c:	10800017 	ldw	r2,0(r2)
 2002f70:	10800817 	ldw	r2,32(r2)
 2002f74:	1000021e 	bne	r2,zero,2002f80 <isatty+0x5c>
    {
      return 1;
 2002f78:	00800044 	movi	r2,1
 2002f7c:	00000c06 	br	2002fb0 <isatty+0x8c>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 2002f80:	e0bff004 	addi	r2,fp,-64
 2002f84:	e13fff17 	ldw	r4,-4(fp)
 2002f88:	100b883a 	mov	r5,r2
 2002f8c:	2002e280 	call	2002e28 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 2002f90:	e0bff117 	ldw	r2,-60(fp)
 2002f94:	10880020 	cmpeqi	r2,r2,8192
 2002f98:	10803fcc 	andi	r2,r2,255
 2002f9c:	00000406 	br	2002fb0 <isatty+0x8c>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 2002fa0:	2002ed40 	call	2002ed4 <alt_get_errno>
 2002fa4:	00c01444 	movi	r3,81
 2002fa8:	10c00015 	stw	r3,0(r2)
    return 0;
 2002fac:	0005883a 	mov	r2,zero
  }
}
 2002fb0:	e037883a 	mov	sp,fp
 2002fb4:	dfc00117 	ldw	ra,4(sp)
 2002fb8:	df000017 	ldw	fp,0(sp)
 2002fbc:	dec00204 	addi	sp,sp,8
 2002fc0:	f800283a 	ret

02002fc4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 2002fc4:	defffc04 	addi	sp,sp,-16
 2002fc8:	df000315 	stw	fp,12(sp)
 2002fcc:	df000304 	addi	fp,sp,12
 2002fd0:	e13ffd15 	stw	r4,-12(fp)
 2002fd4:	e17ffe15 	stw	r5,-8(fp)
 2002fd8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 2002fdc:	e0fffe17 	ldw	r3,-8(fp)
 2002fe0:	e0bffd17 	ldw	r2,-12(fp)
 2002fe4:	18800e26 	beq	r3,r2,2003020 <alt_load_section+0x5c>
  {
    while( to != end )
 2002fe8:	00000a06 	br	2003014 <alt_load_section+0x50>
    {
      *to++ = *from++;
 2002fec:	e0bffd17 	ldw	r2,-12(fp)
 2002ff0:	10c00017 	ldw	r3,0(r2)
 2002ff4:	e0bffe17 	ldw	r2,-8(fp)
 2002ff8:	10c00015 	stw	r3,0(r2)
 2002ffc:	e0bffe17 	ldw	r2,-8(fp)
 2003000:	10800104 	addi	r2,r2,4
 2003004:	e0bffe15 	stw	r2,-8(fp)
 2003008:	e0bffd17 	ldw	r2,-12(fp)
 200300c:	10800104 	addi	r2,r2,4
 2003010:	e0bffd15 	stw	r2,-12(fp)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2003014:	e0fffe17 	ldw	r3,-8(fp)
 2003018:	e0bfff17 	ldw	r2,-4(fp)
 200301c:	18bff31e 	bne	r3,r2,2002fec <alt_load_section+0x28>
    {
      *to++ = *from++;
    }
  }
}
 2003020:	e037883a 	mov	sp,fp
 2003024:	df000017 	ldw	fp,0(sp)
 2003028:	dec00104 	addi	sp,sp,4
 200302c:	f800283a 	ret

02003030 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2003030:	defffe04 	addi	sp,sp,-8
 2003034:	dfc00115 	stw	ra,4(sp)
 2003038:	df000015 	stw	fp,0(sp)
 200303c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2003040:	01008034 	movhi	r4,512
 2003044:	211dfc04 	addi	r4,r4,30704
 2003048:	01408034 	movhi	r5,512
 200304c:	29573904 	addi	r5,r5,23780
 2003050:	01808034 	movhi	r6,512
 2003054:	319dfc04 	addi	r6,r6,30704
 2003058:	2002fc40 	call	2002fc4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 200305c:	01008034 	movhi	r4,512
 2003060:	21000804 	addi	r4,r4,32
 2003064:	01408034 	movhi	r5,512
 2003068:	29400804 	addi	r5,r5,32
 200306c:	01808034 	movhi	r6,512
 2003070:	31806e04 	addi	r6,r6,440
 2003074:	2002fc40 	call	2002fc4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 2003078:	01008034 	movhi	r4,512
 200307c:	21172404 	addi	r4,r4,23696
 2003080:	01408034 	movhi	r5,512
 2003084:	29572404 	addi	r5,r5,23696
 2003088:	01808034 	movhi	r6,512
 200308c:	31973904 	addi	r6,r6,23780
 2003090:	2002fc40 	call	2002fc4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 2003094:	2004b900 	call	2004b90 <alt_dcache_flush_all>
  alt_icache_flush_all();
 2003098:	2004d7c0 	call	2004d7c <alt_icache_flush_all>
}
 200309c:	e037883a 	mov	sp,fp
 20030a0:	dfc00117 	ldw	ra,4(sp)
 20030a4:	df000017 	ldw	fp,0(sp)
 20030a8:	dec00204 	addi	sp,sp,8
 20030ac:	f800283a 	ret

020030b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20030b0:	defffe04 	addi	sp,sp,-8
 20030b4:	dfc00115 	stw	ra,4(sp)
 20030b8:	df000015 	stw	fp,0(sp)
 20030bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20030c0:	00808034 	movhi	r2,512
 20030c4:	109df704 	addi	r2,r2,30684
 20030c8:	10800017 	ldw	r2,0(r2)
 20030cc:	10000526 	beq	r2,zero,20030e4 <alt_get_errno+0x34>
 20030d0:	00808034 	movhi	r2,512
 20030d4:	109df704 	addi	r2,r2,30684
 20030d8:	10800017 	ldw	r2,0(r2)
 20030dc:	103ee83a 	callr	r2
 20030e0:	00000206 	br	20030ec <alt_get_errno+0x3c>
 20030e4:	00808074 	movhi	r2,513
 20030e8:	10a4c204 	addi	r2,r2,-27896
}
 20030ec:	e037883a 	mov	sp,fp
 20030f0:	dfc00117 	ldw	ra,4(sp)
 20030f4:	df000017 	ldw	fp,0(sp)
 20030f8:	dec00204 	addi	sp,sp,8
 20030fc:	f800283a 	ret

02003100 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 2003100:	defff904 	addi	sp,sp,-28
 2003104:	dfc00615 	stw	ra,24(sp)
 2003108:	df000515 	stw	fp,20(sp)
 200310c:	df000504 	addi	fp,sp,20
 2003110:	e13ffd15 	stw	r4,-12(fp)
 2003114:	e17ffe15 	stw	r5,-8(fp)
 2003118:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 200311c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003120:	e0bffd17 	ldw	r2,-12(fp)
 2003124:	10000616 	blt	r2,zero,2003140 <lseek+0x40>
 2003128:	e0bffd17 	ldw	r2,-12(fp)
 200312c:	10c00324 	muli	r3,r2,12
 2003130:	00808034 	movhi	r2,512
 2003134:	10994504 	addi	r2,r2,25876
 2003138:	1885883a 	add	r2,r3,r2
 200313c:	00000106 	br	2003144 <lseek+0x44>
 2003140:	0005883a 	mov	r2,zero
 2003144:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 2003148:	e0bffc17 	ldw	r2,-16(fp)
 200314c:	10001026 	beq	r2,zero,2003190 <lseek+0x90>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 2003150:	e0bffc17 	ldw	r2,-16(fp)
 2003154:	10800017 	ldw	r2,0(r2)
 2003158:	10800717 	ldw	r2,28(r2)
 200315c:	10000926 	beq	r2,zero,2003184 <lseek+0x84>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 2003160:	e0bffc17 	ldw	r2,-16(fp)
 2003164:	10800017 	ldw	r2,0(r2)
 2003168:	10800717 	ldw	r2,28(r2)
 200316c:	e13ffc17 	ldw	r4,-16(fp)
 2003170:	e17ffe17 	ldw	r5,-8(fp)
 2003174:	e1bfff17 	ldw	r6,-4(fp)
 2003178:	103ee83a 	callr	r2
 200317c:	e0bffb15 	stw	r2,-20(fp)
 2003180:	00000506 	br	2003198 <lseek+0x98>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 2003184:	00bfde84 	movi	r2,-134
 2003188:	e0bffb15 	stw	r2,-20(fp)
 200318c:	00000206 	br	2003198 <lseek+0x98>
    }
  }
  else  
  {
    rc = -EBADFD;
 2003190:	00bfebc4 	movi	r2,-81
 2003194:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 2003198:	e0bffb17 	ldw	r2,-20(fp)
 200319c:	1000060e 	bge	r2,zero,20031b8 <lseek+0xb8>
  {
    ALT_ERRNO = -rc;
 20031a0:	20030b00 	call	20030b0 <alt_get_errno>
 20031a4:	e0fffb17 	ldw	r3,-20(fp)
 20031a8:	00c7c83a 	sub	r3,zero,r3
 20031ac:	10c00015 	stw	r3,0(r2)
    rc = -1;
 20031b0:	00bfffc4 	movi	r2,-1
 20031b4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 20031b8:	e0bffb17 	ldw	r2,-20(fp)
}
 20031bc:	e037883a 	mov	sp,fp
 20031c0:	dfc00117 	ldw	ra,4(sp)
 20031c4:	df000017 	ldw	fp,0(sp)
 20031c8:	dec00204 	addi	sp,sp,8
 20031cc:	f800283a 	ret

020031d0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 20031d0:	defffd04 	addi	sp,sp,-12
 20031d4:	dfc00215 	stw	ra,8(sp)
 20031d8:	df000115 	stw	fp,4(sp)
 20031dc:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 20031e0:	0009883a 	mov	r4,zero
 20031e4:	200364c0 	call	200364c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 20031e8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 20031ec:	20036800 	call	2003680 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 20031f0:	01008034 	movhi	r4,512
 20031f4:	21172e04 	addi	r4,r4,23736
 20031f8:	01408034 	movhi	r5,512
 20031fc:	29572e04 	addi	r5,r5,23736
 2003200:	01808034 	movhi	r6,512
 2003204:	31972e04 	addi	r6,r6,23736
 2003208:	20051340 	call	2005134 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 200320c:	2004cc40 	call	2004cc4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 2003210:	01008034 	movhi	r4,512
 2003214:	21134804 	addi	r4,r4,19744
 2003218:	20058bc0 	call	20058bc <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 200321c:	d126d517 	ldw	r4,-25772(gp)
 2003220:	d0e6d617 	ldw	r3,-25768(gp)
 2003224:	d0a6d717 	ldw	r2,-25764(gp)
 2003228:	180b883a 	mov	r5,r3
 200322c:	100d883a 	mov	r6,r2
 2003230:	20002040 	call	2000204 <main>
 2003234:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 2003238:	01000044 	movi	r4,1
 200323c:	2002ce40 	call	2002ce4 <close>
  exit (result);
 2003240:	e13fff17 	ldw	r4,-4(fp)
 2003244:	20058d00 	call	20058d0 <exit>

02003248 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 2003248:	defffe04 	addi	sp,sp,-8
 200324c:	df000115 	stw	fp,4(sp)
 2003250:	df000104 	addi	fp,sp,4
 2003254:	e13fff15 	stw	r4,-4(fp)
}
 2003258:	e037883a 	mov	sp,fp
 200325c:	df000017 	ldw	fp,0(sp)
 2003260:	dec00104 	addi	sp,sp,4
 2003264:	f800283a 	ret

02003268 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 2003268:	defffe04 	addi	sp,sp,-8
 200326c:	df000115 	stw	fp,4(sp)
 2003270:	df000104 	addi	fp,sp,4
 2003274:	e13fff15 	stw	r4,-4(fp)
}
 2003278:	e037883a 	mov	sp,fp
 200327c:	df000017 	ldw	fp,0(sp)
 2003280:	dec00104 	addi	sp,sp,4
 2003284:	f800283a 	ret

02003288 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2003288:	defffe04 	addi	sp,sp,-8
 200328c:	dfc00115 	stw	ra,4(sp)
 2003290:	df000015 	stw	fp,0(sp)
 2003294:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2003298:	00808034 	movhi	r2,512
 200329c:	109df704 	addi	r2,r2,30684
 20032a0:	10800017 	ldw	r2,0(r2)
 20032a4:	10000526 	beq	r2,zero,20032bc <alt_get_errno+0x34>
 20032a8:	00808034 	movhi	r2,512
 20032ac:	109df704 	addi	r2,r2,30684
 20032b0:	10800017 	ldw	r2,0(r2)
 20032b4:	103ee83a 	callr	r2
 20032b8:	00000206 	br	20032c4 <alt_get_errno+0x3c>
 20032bc:	00808074 	movhi	r2,513
 20032c0:	10a4c204 	addi	r2,r2,-27896
}
 20032c4:	e037883a 	mov	sp,fp
 20032c8:	dfc00117 	ldw	ra,4(sp)
 20032cc:	df000017 	ldw	fp,0(sp)
 20032d0:	dec00204 	addi	sp,sp,8
 20032d4:	f800283a 	ret

020032d8 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 20032d8:	defff904 	addi	sp,sp,-28
 20032dc:	dfc00615 	stw	ra,24(sp)
 20032e0:	df000515 	stw	fp,20(sp)
 20032e4:	df000504 	addi	fp,sp,20
 20032e8:	e13ffd15 	stw	r4,-12(fp)
 20032ec:	e17ffe15 	stw	r5,-8(fp)
 20032f0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 20032f4:	e0bffd17 	ldw	r2,-12(fp)
 20032f8:	10000616 	blt	r2,zero,2003314 <read+0x3c>
 20032fc:	e0bffd17 	ldw	r2,-12(fp)
 2003300:	10c00324 	muli	r3,r2,12
 2003304:	00808034 	movhi	r2,512
 2003308:	10994504 	addi	r2,r2,25876
 200330c:	1885883a 	add	r2,r3,r2
 2003310:	00000106 	br	2003318 <read+0x40>
 2003314:	0005883a 	mov	r2,zero
 2003318:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200331c:	e0bffb17 	ldw	r2,-20(fp)
 2003320:	10002026 	beq	r2,zero,20033a4 <read+0xcc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003324:	e0bffb17 	ldw	r2,-20(fp)
 2003328:	10800217 	ldw	r2,8(r2)
 200332c:	108000cc 	andi	r2,r2,3
 2003330:	10800060 	cmpeqi	r2,r2,1
 2003334:	1000171e 	bne	r2,zero,2003394 <read+0xbc>
        (fd->dev->read))
 2003338:	e0bffb17 	ldw	r2,-20(fp)
 200333c:	10800017 	ldw	r2,0(r2)
 2003340:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 2003344:	10001326 	beq	r2,zero,2003394 <read+0xbc>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 2003348:	e0bffb17 	ldw	r2,-20(fp)
 200334c:	10800017 	ldw	r2,0(r2)
 2003350:	10c00517 	ldw	r3,20(r2)
 2003354:	e0bfff17 	ldw	r2,-4(fp)
 2003358:	e13ffb17 	ldw	r4,-20(fp)
 200335c:	e17ffe17 	ldw	r5,-8(fp)
 2003360:	100d883a 	mov	r6,r2
 2003364:	183ee83a 	callr	r3
 2003368:	e0bffc15 	stw	r2,-16(fp)
 200336c:	e0bffc17 	ldw	r2,-16(fp)
 2003370:	1000060e 	bge	r2,zero,200338c <read+0xb4>
        {
          ALT_ERRNO = -rval;
 2003374:	20032880 	call	2003288 <alt_get_errno>
 2003378:	e0fffc17 	ldw	r3,-16(fp)
 200337c:	00c7c83a 	sub	r3,zero,r3
 2003380:	10c00015 	stw	r3,0(r2)
          return -1;
 2003384:	00bfffc4 	movi	r2,-1
 2003388:	00000a06 	br	20033b4 <read+0xdc>
        }
        return rval;
 200338c:	e0bffc17 	ldw	r2,-16(fp)
 2003390:	00000806 	br	20033b4 <read+0xdc>
      }
      else
      {
        ALT_ERRNO = EACCES;
 2003394:	20032880 	call	2003288 <alt_get_errno>
 2003398:	00c00344 	movi	r3,13
 200339c:	10c00015 	stw	r3,0(r2)
 20033a0:	00000306 	br	20033b0 <read+0xd8>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 20033a4:	20032880 	call	2003288 <alt_get_errno>
 20033a8:	00c01444 	movi	r3,81
 20033ac:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 20033b0:	00bfffc4 	movi	r2,-1
}
 20033b4:	e037883a 	mov	sp,fp
 20033b8:	dfc00117 	ldw	ra,4(sp)
 20033bc:	df000017 	ldw	fp,0(sp)
 20033c0:	dec00204 	addi	sp,sp,8
 20033c4:	f800283a 	ret

020033c8 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 20033c8:	defffe04 	addi	sp,sp,-8
 20033cc:	df000115 	stw	fp,4(sp)
 20033d0:	df000104 	addi	fp,sp,4
 20033d4:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
 20033d8:	e0bfff17 	ldw	r2,-4(fp)
 20033dc:	108000d0 	cmplti	r2,r2,3
 20033e0:	10000d1e 	bne	r2,zero,2003418 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
 20033e4:	00c08034 	movhi	r3,512
 20033e8:	18d94504 	addi	r3,r3,25876
 20033ec:	e0bfff17 	ldw	r2,-4(fp)
 20033f0:	10800324 	muli	r2,r2,12
 20033f4:	1885883a 	add	r2,r3,r2
 20033f8:	10800204 	addi	r2,r2,8
 20033fc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 2003400:	00c08034 	movhi	r3,512
 2003404:	18d94504 	addi	r3,r3,25876
 2003408:	e0bfff17 	ldw	r2,-4(fp)
 200340c:	10800324 	muli	r2,r2,12
 2003410:	1885883a 	add	r2,r3,r2
 2003414:	10000015 	stw	zero,0(r2)
  }
}
 2003418:	e037883a 	mov	sp,fp
 200341c:	df000017 	ldw	fp,0(sp)
 2003420:	dec00104 	addi	sp,sp,4
 2003424:	f800283a 	ret

02003428 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 2003428:	defff904 	addi	sp,sp,-28
 200342c:	df000615 	stw	fp,24(sp)
 2003430:	df000604 	addi	fp,sp,24
 2003434:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003438:	0005303a 	rdctl	r2,status
 200343c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003440:	e0fffc17 	ldw	r3,-16(fp)
 2003444:	00bfff84 	movi	r2,-2
 2003448:	1884703a 	and	r2,r3,r2
 200344c:	1001703a 	wrctl	status,r2
  
  return context;
 2003450:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 2003454:	e0bffa15 	stw	r2,-24(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 2003458:	d0a00a17 	ldw	r2,-32728(gp)
 200345c:	10c000c4 	addi	r3,r2,3
 2003460:	00bfff04 	movi	r2,-4
 2003464:	1884703a 	and	r2,r3,r2
 2003468:	d0a00a15 	stw	r2,-32728(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 200346c:	d0e00a17 	ldw	r3,-32728(gp)
 2003470:	e0bfff17 	ldw	r2,-4(fp)
 2003474:	1885883a 	add	r2,r3,r2
 2003478:	00c10034 	movhi	r3,1024
 200347c:	18c00004 	addi	r3,r3,0
 2003480:	1880062e 	bgeu	r3,r2,200349c <sbrk+0x74>
 2003484:	e0bffa17 	ldw	r2,-24(fp)
 2003488:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200348c:	e0bffd17 	ldw	r2,-12(fp)
 2003490:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 2003494:	00bfffc4 	movi	r2,-1
 2003498:	00000b06 	br	20034c8 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 200349c:	d0a00a17 	ldw	r2,-32728(gp)
 20034a0:	e0bffb15 	stw	r2,-20(fp)
  heap_end += incr; 
 20034a4:	d0e00a17 	ldw	r3,-32728(gp)
 20034a8:	e0bfff17 	ldw	r2,-4(fp)
 20034ac:	1885883a 	add	r2,r3,r2
 20034b0:	d0a00a15 	stw	r2,-32728(gp)
 20034b4:	e0bffa17 	ldw	r2,-24(fp)
 20034b8:	e0bffe15 	stw	r2,-8(fp)
 20034bc:	e0bffe17 	ldw	r2,-8(fp)
 20034c0:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 20034c4:	e0bffb17 	ldw	r2,-20(fp)
} 
 20034c8:	e037883a 	mov	sp,fp
 20034cc:	df000017 	ldw	fp,0(sp)
 20034d0:	dec00104 	addi	sp,sp,4
 20034d4:	f800283a 	ret

020034d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20034d8:	defffe04 	addi	sp,sp,-8
 20034dc:	dfc00115 	stw	ra,4(sp)
 20034e0:	df000015 	stw	fp,0(sp)
 20034e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20034e8:	00808034 	movhi	r2,512
 20034ec:	109df704 	addi	r2,r2,30684
 20034f0:	10800017 	ldw	r2,0(r2)
 20034f4:	10000526 	beq	r2,zero,200350c <alt_get_errno+0x34>
 20034f8:	00808034 	movhi	r2,512
 20034fc:	109df704 	addi	r2,r2,30684
 2003500:	10800017 	ldw	r2,0(r2)
 2003504:	103ee83a 	callr	r2
 2003508:	00000206 	br	2003514 <alt_get_errno+0x3c>
 200350c:	00808074 	movhi	r2,513
 2003510:	10a4c204 	addi	r2,r2,-27896
}
 2003514:	e037883a 	mov	sp,fp
 2003518:	dfc00117 	ldw	ra,4(sp)
 200351c:	df000017 	ldw	fp,0(sp)
 2003520:	dec00204 	addi	sp,sp,8
 2003524:	f800283a 	ret

02003528 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 2003528:	defff904 	addi	sp,sp,-28
 200352c:	dfc00615 	stw	ra,24(sp)
 2003530:	df000515 	stw	fp,20(sp)
 2003534:	df000504 	addi	fp,sp,20
 2003538:	e13ffd15 	stw	r4,-12(fp)
 200353c:	e17ffe15 	stw	r5,-8(fp)
 2003540:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 2003544:	e0bffd17 	ldw	r2,-12(fp)
 2003548:	10000616 	blt	r2,zero,2003564 <write+0x3c>
 200354c:	e0bffd17 	ldw	r2,-12(fp)
 2003550:	10c00324 	muli	r3,r2,12
 2003554:	00808034 	movhi	r2,512
 2003558:	10994504 	addi	r2,r2,25876
 200355c:	1885883a 	add	r2,r3,r2
 2003560:	00000106 	br	2003568 <write+0x40>
 2003564:	0005883a 	mov	r2,zero
 2003568:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 200356c:	e0bffb17 	ldw	r2,-20(fp)
 2003570:	10001f26 	beq	r2,zero,20035f0 <write+0xc8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 2003574:	e0bffb17 	ldw	r2,-20(fp)
 2003578:	10800217 	ldw	r2,8(r2)
 200357c:	108000cc 	andi	r2,r2,3
 2003580:	10001726 	beq	r2,zero,20035e0 <write+0xb8>
 2003584:	e0bffb17 	ldw	r2,-20(fp)
 2003588:	10800017 	ldw	r2,0(r2)
 200358c:	10800617 	ldw	r2,24(r2)
 2003590:	10001326 	beq	r2,zero,20035e0 <write+0xb8>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 2003594:	e0bffb17 	ldw	r2,-20(fp)
 2003598:	10800017 	ldw	r2,0(r2)
 200359c:	10c00617 	ldw	r3,24(r2)
 20035a0:	e0bfff17 	ldw	r2,-4(fp)
 20035a4:	e13ffb17 	ldw	r4,-20(fp)
 20035a8:	e17ffe17 	ldw	r5,-8(fp)
 20035ac:	100d883a 	mov	r6,r2
 20035b0:	183ee83a 	callr	r3
 20035b4:	e0bffc15 	stw	r2,-16(fp)
 20035b8:	e0bffc17 	ldw	r2,-16(fp)
 20035bc:	1000060e 	bge	r2,zero,20035d8 <write+0xb0>
      {
        ALT_ERRNO = -rval;
 20035c0:	20034d80 	call	20034d8 <alt_get_errno>
 20035c4:	e0fffc17 	ldw	r3,-16(fp)
 20035c8:	00c7c83a 	sub	r3,zero,r3
 20035cc:	10c00015 	stw	r3,0(r2)
        return -1;
 20035d0:	00bfffc4 	movi	r2,-1
 20035d4:	00000a06 	br	2003600 <write+0xd8>
      }
      return rval;
 20035d8:	e0bffc17 	ldw	r2,-16(fp)
 20035dc:	00000806 	br	2003600 <write+0xd8>
    }
    else
    {
      ALT_ERRNO = EACCES;
 20035e0:	20034d80 	call	20034d8 <alt_get_errno>
 20035e4:	00c00344 	movi	r3,13
 20035e8:	10c00015 	stw	r3,0(r2)
 20035ec:	00000306 	br	20035fc <write+0xd4>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 20035f0:	20034d80 	call	20034d8 <alt_get_errno>
 20035f4:	00c01444 	movi	r3,81
 20035f8:	10c00015 	stw	r3,0(r2)
  }
  return -1;
 20035fc:	00bfffc4 	movi	r2,-1
}
 2003600:	e037883a 	mov	sp,fp
 2003604:	dfc00117 	ldw	ra,4(sp)
 2003608:	df000017 	ldw	fp,0(sp)
 200360c:	dec00204 	addi	sp,sp,8
 2003610:	f800283a 	ret

02003614 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 2003614:	defffd04 	addi	sp,sp,-12
 2003618:	dfc00215 	stw	ra,8(sp)
 200361c:	df000115 	stw	fp,4(sp)
 2003620:	df000104 	addi	fp,sp,4
 2003624:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 2003628:	e13fff17 	ldw	r4,-4(fp)
 200362c:	01408034 	movhi	r5,512
 2003630:	295df404 	addi	r5,r5,30672
 2003634:	2004c240 	call	2004c24 <alt_dev_llist_insert>
}
 2003638:	e037883a 	mov	sp,fp
 200363c:	dfc00117 	ldw	ra,4(sp)
 2003640:	df000017 	ldw	fp,0(sp)
 2003644:	dec00204 	addi	sp,sp,8
 2003648:	f800283a 	ret

0200364c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 200364c:	defffd04 	addi	sp,sp,-12
 2003650:	dfc00215 	stw	ra,8(sp)
 2003654:	df000115 	stw	fp,4(sp)
 2003658:	df000104 	addi	fp,sp,4
 200365c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( CPU, CPU);
 2003660:	20055b80 	call	20055b8 <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts ()
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 2003664:	00800044 	movi	r2,1
 2003668:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 200366c:	e037883a 	mov	sp,fp
 2003670:	dfc00117 	ldw	ra,4(sp)
 2003674:	df000017 	ldw	fp,0(sp)
 2003678:	dec00204 	addi	sp,sp,8
 200367c:	f800283a 	ret

02003680 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 2003680:	defffe04 	addi	sp,sp,-8
 2003684:	dfc00115 	stw	ra,4(sp)
 2003688:	df000015 	stw	fp,0(sp)
 200368c:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, JTAG_UART);
 2003690:	01008034 	movhi	r4,512
 2003694:	2119af04 	addi	r4,r4,26300
 2003698:	000b883a 	mov	r5,zero
 200369c:	01800044 	movi	r6,1
 20036a0:	200384c0 	call	200384c <altera_avalon_jtag_uart_init>
 20036a4:	01008034 	movhi	r4,512
 20036a8:	2119a504 	addi	r4,r4,26260
 20036ac:	20036140 	call	2003614 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS, sysid_qsys);
 20036b0:	0001883a 	nop
    ALTERA_AVALON_UART_INIT ( UART, UART);
 20036b4:	01008034 	movhi	r4,512
 20036b8:	211dc704 	addi	r4,r4,30492
 20036bc:	000b883a 	mov	r5,zero
 20036c0:	000d883a 	mov	r6,zero
 20036c4:	200425c0 	call	200425c <altera_avalon_uart_init>
 20036c8:	01008034 	movhi	r4,512
 20036cc:	211dbd04 	addi	r4,r4,30452
 20036d0:	20036140 	call	2003614 <alt_dev_reg>
}
 20036d4:	e037883a 	mov	sp,fp
 20036d8:	dfc00117 	ldw	ra,4(sp)
 20036dc:	df000017 	ldw	fp,0(sp)
 20036e0:	dec00204 	addi	sp,sp,8
 20036e4:	f800283a 	ret

020036e8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 20036e8:	defffa04 	addi	sp,sp,-24
 20036ec:	dfc00515 	stw	ra,20(sp)
 20036f0:	df000415 	stw	fp,16(sp)
 20036f4:	df000404 	addi	fp,sp,16
 20036f8:	e13ffd15 	stw	r4,-12(fp)
 20036fc:	e17ffe15 	stw	r5,-8(fp)
 2003700:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003704:	e0bffd17 	ldw	r2,-12(fp)
 2003708:	10800017 	ldw	r2,0(r2)
 200370c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 2003710:	e0bffc17 	ldw	r2,-16(fp)
 2003714:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2003718:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 200371c:	10800217 	ldw	r2,8(r2)
 2003720:	1809883a 	mov	r4,r3
 2003724:	e17ffe17 	ldw	r5,-8(fp)
 2003728:	e1bfff17 	ldw	r6,-4(fp)
 200372c:	100f883a 	mov	r7,r2
 2003730:	2003d100 	call	2003d10 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 2003734:	e037883a 	mov	sp,fp
 2003738:	dfc00117 	ldw	ra,4(sp)
 200373c:	df000017 	ldw	fp,0(sp)
 2003740:	dec00204 	addi	sp,sp,8
 2003744:	f800283a 	ret

02003748 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 2003748:	defffa04 	addi	sp,sp,-24
 200374c:	dfc00515 	stw	ra,20(sp)
 2003750:	df000415 	stw	fp,16(sp)
 2003754:	df000404 	addi	fp,sp,16
 2003758:	e13ffd15 	stw	r4,-12(fp)
 200375c:	e17ffe15 	stw	r5,-8(fp)
 2003760:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 2003764:	e0bffd17 	ldw	r2,-12(fp)
 2003768:	10800017 	ldw	r2,0(r2)
 200376c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 2003770:	e0bffc17 	ldw	r2,-16(fp)
 2003774:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 2003778:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 200377c:	10800217 	ldw	r2,8(r2)
 2003780:	1809883a 	mov	r4,r3
 2003784:	e17ffe17 	ldw	r5,-8(fp)
 2003788:	e1bfff17 	ldw	r6,-4(fp)
 200378c:	100f883a 	mov	r7,r2
 2003790:	2003f280 	call	2003f28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 2003794:	e037883a 	mov	sp,fp
 2003798:	dfc00117 	ldw	ra,4(sp)
 200379c:	df000017 	ldw	fp,0(sp)
 20037a0:	dec00204 	addi	sp,sp,8
 20037a4:	f800283a 	ret

020037a8 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 20037a8:	defffc04 	addi	sp,sp,-16
 20037ac:	dfc00315 	stw	ra,12(sp)
 20037b0:	df000215 	stw	fp,8(sp)
 20037b4:	df000204 	addi	fp,sp,8
 20037b8:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 20037bc:	e0bfff17 	ldw	r2,-4(fp)
 20037c0:	10800017 	ldw	r2,0(r2)
 20037c4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 20037c8:	e0bffe17 	ldw	r2,-8(fp)
 20037cc:	10c00a04 	addi	r3,r2,40
 20037d0:	e0bfff17 	ldw	r2,-4(fp)
 20037d4:	10800217 	ldw	r2,8(r2)
 20037d8:	1809883a 	mov	r4,r3
 20037dc:	100b883a 	mov	r5,r2
 20037e0:	2003bb40 	call	2003bb4 <altera_avalon_jtag_uart_close>
}
 20037e4:	e037883a 	mov	sp,fp
 20037e8:	dfc00117 	ldw	ra,4(sp)
 20037ec:	df000017 	ldw	fp,0(sp)
 20037f0:	dec00204 	addi	sp,sp,8
 20037f4:	f800283a 	ret

020037f8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 20037f8:	defffa04 	addi	sp,sp,-24
 20037fc:	dfc00515 	stw	ra,20(sp)
 2003800:	df000415 	stw	fp,16(sp)
 2003804:	df000404 	addi	fp,sp,16
 2003808:	e13ffd15 	stw	r4,-12(fp)
 200380c:	e17ffe15 	stw	r5,-8(fp)
 2003810:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 2003814:	e0bffd17 	ldw	r2,-12(fp)
 2003818:	10800017 	ldw	r2,0(r2)
 200381c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 2003820:	e0bffc17 	ldw	r2,-16(fp)
 2003824:	10800a04 	addi	r2,r2,40
 2003828:	1009883a 	mov	r4,r2
 200382c:	e17ffe17 	ldw	r5,-8(fp)
 2003830:	e1bfff17 	ldw	r6,-4(fp)
 2003834:	2003c1c0 	call	2003c1c <altera_avalon_jtag_uart_ioctl>
}
 2003838:	e037883a 	mov	sp,fp
 200383c:	dfc00117 	ldw	ra,4(sp)
 2003840:	df000017 	ldw	fp,0(sp)
 2003844:	dec00204 	addi	sp,sp,8
 2003848:	f800283a 	ret

0200384c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 200384c:	defffa04 	addi	sp,sp,-24
 2003850:	dfc00515 	stw	ra,20(sp)
 2003854:	df000415 	stw	fp,16(sp)
 2003858:	df000404 	addi	fp,sp,16
 200385c:	e13ffd15 	stw	r4,-12(fp)
 2003860:	e17ffe15 	stw	r5,-8(fp)
 2003864:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003868:	e0bffd17 	ldw	r2,-12(fp)
 200386c:	00c00044 	movi	r3,1
 2003870:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 2003874:	e0bffd17 	ldw	r2,-12(fp)
 2003878:	10800017 	ldw	r2,0(r2)
 200387c:	10800104 	addi	r2,r2,4
 2003880:	e0fffd17 	ldw	r3,-12(fp)
 2003884:	18c00817 	ldw	r3,32(r3)
 2003888:	10c00035 	stwio	r3,0(r2)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 200388c:	e0fffe17 	ldw	r3,-8(fp)
 2003890:	e0bfff17 	ldw	r2,-4(fp)
 2003894:	d8000015 	stw	zero,0(sp)
 2003898:	1809883a 	mov	r4,r3
 200389c:	100b883a 	mov	r5,r2
 20038a0:	01808034 	movhi	r6,512
 20038a4:	318e4304 	addi	r6,r6,14604
 20038a8:	e1fffd17 	ldw	r7,-12(fp)
 20038ac:	2004dac0 	call	2004dac <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 20038b0:	e0bffd17 	ldw	r2,-12(fp)
 20038b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 20038b8:	e0bffd17 	ldw	r2,-12(fp)
 20038bc:	10c00204 	addi	r3,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 20038c0:	00808074 	movhi	r2,513
 20038c4:	10a4c704 	addi	r2,r2,-27876
 20038c8:	10800017 	ldw	r2,0(r2)
 20038cc:	1809883a 	mov	r4,r3
 20038d0:	100b883a 	mov	r5,r2
 20038d4:	01808034 	movhi	r6,512
 20038d8:	318ec404 	addi	r6,r6,15120
 20038dc:	e1fffd17 	ldw	r7,-12(fp)
 20038e0:	2004a500 	call	2004a50 <alt_alarm_start>
 20038e4:	1000040e 	bge	r2,zero,20038f8 <altera_avalon_jtag_uart_init+0xac>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 20038e8:	e0bffd17 	ldw	r2,-12(fp)
 20038ec:	00e00034 	movhi	r3,32768
 20038f0:	18ffffc4 	addi	r3,r3,-1
 20038f4:	10c00115 	stw	r3,4(r2)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 20038f8:	e037883a 	mov	sp,fp
 20038fc:	dfc00117 	ldw	ra,4(sp)
 2003900:	df000017 	ldw	fp,0(sp)
 2003904:	dec00204 	addi	sp,sp,8
 2003908:	f800283a 	ret

0200390c <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 200390c:	defff804 	addi	sp,sp,-32
 2003910:	df000715 	stw	fp,28(sp)
 2003914:	df000704 	addi	fp,sp,28
 2003918:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 200391c:	e0bfff17 	ldw	r2,-4(fp)
 2003920:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 2003924:	e0bffb17 	ldw	r2,-20(fp)
 2003928:	10800017 	ldw	r2,0(r2)
 200392c:	e0bffc15 	stw	r2,-16(fp)
 2003930:	00000106 	br	2003938 <altera_avalon_jtag_uart_irq+0x2c>
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
 2003934:	0001883a 	nop
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003938:	e0bffc17 	ldw	r2,-16(fp)
 200393c:	10800104 	addi	r2,r2,4
 2003940:	10800037 	ldwio	r2,0(r2)
 2003944:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 2003948:	e0bffd17 	ldw	r2,-12(fp)
 200394c:	1080c00c 	andi	r2,r2,768
 2003950:	10006a26 	beq	r2,zero,2003afc <altera_avalon_jtag_uart_irq+0x1f0>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 2003954:	e0bffd17 	ldw	r2,-12(fp)
 2003958:	1080400c 	andi	r2,r2,256
 200395c:	10003326 	beq	r2,zero,2003a2c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 2003960:	00800074 	movhi	r2,1
 2003964:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003968:	e0bffb17 	ldw	r2,-20(fp)
 200396c:	10800a17 	ldw	r2,40(r2)
 2003970:	10800044 	addi	r2,r2,1
 2003974:	1081ffcc 	andi	r2,r2,2047
 2003978:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 200397c:	e0bffb17 	ldw	r2,-20(fp)
 2003980:	10c00b17 	ldw	r3,44(r2)
 2003984:	e0bffe17 	ldw	r2,-8(fp)
 2003988:	18801426 	beq	r3,r2,20039dc <altera_avalon_jtag_uart_irq+0xd0>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 200398c:	e0bffc17 	ldw	r2,-16(fp)
 2003990:	10800037 	ldwio	r2,0(r2)
 2003994:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 2003998:	e0bff917 	ldw	r2,-28(fp)
 200399c:	10a0000c 	andi	r2,r2,32768
 20039a0:	10001026 	beq	r2,zero,20039e4 <altera_avalon_jtag_uart_irq+0xd8>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 20039a4:	e0bffb17 	ldw	r2,-20(fp)
 20039a8:	10800a17 	ldw	r2,40(r2)
 20039ac:	e0fff917 	ldw	r3,-28(fp)
 20039b0:	e13ffb17 	ldw	r4,-20(fp)
 20039b4:	2085883a 	add	r2,r4,r2
 20039b8:	10800e04 	addi	r2,r2,56
 20039bc:	10c00005 	stb	r3,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 20039c0:	e0bffb17 	ldw	r2,-20(fp)
 20039c4:	10800a17 	ldw	r2,40(r2)
 20039c8:	10800044 	addi	r2,r2,1
 20039cc:	10c1ffcc 	andi	r3,r2,2047
 20039d0:	e0bffb17 	ldw	r2,-20(fp)
 20039d4:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 20039d8:	003fe306 	br	2003968 <altera_avalon_jtag_uart_irq+0x5c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 20039dc:	0001883a 	nop
 20039e0:	00000106 	br	20039e8 <altera_avalon_jtag_uart_irq+0xdc>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 20039e4:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 20039e8:	e0bff917 	ldw	r2,-28(fp)
 20039ec:	10bfffec 	andhi	r2,r2,65535
 20039f0:	10000e26 	beq	r2,zero,2003a2c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 20039f4:	e0bffb17 	ldw	r2,-20(fp)
 20039f8:	10c00817 	ldw	r3,32(r2)
 20039fc:	00bfff84 	movi	r2,-2
 2003a00:	1886703a 	and	r3,r3,r2
 2003a04:	e0bffb17 	ldw	r2,-20(fp)
 2003a08:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 2003a0c:	e0bffc17 	ldw	r2,-16(fp)
 2003a10:	10800104 	addi	r2,r2,4
 2003a14:	e0fffb17 	ldw	r3,-20(fp)
 2003a18:	18c00817 	ldw	r3,32(r3)
 2003a1c:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003a20:	e0bffc17 	ldw	r2,-16(fp)
 2003a24:	10800104 	addi	r2,r2,4
 2003a28:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 2003a2c:	e0bffd17 	ldw	r2,-12(fp)
 2003a30:	1080800c 	andi	r2,r2,512
 2003a34:	103fbf26 	beq	r2,zero,2003934 <altera_avalon_jtag_uart_irq+0x28>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 2003a38:	e0bffd17 	ldw	r2,-12(fp)
 2003a3c:	1004d43a 	srli	r2,r2,16
 2003a40:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003a44:	00001406 	br	2003a98 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 2003a48:	e0bffc17 	ldw	r2,-16(fp)
 2003a4c:	e0fffb17 	ldw	r3,-20(fp)
 2003a50:	18c00d17 	ldw	r3,52(r3)
 2003a54:	e13ffb17 	ldw	r4,-20(fp)
 2003a58:	20c7883a 	add	r3,r4,r3
 2003a5c:	18c20e04 	addi	r3,r3,2104
 2003a60:	18c00003 	ldbu	r3,0(r3)
 2003a64:	18c03fcc 	andi	r3,r3,255
 2003a68:	18c0201c 	xori	r3,r3,128
 2003a6c:	18ffe004 	addi	r3,r3,-128
 2003a70:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003a74:	e0bffb17 	ldw	r2,-20(fp)
 2003a78:	10800d17 	ldw	r2,52(r2)
 2003a7c:	10800044 	addi	r2,r2,1
 2003a80:	10c1ffcc 	andi	r3,r2,2047
 2003a84:	e0bffb17 	ldw	r2,-20(fp)
 2003a88:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 2003a8c:	e0bffa17 	ldw	r2,-24(fp)
 2003a90:	10bfffc4 	addi	r2,r2,-1
 2003a94:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 2003a98:	e0bffa17 	ldw	r2,-24(fp)
 2003a9c:	10000526 	beq	r2,zero,2003ab4 <altera_avalon_jtag_uart_irq+0x1a8>
 2003aa0:	e0bffb17 	ldw	r2,-20(fp)
 2003aa4:	10c00d17 	ldw	r3,52(r2)
 2003aa8:	e0bffb17 	ldw	r2,-20(fp)
 2003aac:	10800c17 	ldw	r2,48(r2)
 2003ab0:	18bfe51e 	bne	r3,r2,2003a48 <altera_avalon_jtag_uart_irq+0x13c>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 2003ab4:	e0bffa17 	ldw	r2,-24(fp)
 2003ab8:	103f9e26 	beq	r2,zero,2003934 <altera_avalon_jtag_uart_irq+0x28>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2003abc:	e0bffb17 	ldw	r2,-20(fp)
 2003ac0:	10c00817 	ldw	r3,32(r2)
 2003ac4:	00bfff44 	movi	r2,-3
 2003ac8:	1886703a 	and	r3,r3,r2
 2003acc:	e0bffb17 	ldw	r2,-20(fp)
 2003ad0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003ad4:	e0bffb17 	ldw	r2,-20(fp)
 2003ad8:	10800017 	ldw	r2,0(r2)
 2003adc:	10800104 	addi	r2,r2,4
 2003ae0:	e0fffb17 	ldw	r3,-20(fp)
 2003ae4:	18c00817 	ldw	r3,32(r3)
 2003ae8:	10c00035 	stwio	r3,0(r2)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 2003aec:	e0bffc17 	ldw	r2,-16(fp)
 2003af0:	10800104 	addi	r2,r2,4
 2003af4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 2003af8:	003f8e06 	br	2003934 <altera_avalon_jtag_uart_irq+0x28>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 2003afc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 2003b00:	e037883a 	mov	sp,fp
 2003b04:	df000017 	ldw	fp,0(sp)
 2003b08:	dec00104 	addi	sp,sp,4
 2003b0c:	f800283a 	ret

02003b10 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 2003b10:	defffc04 	addi	sp,sp,-16
 2003b14:	df000315 	stw	fp,12(sp)
 2003b18:	df000304 	addi	fp,sp,12
 2003b1c:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 2003b20:	e0bfff17 	ldw	r2,-4(fp)
 2003b24:	e0bffd15 	stw	r2,-12(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 2003b28:	e0bffd17 	ldw	r2,-12(fp)
 2003b2c:	10800017 	ldw	r2,0(r2)
 2003b30:	10800104 	addi	r2,r2,4
 2003b34:	10800037 	ldwio	r2,0(r2)
 2003b38:	e0bffe15 	stw	r2,-8(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 2003b3c:	e0bffe17 	ldw	r2,-8(fp)
 2003b40:	1081000c 	andi	r2,r2,1024
 2003b44:	10000a26 	beq	r2,zero,2003b70 <altera_avalon_jtag_uart_timeout+0x60>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 2003b48:	e0bffd17 	ldw	r2,-12(fp)
 2003b4c:	10800017 	ldw	r2,0(r2)
 2003b50:	10800104 	addi	r2,r2,4
 2003b54:	e0fffd17 	ldw	r3,-12(fp)
 2003b58:	18c00817 	ldw	r3,32(r3)
 2003b5c:	18c10014 	ori	r3,r3,1024
 2003b60:	10c00035 	stwio	r3,0(r2)
    sp->host_inactive = 0;
 2003b64:	e0bffd17 	ldw	r2,-12(fp)
 2003b68:	10000915 	stw	zero,36(r2)
 2003b6c:	00000a06 	br	2003b98 <altera_avalon_jtag_uart_timeout+0x88>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 2003b70:	e0bffd17 	ldw	r2,-12(fp)
 2003b74:	10800917 	ldw	r2,36(r2)
 2003b78:	00e00034 	movhi	r3,32768
 2003b7c:	18ffff04 	addi	r3,r3,-4
 2003b80:	18800536 	bltu	r3,r2,2003b98 <altera_avalon_jtag_uart_timeout+0x88>
    sp->host_inactive++;
 2003b84:	e0bffd17 	ldw	r2,-12(fp)
 2003b88:	10800917 	ldw	r2,36(r2)
 2003b8c:	10c00044 	addi	r3,r2,1
 2003b90:	e0bffd17 	ldw	r2,-12(fp)
 2003b94:	10c00915 	stw	r3,36(r2)
 2003b98:	00808074 	movhi	r2,513
 2003b9c:	10a4c704 	addi	r2,r2,-27876
 2003ba0:	10800017 	ldw	r2,0(r2)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 2003ba4:	e037883a 	mov	sp,fp
 2003ba8:	df000017 	ldw	fp,0(sp)
 2003bac:	dec00104 	addi	sp,sp,4
 2003bb0:	f800283a 	ret

02003bb4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 2003bb4:	defffd04 	addi	sp,sp,-12
 2003bb8:	df000215 	stw	fp,8(sp)
 2003bbc:	df000204 	addi	fp,sp,8
 2003bc0:	e13ffe15 	stw	r4,-8(fp)
 2003bc4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003bc8:	00000506 	br	2003be0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 2003bcc:	e0bfff17 	ldw	r2,-4(fp)
 2003bd0:	1090000c 	andi	r2,r2,16384
 2003bd4:	10000226 	beq	r2,zero,2003be0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 2003bd8:	00bffd44 	movi	r2,-11
 2003bdc:	00000b06 	br	2003c0c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 2003be0:	e0bffe17 	ldw	r2,-8(fp)
 2003be4:	10c00d17 	ldw	r3,52(r2)
 2003be8:	e0bffe17 	ldw	r2,-8(fp)
 2003bec:	10800c17 	ldw	r2,48(r2)
 2003bf0:	18800526 	beq	r3,r2,2003c08 <altera_avalon_jtag_uart_close+0x54>
 2003bf4:	e0bffe17 	ldw	r2,-8(fp)
 2003bf8:	10c00917 	ldw	r3,36(r2)
 2003bfc:	e0bffe17 	ldw	r2,-8(fp)
 2003c00:	10800117 	ldw	r2,4(r2)
 2003c04:	18bff136 	bltu	r3,r2,2003bcc <altera_avalon_jtag_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 2003c08:	0005883a 	mov	r2,zero
}
 2003c0c:	e037883a 	mov	sp,fp
 2003c10:	df000017 	ldw	fp,0(sp)
 2003c14:	dec00104 	addi	sp,sp,4
 2003c18:	f800283a 	ret

02003c1c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 2003c1c:	defffa04 	addi	sp,sp,-24
 2003c20:	df000515 	stw	fp,20(sp)
 2003c24:	df000504 	addi	fp,sp,20
 2003c28:	e13ffd15 	stw	r4,-12(fp)
 2003c2c:	e17ffe15 	stw	r5,-8(fp)
 2003c30:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 2003c34:	00bff9c4 	movi	r2,-25
 2003c38:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 2003c3c:	e0bffe17 	ldw	r2,-8(fp)
 2003c40:	10da8060 	cmpeqi	r3,r2,27137
 2003c44:	1800031e 	bne	r3,zero,2003c54 <altera_avalon_jtag_uart_ioctl+0x38>
 2003c48:	109a80a0 	cmpeqi	r2,r2,27138
 2003c4c:	1000181e 	bne	r2,zero,2003cb0 <altera_avalon_jtag_uart_ioctl+0x94>
 2003c50:	00002606 	br	2003cec <altera_avalon_jtag_uart_ioctl+0xd0>
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 2003c54:	e0bffd17 	ldw	r2,-12(fp)
 2003c58:	10c00117 	ldw	r3,4(r2)
 2003c5c:	00a00034 	movhi	r2,32768
 2003c60:	10bfffc4 	addi	r2,r2,-1
 2003c64:	18802226 	beq	r3,r2,2003cf0 <altera_avalon_jtag_uart_ioctl+0xd4>
    {
      int timeout = *((int *)arg);
 2003c68:	e0bfff17 	ldw	r2,-4(fp)
 2003c6c:	10800017 	ldw	r2,0(r2)
 2003c70:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 2003c74:	e0bffc17 	ldw	r2,-16(fp)
 2003c78:	10800090 	cmplti	r2,r2,2
 2003c7c:	1000061e 	bne	r2,zero,2003c98 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003c80:	e0fffc17 	ldw	r3,-16(fp)
 2003c84:	00a00034 	movhi	r2,32768
 2003c88:	10bfffc4 	addi	r2,r2,-1
 2003c8c:	18800226 	beq	r3,r2,2003c98 <altera_avalon_jtag_uart_ioctl+0x7c>
 2003c90:	e0bffc17 	ldw	r2,-16(fp)
 2003c94:	00000206 	br	2003ca0 <altera_avalon_jtag_uart_ioctl+0x84>
 2003c98:	00a00034 	movhi	r2,32768
 2003c9c:	10bfff84 	addi	r2,r2,-2
 2003ca0:	e0fffd17 	ldw	r3,-12(fp)
 2003ca4:	18800115 	stw	r2,4(r3)
      rc = 0;
 2003ca8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2003cac:	00001006 	br	2003cf0 <altera_avalon_jtag_uart_ioctl+0xd4>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 2003cb0:	e0bffd17 	ldw	r2,-12(fp)
 2003cb4:	10c00117 	ldw	r3,4(r2)
 2003cb8:	00a00034 	movhi	r2,32768
 2003cbc:	10bfffc4 	addi	r2,r2,-1
 2003cc0:	18800d26 	beq	r3,r2,2003cf8 <altera_avalon_jtag_uart_ioctl+0xdc>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 2003cc4:	e0bffd17 	ldw	r2,-12(fp)
 2003cc8:	10c00917 	ldw	r3,36(r2)
 2003ccc:	e0bffd17 	ldw	r2,-12(fp)
 2003cd0:	10800117 	ldw	r2,4(r2)
 2003cd4:	1885803a 	cmpltu	r2,r3,r2
 2003cd8:	10c03fcc 	andi	r3,r2,255
 2003cdc:	e0bfff17 	ldw	r2,-4(fp)
 2003ce0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 2003ce4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 2003ce8:	00000306 	br	2003cf8 <altera_avalon_jtag_uart_ioctl+0xdc>

  default:
    break;
 2003cec:	00000306 	br	2003cfc <altera_avalon_jtag_uart_ioctl+0xe0>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 2003cf0:	0001883a 	nop
 2003cf4:	00000106 	br	2003cfc <altera_avalon_jtag_uart_ioctl+0xe0>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 2003cf8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 2003cfc:	e0bffb17 	ldw	r2,-20(fp)
}
 2003d00:	e037883a 	mov	sp,fp
 2003d04:	df000017 	ldw	fp,0(sp)
 2003d08:	dec00104 	addi	sp,sp,4
 2003d0c:	f800283a 	ret

02003d10 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 2003d10:	defff304 	addi	sp,sp,-52
 2003d14:	dfc00c15 	stw	ra,48(sp)
 2003d18:	df000b15 	stw	fp,44(sp)
 2003d1c:	df000b04 	addi	fp,sp,44
 2003d20:	e13ffc15 	stw	r4,-16(fp)
 2003d24:	e17ffd15 	stw	r5,-12(fp)
 2003d28:	e1bffe15 	stw	r6,-8(fp)
 2003d2c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 2003d30:	e0bffd17 	ldw	r2,-12(fp)
 2003d34:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2003d38:	00004706 	br	2003e58 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 2003d3c:	e0bffc17 	ldw	r2,-16(fp)
 2003d40:	10800a17 	ldw	r2,40(r2)
 2003d44:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 2003d48:	e0bffc17 	ldw	r2,-16(fp)
 2003d4c:	10800b17 	ldw	r2,44(r2)
 2003d50:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 2003d54:	e0fff717 	ldw	r3,-36(fp)
 2003d58:	e0bff817 	ldw	r2,-32(fp)
 2003d5c:	18800536 	bltu	r3,r2,2003d74 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 2003d60:	e0fff717 	ldw	r3,-36(fp)
 2003d64:	e0bff817 	ldw	r2,-32(fp)
 2003d68:	1885c83a 	sub	r2,r3,r2
 2003d6c:	e0bff615 	stw	r2,-40(fp)
 2003d70:	00000406 	br	2003d84 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 2003d74:	00c20004 	movi	r3,2048
 2003d78:	e0bff817 	ldw	r2,-32(fp)
 2003d7c:	1885c83a 	sub	r2,r3,r2
 2003d80:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2003d84:	e0bff617 	ldw	r2,-40(fp)
 2003d88:	10001e26 	beq	r2,zero,2003e04 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 2003d8c:	e0fffe17 	ldw	r3,-8(fp)
 2003d90:	e0bff617 	ldw	r2,-40(fp)
 2003d94:	1880022e 	bgeu	r3,r2,2003da0 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 2003d98:	e0bffe17 	ldw	r2,-8(fp)
 2003d9c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 2003da0:	e0bff817 	ldw	r2,-32(fp)
 2003da4:	10800e04 	addi	r2,r2,56
 2003da8:	e0fffc17 	ldw	r3,-16(fp)
 2003dac:	1885883a 	add	r2,r3,r2
 2003db0:	e13ff517 	ldw	r4,-44(fp)
 2003db4:	100b883a 	mov	r5,r2
 2003db8:	e1bff617 	ldw	r6,-40(fp)
 2003dbc:	20010bc0 	call	20010bc <memcpy>
      ptr   += n;
 2003dc0:	e0fff517 	ldw	r3,-44(fp)
 2003dc4:	e0bff617 	ldw	r2,-40(fp)
 2003dc8:	1885883a 	add	r2,r3,r2
 2003dcc:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 2003dd0:	e0fffe17 	ldw	r3,-8(fp)
 2003dd4:	e0bff617 	ldw	r2,-40(fp)
 2003dd8:	1885c83a 	sub	r2,r3,r2
 2003ddc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 2003de0:	e0fff817 	ldw	r3,-32(fp)
 2003de4:	e0bff617 	ldw	r2,-40(fp)
 2003de8:	1885883a 	add	r2,r3,r2
 2003dec:	10c1ffcc 	andi	r3,r2,2047
 2003df0:	e0bffc17 	ldw	r2,-16(fp)
 2003df4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 2003df8:	e0bffe17 	ldw	r2,-8(fp)
 2003dfc:	00bfcf16 	blt	zero,r2,2003d3c <altera_avalon_jtag_uart_read+0x2c>
 2003e00:	00000106 	br	2003e08 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 2003e04:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 2003e08:	e0fff517 	ldw	r3,-44(fp)
 2003e0c:	e0bffd17 	ldw	r2,-12(fp)
 2003e10:	1880141e 	bne	r3,r2,2003e64 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 2003e14:	e0bfff17 	ldw	r2,-4(fp)
 2003e18:	1090000c 	andi	r2,r2,16384
 2003e1c:	1000131e 	bne	r2,zero,2003e6c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 2003e20:	0001883a 	nop
 2003e24:	e0bffc17 	ldw	r2,-16(fp)
 2003e28:	10c00a17 	ldw	r3,40(r2)
 2003e2c:	e0bff717 	ldw	r2,-36(fp)
 2003e30:	1880051e 	bne	r3,r2,2003e48 <altera_avalon_jtag_uart_read+0x138>
 2003e34:	e0bffc17 	ldw	r2,-16(fp)
 2003e38:	10c00917 	ldw	r3,36(r2)
 2003e3c:	e0bffc17 	ldw	r2,-16(fp)
 2003e40:	10800117 	ldw	r2,4(r2)
 2003e44:	18bff736 	bltu	r3,r2,2003e24 <altera_avalon_jtag_uart_read+0x114>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 2003e48:	e0bffc17 	ldw	r2,-16(fp)
 2003e4c:	10c00a17 	ldw	r3,40(r2)
 2003e50:	e0bff717 	ldw	r2,-36(fp)
 2003e54:	18800726 	beq	r3,r2,2003e74 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 2003e58:	e0bffe17 	ldw	r2,-8(fp)
 2003e5c:	00bfb716 	blt	zero,r2,2003d3c <altera_avalon_jtag_uart_read+0x2c>
 2003e60:	00000506 	br	2003e78 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 2003e64:	0001883a 	nop
 2003e68:	00000306 	br	2003e78 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 2003e6c:	0001883a 	nop
 2003e70:	00000106 	br	2003e78 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 2003e74:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 2003e78:	e0fff517 	ldw	r3,-44(fp)
 2003e7c:	e0bffd17 	ldw	r2,-12(fp)
 2003e80:	18801726 	beq	r3,r2,2003ee0 <altera_avalon_jtag_uart_read+0x1d0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2003e84:	0005303a 	rdctl	r2,status
 2003e88:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2003e8c:	e0fffa17 	ldw	r3,-24(fp)
 2003e90:	00bfff84 	movi	r2,-2
 2003e94:	1884703a 	and	r2,r3,r2
 2003e98:	1001703a 	wrctl	status,r2
  
  return context;
 2003e9c:	e0bffa17 	ldw	r2,-24(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 2003ea0:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 2003ea4:	e0bffc17 	ldw	r2,-16(fp)
 2003ea8:	10800817 	ldw	r2,32(r2)
 2003eac:	10c00054 	ori	r3,r2,1
 2003eb0:	e0bffc17 	ldw	r2,-16(fp)
 2003eb4:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2003eb8:	e0bffc17 	ldw	r2,-16(fp)
 2003ebc:	10800017 	ldw	r2,0(r2)
 2003ec0:	10800104 	addi	r2,r2,4
 2003ec4:	e0fffc17 	ldw	r3,-16(fp)
 2003ec8:	18c00817 	ldw	r3,32(r3)
 2003ecc:	10c00035 	stwio	r3,0(r2)
 2003ed0:	e0bff917 	ldw	r2,-28(fp)
 2003ed4:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2003ed8:	e0bffb17 	ldw	r2,-20(fp)
 2003edc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 2003ee0:	e0fff517 	ldw	r3,-44(fp)
 2003ee4:	e0bffd17 	ldw	r2,-12(fp)
 2003ee8:	18800426 	beq	r3,r2,2003efc <altera_avalon_jtag_uart_read+0x1ec>
    return ptr - buffer;
 2003eec:	e0fff517 	ldw	r3,-44(fp)
 2003ef0:	e0bffd17 	ldw	r2,-12(fp)
 2003ef4:	1885c83a 	sub	r2,r3,r2
 2003ef8:	00000606 	br	2003f14 <altera_avalon_jtag_uart_read+0x204>
  else if (flags & O_NONBLOCK)
 2003efc:	e0bfff17 	ldw	r2,-4(fp)
 2003f00:	1090000c 	andi	r2,r2,16384
 2003f04:	10000226 	beq	r2,zero,2003f10 <altera_avalon_jtag_uart_read+0x200>
    return -EWOULDBLOCK;
 2003f08:	00bffd44 	movi	r2,-11
 2003f0c:	00000106 	br	2003f14 <altera_avalon_jtag_uart_read+0x204>
  else
    return -EIO;
 2003f10:	00bffec4 	movi	r2,-5
}
 2003f14:	e037883a 	mov	sp,fp
 2003f18:	dfc00117 	ldw	ra,4(sp)
 2003f1c:	df000017 	ldw	fp,0(sp)
 2003f20:	dec00204 	addi	sp,sp,8
 2003f24:	f800283a 	ret

02003f28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 2003f28:	defff304 	addi	sp,sp,-52
 2003f2c:	dfc00c15 	stw	ra,48(sp)
 2003f30:	df000b15 	stw	fp,44(sp)
 2003f34:	df000b04 	addi	fp,sp,44
 2003f38:	e13ffc15 	stw	r4,-16(fp)
 2003f3c:	e17ffd15 	stw	r5,-12(fp)
 2003f40:	e1bffe15 	stw	r6,-8(fp)
 2003f44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 2003f48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 2003f4c:	e0bffd17 	ldw	r2,-12(fp)
 2003f50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2003f54:	00003706 	br	2004034 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 2003f58:	e0bffc17 	ldw	r2,-16(fp)
 2003f5c:	10800c17 	ldw	r2,48(r2)
 2003f60:	e0bff815 	stw	r2,-32(fp)
      out = sp->tx_out;
 2003f64:	e0bffc17 	ldw	r2,-16(fp)
 2003f68:	10800d17 	ldw	r2,52(r2)
 2003f6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 2003f70:	e0fff817 	ldw	r3,-32(fp)
 2003f74:	e0bff517 	ldw	r2,-44(fp)
 2003f78:	1880062e 	bgeu	r3,r2,2003f94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 2003f7c:	e0fff517 	ldw	r3,-44(fp)
 2003f80:	e0bff817 	ldw	r2,-32(fp)
 2003f84:	1885c83a 	sub	r2,r3,r2
 2003f88:	10bfffc4 	addi	r2,r2,-1
 2003f8c:	e0bff615 	stw	r2,-40(fp)
 2003f90:	00000b06 	br	2003fc0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 2003f94:	e0bff517 	ldw	r2,-44(fp)
 2003f98:	10000526 	beq	r2,zero,2003fb0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 2003f9c:	00c20004 	movi	r3,2048
 2003fa0:	e0bff817 	ldw	r2,-32(fp)
 2003fa4:	1885c83a 	sub	r2,r3,r2
 2003fa8:	e0bff615 	stw	r2,-40(fp)
 2003fac:	00000406 	br	2003fc0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 2003fb0:	00c1ffc4 	movi	r3,2047
 2003fb4:	e0bff817 	ldw	r2,-32(fp)
 2003fb8:	1885c83a 	sub	r2,r3,r2
 2003fbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 2003fc0:	e0bff617 	ldw	r2,-40(fp)
 2003fc4:	10001e26 	beq	r2,zero,2004040 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 2003fc8:	e0fffe17 	ldw	r3,-8(fp)
 2003fcc:	e0bff617 	ldw	r2,-40(fp)
 2003fd0:	1880022e 	bgeu	r3,r2,2003fdc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 2003fd4:	e0bffe17 	ldw	r2,-8(fp)
 2003fd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 2003fdc:	e0bff817 	ldw	r2,-32(fp)
 2003fe0:	10820e04 	addi	r2,r2,2104
 2003fe4:	e0fffc17 	ldw	r3,-16(fp)
 2003fe8:	1885883a 	add	r2,r3,r2
 2003fec:	1009883a 	mov	r4,r2
 2003ff0:	e17ffd17 	ldw	r5,-12(fp)
 2003ff4:	e1bff617 	ldw	r6,-40(fp)
 2003ff8:	20010bc0 	call	20010bc <memcpy>
      ptr   += n;
 2003ffc:	e0fffd17 	ldw	r3,-12(fp)
 2004000:	e0bff617 	ldw	r2,-40(fp)
 2004004:	1885883a 	add	r2,r3,r2
 2004008:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 200400c:	e0fffe17 	ldw	r3,-8(fp)
 2004010:	e0bff617 	ldw	r2,-40(fp)
 2004014:	1885c83a 	sub	r2,r3,r2
 2004018:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 200401c:	e0fff817 	ldw	r3,-32(fp)
 2004020:	e0bff617 	ldw	r2,-40(fp)
 2004024:	1885883a 	add	r2,r3,r2
 2004028:	10c1ffcc 	andi	r3,r2,2047
 200402c:	e0bffc17 	ldw	r2,-16(fp)
 2004030:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 2004034:	e0bffe17 	ldw	r2,-8(fp)
 2004038:	00bfc716 	blt	zero,r2,2003f58 <altera_avalon_jtag_uart_write+0x30>
 200403c:	00000106 	br	2004044 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 2004040:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004044:	0005303a 	rdctl	r2,status
 2004048:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 200404c:	e0fffa17 	ldw	r3,-24(fp)
 2004050:	00bfff84 	movi	r2,-2
 2004054:	1884703a 	and	r2,r3,r2
 2004058:	1001703a 	wrctl	status,r2
  
  return context;
 200405c:	e0bffa17 	ldw	r2,-24(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 2004060:	e0bff915 	stw	r2,-28(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 2004064:	e0bffc17 	ldw	r2,-16(fp)
 2004068:	10800817 	ldw	r2,32(r2)
 200406c:	10c00094 	ori	r3,r2,2
 2004070:	e0bffc17 	ldw	r2,-16(fp)
 2004074:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 2004078:	e0bffc17 	ldw	r2,-16(fp)
 200407c:	10800017 	ldw	r2,0(r2)
 2004080:	10800104 	addi	r2,r2,4
 2004084:	e0fffc17 	ldw	r3,-16(fp)
 2004088:	18c00817 	ldw	r3,32(r3)
 200408c:	10c00035 	stwio	r3,0(r2)
 2004090:	e0bff917 	ldw	r2,-28(fp)
 2004094:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004098:	e0bffb17 	ldw	r2,-20(fp)
 200409c:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 20040a0:	e0bffe17 	ldw	r2,-8(fp)
 20040a4:	0080110e 	bge	zero,r2,20040ec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 20040a8:	e0bfff17 	ldw	r2,-4(fp)
 20040ac:	1090000c 	andi	r2,r2,16384
 20040b0:	1000111e 	bne	r2,zero,20040f8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 20040b4:	0001883a 	nop
 20040b8:	e0bffc17 	ldw	r2,-16(fp)
 20040bc:	10c00d17 	ldw	r3,52(r2)
 20040c0:	e0bff517 	ldw	r2,-44(fp)
 20040c4:	1880051e 	bne	r3,r2,20040dc <altera_avalon_jtag_uart_write+0x1b4>
 20040c8:	e0bffc17 	ldw	r2,-16(fp)
 20040cc:	10c00917 	ldw	r3,36(r2)
 20040d0:	e0bffc17 	ldw	r2,-16(fp)
 20040d4:	10800117 	ldw	r2,4(r2)
 20040d8:	18bff736 	bltu	r3,r2,20040b8 <altera_avalon_jtag_uart_write+0x190>
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
 20040dc:	e0bffc17 	ldw	r2,-16(fp)
 20040e0:	10c00d17 	ldw	r3,52(r2)
 20040e4:	e0bff517 	ldw	r2,-44(fp)
 20040e8:	18800526 	beq	r3,r2,2004100 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 20040ec:	e0bffe17 	ldw	r2,-8(fp)
 20040f0:	00bfd016 	blt	zero,r2,2004034 <altera_avalon_jtag_uart_write+0x10c>
 20040f4:	00000306 	br	2004104 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 20040f8:	0001883a 	nop
 20040fc:	00000106 	br	2004104 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if (out == sp->tx_out)
         break;
 2004100:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 2004104:	e0fffd17 	ldw	r3,-12(fp)
 2004108:	e0bff717 	ldw	r2,-36(fp)
 200410c:	18800426 	beq	r3,r2,2004120 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 2004110:	e0fffd17 	ldw	r3,-12(fp)
 2004114:	e0bff717 	ldw	r2,-36(fp)
 2004118:	1885c83a 	sub	r2,r3,r2
 200411c:	00000606 	br	2004138 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 2004120:	e0bfff17 	ldw	r2,-4(fp)
 2004124:	1090000c 	andi	r2,r2,16384
 2004128:	10000226 	beq	r2,zero,2004134 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 200412c:	00bffd44 	movi	r2,-11
 2004130:	00000106 	br	2004138 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 2004134:	00bffec4 	movi	r2,-5
}
 2004138:	e037883a 	mov	sp,fp
 200413c:	dfc00117 	ldw	ra,4(sp)
 2004140:	df000017 	ldw	fp,0(sp)
 2004144:	dec00204 	addi	sp,sp,8
 2004148:	f800283a 	ret

0200414c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 200414c:	defffa04 	addi	sp,sp,-24
 2004150:	dfc00515 	stw	ra,20(sp)
 2004154:	df000415 	stw	fp,16(sp)
 2004158:	df000404 	addi	fp,sp,16
 200415c:	e13ffd15 	stw	r4,-12(fp)
 2004160:	e17ffe15 	stw	r5,-8(fp)
 2004164:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2004168:	e0bffd17 	ldw	r2,-12(fp)
 200416c:	10800017 	ldw	r2,0(r2)
 2004170:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2004174:	e0bffc17 	ldw	r2,-16(fp)
 2004178:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 200417c:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_read(&dev->state, buffer, space,
 2004180:	10800217 	ldw	r2,8(r2)
 2004184:	1809883a 	mov	r4,r3
 2004188:	e17ffe17 	ldw	r5,-8(fp)
 200418c:	e1bfff17 	ldw	r6,-4(fp)
 2004190:	100f883a 	mov	r7,r2
 2004194:	20046540 	call	2004654 <altera_avalon_uart_read>
      fd->fd_flags);
}
 2004198:	e037883a 	mov	sp,fp
 200419c:	dfc00117 	ldw	ra,4(sp)
 20041a0:	df000017 	ldw	fp,0(sp)
 20041a4:	dec00204 	addi	sp,sp,8
 20041a8:	f800283a 	ret

020041ac <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 20041ac:	defffa04 	addi	sp,sp,-24
 20041b0:	dfc00515 	stw	ra,20(sp)
 20041b4:	df000415 	stw	fp,16(sp)
 20041b8:	df000404 	addi	fp,sp,16
 20041bc:	e13ffd15 	stw	r4,-12(fp)
 20041c0:	e17ffe15 	stw	r5,-8(fp)
 20041c4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 20041c8:	e0bffd17 	ldw	r2,-12(fp)
 20041cc:	10800017 	ldw	r2,0(r2)
 20041d0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20041d4:	e0bffc17 	ldw	r2,-16(fp)
 20041d8:	10c00a04 	addi	r3,r2,40
      fd->fd_flags);
 20041dc:	e0bffd17 	ldw	r2,-12(fp)
int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 

    return altera_avalon_uart_write(&dev->state, buffer, space,
 20041e0:	10800217 	ldw	r2,8(r2)
 20041e4:	1809883a 	mov	r4,r3
 20041e8:	e17ffe17 	ldw	r5,-8(fp)
 20041ec:	e1bfff17 	ldw	r6,-4(fp)
 20041f0:	100f883a 	mov	r7,r2
 20041f4:	20048a80 	call	20048a8 <altera_avalon_uart_write>
      fd->fd_flags);
}
 20041f8:	e037883a 	mov	sp,fp
 20041fc:	dfc00117 	ldw	ra,4(sp)
 2004200:	df000017 	ldw	fp,0(sp)
 2004204:	dec00204 	addi	sp,sp,8
 2004208:	f800283a 	ret

0200420c <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 200420c:	defffc04 	addi	sp,sp,-16
 2004210:	dfc00315 	stw	ra,12(sp)
 2004214:	df000215 	stw	fp,8(sp)
 2004218:	df000204 	addi	fp,sp,8
 200421c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 2004220:	e0bfff17 	ldw	r2,-4(fp)
 2004224:	10800017 	ldw	r2,0(r2)
 2004228:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 200422c:	e0bffe17 	ldw	r2,-8(fp)
 2004230:	10c00a04 	addi	r3,r2,40
 2004234:	e0bfff17 	ldw	r2,-4(fp)
 2004238:	10800217 	ldw	r2,8(r2)
 200423c:	1809883a 	mov	r4,r3
 2004240:	100b883a 	mov	r5,r2
 2004244:	20045b00 	call	20045b0 <altera_avalon_uart_close>
}
 2004248:	e037883a 	mov	sp,fp
 200424c:	dfc00117 	ldw	ra,4(sp)
 2004250:	df000017 	ldw	fp,0(sp)
 2004254:	dec00204 	addi	sp,sp,8
 2004258:	f800283a 	ret

0200425c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 200425c:	defff804 	addi	sp,sp,-32
 2004260:	dfc00715 	stw	ra,28(sp)
 2004264:	df000615 	stw	fp,24(sp)
 2004268:	df000604 	addi	fp,sp,24
 200426c:	e13ffd15 	stw	r4,-12(fp)
 2004270:	e17ffe15 	stw	r5,-8(fp)
 2004274:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 2004278:	e0bffd17 	ldw	r2,-12(fp)
 200427c:	10800017 	ldw	r2,0(r2)
 2004280:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 2004284:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2004288:	1000041e 	bne	r2,zero,200429c <altera_avalon_uart_init+0x40>
 200428c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 2004290:	1000021e 	bne	r2,zero,200429c <altera_avalon_uart_init+0x40>
 2004294:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 2004298:	10000226 	beq	r2,zero,20042a4 <altera_avalon_uart_init+0x48>
 200429c:	00800044 	movi	r2,1
 20042a0:	00000106 	br	20042a8 <altera_avalon_uart_init+0x4c>
 20042a4:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 20042a8:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 20042ac:	e0bffc17 	ldw	r2,-16(fp)
 20042b0:	10000f1e 	bne	r2,zero,20042f0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 20042b4:	e0bffd17 	ldw	r2,-12(fp)
 20042b8:	00c32004 	movi	r3,3200
 20042bc:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 20042c0:	e0bffb17 	ldw	r2,-20(fp)
 20042c4:	10800304 	addi	r2,r2,12
 20042c8:	e0fffd17 	ldw	r3,-12(fp)
 20042cc:	18c00117 	ldw	r3,4(r3)
 20042d0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 20042d4:	d8000015 	stw	zero,0(sp)
 20042d8:	e13ffe17 	ldw	r4,-8(fp)
 20042dc:	e17fff17 	ldw	r5,-4(fp)
 20042e0:	01808034 	movhi	r6,512
 20042e4:	3190c104 	addi	r6,r6,17156
 20042e8:	e1fffd17 	ldw	r7,-12(fp)
 20042ec:	2004dac0 	call	2004dac <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 20042f0:	e037883a 	mov	sp,fp
 20042f4:	dfc00117 	ldw	ra,4(sp)
 20042f8:	df000017 	ldw	fp,0(sp)
 20042fc:	dec00204 	addi	sp,sp,8
 2004300:	f800283a 	ret

02004304 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 2004304:	defffa04 	addi	sp,sp,-24
 2004308:	dfc00515 	stw	ra,20(sp)
 200430c:	df000415 	stw	fp,16(sp)
 2004310:	df000404 	addi	fp,sp,16
 2004314:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 2004318:	e0bfff17 	ldw	r2,-4(fp)
 200431c:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 2004320:	e0bffc17 	ldw	r2,-16(fp)
 2004324:	10800017 	ldw	r2,0(r2)
 2004328:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 200432c:	e0bffd17 	ldw	r2,-12(fp)
 2004330:	10800204 	addi	r2,r2,8
 2004334:	10800037 	ldwio	r2,0(r2)
 2004338:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 200433c:	e0bffd17 	ldw	r2,-12(fp)
 2004340:	10800204 	addi	r2,r2,8
 2004344:	0007883a 	mov	r3,zero
 2004348:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 200434c:	e0bffd17 	ldw	r2,-12(fp)
 2004350:	10800204 	addi	r2,r2,8
 2004354:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 2004358:	e0bffe17 	ldw	r2,-8(fp)
 200435c:	1080200c 	andi	r2,r2,128
 2004360:	10000326 	beq	r2,zero,2004370 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 2004364:	e13ffc17 	ldw	r4,-16(fp)
 2004368:	e17ffe17 	ldw	r5,-8(fp)
 200436c:	200439c0 	call	200439c <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 2004370:	e0bffe17 	ldw	r2,-8(fp)
 2004374:	1081100c 	andi	r2,r2,1088
 2004378:	10000326 	beq	r2,zero,2004388 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 200437c:	e13ffc17 	ldw	r4,-16(fp)
 2004380:	e17ffe17 	ldw	r5,-8(fp)
 2004384:	20044740 	call	2004474 <altera_avalon_uart_txirq>
  }
  

}
 2004388:	e037883a 	mov	sp,fp
 200438c:	dfc00117 	ldw	ra,4(sp)
 2004390:	df000017 	ldw	fp,0(sp)
 2004394:	dec00204 	addi	sp,sp,8
 2004398:	f800283a 	ret

0200439c <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 200439c:	defffc04 	addi	sp,sp,-16
 20043a0:	df000315 	stw	fp,12(sp)
 20043a4:	df000304 	addi	fp,sp,12
 20043a8:	e13ffe15 	stw	r4,-8(fp)
 20043ac:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 20043b0:	e0bfff17 	ldw	r2,-4(fp)
 20043b4:	108000cc 	andi	r2,r2,3
 20043b8:	1000291e 	bne	r2,zero,2004460 <altera_avalon_uart_rxirq+0xc4>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 20043bc:	e0bffe17 	ldw	r2,-8(fp)
 20043c0:	10800317 	ldw	r2,12(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20043c4:	e0bffe17 	ldw	r2,-8(fp)
 20043c8:	10800317 	ldw	r2,12(r2)
 20043cc:	10800044 	addi	r2,r2,1
 20043d0:	10800fcc 	andi	r2,r2,63
 20043d4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 20043d8:	e0bffe17 	ldw	r2,-8(fp)
 20043dc:	10800317 	ldw	r2,12(r2)
 20043e0:	e0fffe17 	ldw	r3,-8(fp)
 20043e4:	18c00017 	ldw	r3,0(r3)
 20043e8:	18c00037 	ldwio	r3,0(r3)
 20043ec:	e13ffe17 	ldw	r4,-8(fp)
 20043f0:	2085883a 	add	r2,r4,r2
 20043f4:	10800704 	addi	r2,r2,28
 20043f8:	10c00005 	stb	r3,0(r2)

  sp->rx_end = next;
 20043fc:	e0bffe17 	ldw	r2,-8(fp)
 2004400:	e0fffd17 	ldw	r3,-12(fp)
 2004404:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 2004408:	e0bffe17 	ldw	r2,-8(fp)
 200440c:	10800317 	ldw	r2,12(r2)
 2004410:	10800044 	addi	r2,r2,1
 2004414:	10800fcc 	andi	r2,r2,63
 2004418:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 200441c:	e0bffe17 	ldw	r2,-8(fp)
 2004420:	10c00217 	ldw	r3,8(r2)
 2004424:	e0bffd17 	ldw	r2,-12(fp)
 2004428:	18800e1e 	bne	r3,r2,2004464 <altera_avalon_uart_rxirq+0xc8>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 200442c:	e0bffe17 	ldw	r2,-8(fp)
 2004430:	10c00117 	ldw	r3,4(r2)
 2004434:	00bfdfc4 	movi	r2,-129
 2004438:	1886703a 	and	r3,r3,r2
 200443c:	e0bffe17 	ldw	r2,-8(fp)
 2004440:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 2004444:	e0bffe17 	ldw	r2,-8(fp)
 2004448:	10800017 	ldw	r2,0(r2)
 200444c:	10800304 	addi	r2,r2,12
 2004450:	e0fffe17 	ldw	r3,-8(fp)
 2004454:	18c00117 	ldw	r3,4(r3)
 2004458:	10c00035 	stwio	r3,0(r2)
 200445c:	00000106 	br	2004464 <altera_avalon_uart_rxirq+0xc8>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 2004460:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 2004464:	e037883a 	mov	sp,fp
 2004468:	df000017 	ldw	fp,0(sp)
 200446c:	dec00104 	addi	sp,sp,4
 2004470:	f800283a 	ret

02004474 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 2004474:	defffd04 	addi	sp,sp,-12
 2004478:	df000215 	stw	fp,8(sp)
 200447c:	df000204 	addi	fp,sp,8
 2004480:	e13ffe15 	stw	r4,-8(fp)
 2004484:	e17fff15 	stw	r5,-4(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 2004488:	e0bffe17 	ldw	r2,-8(fp)
 200448c:	10c00417 	ldw	r3,16(r2)
 2004490:	e0bffe17 	ldw	r2,-8(fp)
 2004494:	10800517 	ldw	r2,20(r2)
 2004498:	18803026 	beq	r3,r2,200455c <altera_avalon_uart_txirq+0xe8>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 200449c:	e0bffe17 	ldw	r2,-8(fp)
 20044a0:	10800617 	ldw	r2,24(r2)
 20044a4:	1080008c 	andi	r2,r2,2
 20044a8:	10000326 	beq	r2,zero,20044b8 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 20044ac:	e0bfff17 	ldw	r2,-4(fp)
 20044b0:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 20044b4:	10001b26 	beq	r2,zero,2004524 <altera_avalon_uart_txirq+0xb0>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 20044b8:	e0bffe17 	ldw	r2,-8(fp)
 20044bc:	10800417 	ldw	r2,16(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 20044c0:	e0bffe17 	ldw	r2,-8(fp)
 20044c4:	10800017 	ldw	r2,0(r2)
 20044c8:	10800104 	addi	r2,r2,4
 20044cc:	e0fffe17 	ldw	r3,-8(fp)
 20044d0:	18c00417 	ldw	r3,16(r3)
 20044d4:	e13ffe17 	ldw	r4,-8(fp)
 20044d8:	20c7883a 	add	r3,r4,r3
 20044dc:	18c01704 	addi	r3,r3,92
 20044e0:	18c00003 	ldbu	r3,0(r3)
 20044e4:	18c03fcc 	andi	r3,r3,255
 20044e8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 20044ec:	e0bffe17 	ldw	r2,-8(fp)
 20044f0:	10800417 	ldw	r2,16(r2)
 20044f4:	10800044 	addi	r2,r2,1
 20044f8:	e0fffe17 	ldw	r3,-8(fp)
 20044fc:	18800415 	stw	r2,16(r3)
 2004500:	10c00fcc 	andi	r3,r2,63
 2004504:	e0bffe17 	ldw	r2,-8(fp)
 2004508:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 200450c:	e0bffe17 	ldw	r2,-8(fp)
 2004510:	10800117 	ldw	r2,4(r2)
 2004514:	10c01014 	ori	r3,r2,64
 2004518:	e0bffe17 	ldw	r2,-8(fp)
 200451c:	10c00115 	stw	r3,4(r2)
 2004520:	00000e06 	br	200455c <altera_avalon_uart_txirq+0xe8>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 2004524:	e0bffe17 	ldw	r2,-8(fp)
 2004528:	10800017 	ldw	r2,0(r2)
 200452c:	10800204 	addi	r2,r2,8
 2004530:	10800037 	ldwio	r2,0(r2)
 2004534:	e0bfff15 	stw	r2,-4(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 2004538:	e0bfff17 	ldw	r2,-4(fp)
 200453c:	1082000c 	andi	r2,r2,2048
 2004540:	1000061e 	bne	r2,zero,200455c <altera_avalon_uart_txirq+0xe8>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 2004544:	e0bffe17 	ldw	r2,-8(fp)
 2004548:	10c00117 	ldw	r3,4(r2)
 200454c:	00bfefc4 	movi	r2,-65
 2004550:	1886703a 	and	r3,r3,r2
 2004554:	e0bffe17 	ldw	r2,-8(fp)
 2004558:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 200455c:	e0bffe17 	ldw	r2,-8(fp)
 2004560:	10c00417 	ldw	r3,16(r2)
 2004564:	e0bffe17 	ldw	r2,-8(fp)
 2004568:	10800517 	ldw	r2,20(r2)
 200456c:	1880061e 	bne	r3,r2,2004588 <altera_avalon_uart_txirq+0x114>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 2004570:	e0bffe17 	ldw	r2,-8(fp)
 2004574:	10c00117 	ldw	r3,4(r2)
 2004578:	00beefc4 	movi	r2,-1089
 200457c:	1886703a 	and	r3,r3,r2
 2004580:	e0bffe17 	ldw	r2,-8(fp)
 2004584:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2004588:	e0bffe17 	ldw	r2,-8(fp)
 200458c:	10800017 	ldw	r2,0(r2)
 2004590:	10800304 	addi	r2,r2,12
 2004594:	e0fffe17 	ldw	r3,-8(fp)
 2004598:	18c00117 	ldw	r3,4(r3)
 200459c:	10c00035 	stwio	r3,0(r2)
}
 20045a0:	e037883a 	mov	sp,fp
 20045a4:	df000017 	ldw	fp,0(sp)
 20045a8:	dec00104 	addi	sp,sp,4
 20045ac:	f800283a 	ret

020045b0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 20045b0:	defffd04 	addi	sp,sp,-12
 20045b4:	df000215 	stw	fp,8(sp)
 20045b8:	df000204 	addi	fp,sp,8
 20045bc:	e13ffe15 	stw	r4,-8(fp)
 20045c0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20045c4:	00000506 	br	20045dc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 20045c8:	e0bfff17 	ldw	r2,-4(fp)
 20045cc:	1090000c 	andi	r2,r2,16384
 20045d0:	10000226 	beq	r2,zero,20045dc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 20045d4:	00bffd44 	movi	r2,-11
 20045d8:	00000606 	br	20045f4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 20045dc:	e0bffe17 	ldw	r2,-8(fp)
 20045e0:	10c00417 	ldw	r3,16(r2)
 20045e4:	e0bffe17 	ldw	r2,-8(fp)
 20045e8:	10800517 	ldw	r2,20(r2)
 20045ec:	18bff61e 	bne	r3,r2,20045c8 <altera_avalon_uart_close+0x18>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 20045f0:	0005883a 	mov	r2,zero
}
 20045f4:	e037883a 	mov	sp,fp
 20045f8:	df000017 	ldw	fp,0(sp)
 20045fc:	dec00104 	addi	sp,sp,4
 2004600:	f800283a 	ret

02004604 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004604:	defffe04 	addi	sp,sp,-8
 2004608:	dfc00115 	stw	ra,4(sp)
 200460c:	df000015 	stw	fp,0(sp)
 2004610:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004614:	00808034 	movhi	r2,512
 2004618:	109df704 	addi	r2,r2,30684
 200461c:	10800017 	ldw	r2,0(r2)
 2004620:	10000526 	beq	r2,zero,2004638 <alt_get_errno+0x34>
 2004624:	00808034 	movhi	r2,512
 2004628:	109df704 	addi	r2,r2,30684
 200462c:	10800017 	ldw	r2,0(r2)
 2004630:	103ee83a 	callr	r2
 2004634:	00000206 	br	2004640 <alt_get_errno+0x3c>
 2004638:	00808074 	movhi	r2,513
 200463c:	10a4c204 	addi	r2,r2,-27896
}
 2004640:	e037883a 	mov	sp,fp
 2004644:	dfc00117 	ldw	ra,4(sp)
 2004648:	df000017 	ldw	fp,0(sp)
 200464c:	dec00204 	addi	sp,sp,8
 2004650:	f800283a 	ret

02004654 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 2004654:	defff104 	addi	sp,sp,-60
 2004658:	dfc00e15 	stw	ra,56(sp)
 200465c:	df000d15 	stw	fp,52(sp)
 2004660:	df000d04 	addi	fp,sp,52
 2004664:	e13ffc15 	stw	r4,-16(fp)
 2004668:	e17ffd15 	stw	r5,-12(fp)
 200466c:	e1bffe15 	stw	r6,-8(fp)
 2004670:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u32         next;
  alt_u8          read_would_block = 0;
 2004674:	e03ff305 	stb	zero,-52(fp)
  int             count = 0;
 2004678:	e03ff415 	stw	zero,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 200467c:	e0bfff17 	ldw	r2,-4(fp)
 2004680:	1090000c 	andi	r2,r2,16384
 2004684:	1005003a 	cmpeq	r2,r2,zero
 2004688:	10803fcc 	andi	r2,r2,255
 200468c:	e0bff515 	stw	r2,-44(fp)
  /*
   * Calculate which slot in the circular buffer is the next one to read
   * data from.
   */

  next = (sp->rx_start + 1) & ALT_AVALON_UART_BUF_MSK;
 2004690:	e0bffc17 	ldw	r2,-16(fp)
 2004694:	10800217 	ldw	r2,8(r2)
 2004698:	10800044 	addi	r2,r2,1
 200469c:	10800fcc 	andi	r2,r2,63
 20046a0:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 20046a4:	00001906 	br	200470c <altera_avalon_uart_read+0xb8>
    {
      count++;
 20046a8:	e0bff417 	ldw	r2,-48(fp)
 20046ac:	10800044 	addi	r2,r2,1
 20046b0:	e0bff415 	stw	r2,-48(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 20046b4:	e0bffc17 	ldw	r2,-16(fp)
 20046b8:	10800217 	ldw	r2,8(r2)
 20046bc:	e0fffc17 	ldw	r3,-16(fp)
 20046c0:	1885883a 	add	r2,r3,r2
 20046c4:	10800704 	addi	r2,r2,28
 20046c8:	10800003 	ldbu	r2,0(r2)
 20046cc:	1007883a 	mov	r3,r2
 20046d0:	e0bffd17 	ldw	r2,-12(fp)
 20046d4:	10c00005 	stb	r3,0(r2)
 20046d8:	e0bffd17 	ldw	r2,-12(fp)
 20046dc:	10800044 	addi	r2,r2,1
 20046e0:	e0bffd15 	stw	r2,-12(fp)
      
      sp->rx_start = (++sp->rx_start) & ALT_AVALON_UART_BUF_MSK;
 20046e4:	e0bffc17 	ldw	r2,-16(fp)
 20046e8:	10800217 	ldw	r2,8(r2)
 20046ec:	10c00044 	addi	r3,r2,1
 20046f0:	e0bffc17 	ldw	r2,-16(fp)
 20046f4:	10c00215 	stw	r3,8(r2)
 20046f8:	e0bffc17 	ldw	r2,-16(fp)
 20046fc:	10800217 	ldw	r2,8(r2)
 2004700:	10c00fcc 	andi	r3,r2,63
 2004704:	e0bffc17 	ldw	r2,-16(fp)
 2004708:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 200470c:	e0fff417 	ldw	r3,-48(fp)
 2004710:	e0bffe17 	ldw	r2,-8(fp)
 2004714:	1880050e 	bge	r3,r2,200472c <altera_avalon_uart_read+0xd8>
 2004718:	e0bffc17 	ldw	r2,-16(fp)
 200471c:	10c00217 	ldw	r3,8(r2)
 2004720:	e0bffc17 	ldw	r2,-16(fp)
 2004724:	10800317 	ldw	r2,12(r2)
 2004728:	18bfdf1e 	bne	r3,r2,20046a8 <altera_avalon_uart_read+0x54>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 200472c:	e0bff417 	ldw	r2,-48(fp)
 2004730:	1000241e 	bne	r2,zero,20047c4 <altera_avalon_uart_read+0x170>
 2004734:	e0bffc17 	ldw	r2,-16(fp)
 2004738:	10c00217 	ldw	r3,8(r2)
 200473c:	e0bffc17 	ldw	r2,-16(fp)
 2004740:	10800317 	ldw	r2,12(r2)
 2004744:	18801f1e 	bne	r3,r2,20047c4 <altera_avalon_uart_read+0x170>
    {
      if (!block)
 2004748:	e0bff517 	ldw	r2,-44(fp)
 200474c:	1000061e 	bne	r2,zero,2004768 <altera_avalon_uart_read+0x114>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 2004750:	20046040 	call	2004604 <alt_get_errno>
 2004754:	00c002c4 	movi	r3,11
 2004758:	10c00015 	stw	r3,0(r2)
        read_would_block = 1;
 200475c:	00800044 	movi	r2,1
 2004760:	e0bff305 	stb	r2,-52(fp)
        break;
 2004764:	00001b06 	br	20047d4 <altera_avalon_uart_read+0x180>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004768:	0005303a 	rdctl	r2,status
 200476c:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004770:	e0fff817 	ldw	r3,-32(fp)
 2004774:	00bfff84 	movi	r2,-2
 2004778:	1884703a 	and	r2,r3,r2
 200477c:	1001703a 	wrctl	status,r2
  
  return context;
 2004780:	e0bff817 	ldw	r2,-32(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 2004784:	e0bff715 	stw	r2,-36(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 2004788:	e0bffc17 	ldw	r2,-16(fp)
 200478c:	10800117 	ldw	r2,4(r2)
 2004790:	10c02014 	ori	r3,r2,128
 2004794:	e0bffc17 	ldw	r2,-16(fp)
 2004798:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 200479c:	e0bffc17 	ldw	r2,-16(fp)
 20047a0:	10800017 	ldw	r2,0(r2)
 20047a4:	10800304 	addi	r2,r2,12
 20047a8:	e0fffc17 	ldw	r3,-16(fp)
 20047ac:	18c00117 	ldw	r3,4(r3)
 20047b0:	10c00035 	stwio	r3,0(r2)
 20047b4:	e0bff717 	ldw	r2,-36(fp)
 20047b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 20047bc:	e0bff917 	ldw	r2,-28(fp)
 20047c0:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 20047c4:	e0bff417 	ldw	r2,-48(fp)
 20047c8:	1000021e 	bne	r2,zero,20047d4 <altera_avalon_uart_read+0x180>
 20047cc:	e0bffe17 	ldw	r2,-8(fp)
 20047d0:	103fce1e 	bne	r2,zero,200470c <altera_avalon_uart_read+0xb8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20047d4:	0005303a 	rdctl	r2,status
 20047d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20047dc:	e0fffa17 	ldw	r3,-24(fp)
 20047e0:	00bfff84 	movi	r2,-2
 20047e4:	1884703a 	and	r2,r3,r2
 20047e8:	1001703a 	wrctl	status,r2
  
  return context;
 20047ec:	e0bffa17 	ldw	r2,-24(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 20047f0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 20047f4:	e0bffc17 	ldw	r2,-16(fp)
 20047f8:	10800117 	ldw	r2,4(r2)
 20047fc:	10c02014 	ori	r3,r2,128
 2004800:	e0bffc17 	ldw	r2,-16(fp)
 2004804:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2004808:	e0bffc17 	ldw	r2,-16(fp)
 200480c:	10800017 	ldw	r2,0(r2)
 2004810:	10800304 	addi	r2,r2,12
 2004814:	e0fffc17 	ldw	r3,-16(fp)
 2004818:	18c00117 	ldw	r3,4(r3)
 200481c:	10c00035 	stwio	r3,0(r2)
 2004820:	e0bff717 	ldw	r2,-36(fp)
 2004824:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004828:	e0bffb17 	ldw	r2,-20(fp)
 200482c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 2004830:	e0bff303 	ldbu	r2,-52(fp)
 2004834:	10000226 	beq	r2,zero,2004840 <altera_avalon_uart_read+0x1ec>
    return -EWOULDBLOCK;
 2004838:	00bffd44 	movi	r2,-11
 200483c:	00000106 	br	2004844 <altera_avalon_uart_read+0x1f0>
  }
  else {
    return count;
 2004840:	e0bff417 	ldw	r2,-48(fp)
  }
}
 2004844:	e037883a 	mov	sp,fp
 2004848:	dfc00117 	ldw	ra,4(sp)
 200484c:	df000017 	ldw	fp,0(sp)
 2004850:	dec00204 	addi	sp,sp,8
 2004854:	f800283a 	ret

02004858 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004858:	defffe04 	addi	sp,sp,-8
 200485c:	dfc00115 	stw	ra,4(sp)
 2004860:	df000015 	stw	fp,0(sp)
 2004864:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004868:	00808034 	movhi	r2,512
 200486c:	109df704 	addi	r2,r2,30684
 2004870:	10800017 	ldw	r2,0(r2)
 2004874:	10000526 	beq	r2,zero,200488c <alt_get_errno+0x34>
 2004878:	00808034 	movhi	r2,512
 200487c:	109df704 	addi	r2,r2,30684
 2004880:	10800017 	ldw	r2,0(r2)
 2004884:	103ee83a 	callr	r2
 2004888:	00000206 	br	2004894 <alt_get_errno+0x3c>
 200488c:	00808074 	movhi	r2,513
 2004890:	10a4c204 	addi	r2,r2,-27896
}
 2004894:	e037883a 	mov	sp,fp
 2004898:	dfc00117 	ldw	ra,4(sp)
 200489c:	df000017 	ldw	fp,0(sp)
 20048a0:	dec00204 	addi	sp,sp,8
 20048a4:	f800283a 	ret

020048a8 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 20048a8:	defff204 	addi	sp,sp,-56
 20048ac:	dfc00d15 	stw	ra,52(sp)
 20048b0:	df000c15 	stw	fp,48(sp)
 20048b4:	df000c04 	addi	fp,sp,48
 20048b8:	e13ffc15 	stw	r4,-16(fp)
 20048bc:	e17ffd15 	stw	r5,-12(fp)
 20048c0:	e1bffe15 	stw	r6,-8(fp)
 20048c4:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 20048c8:	e0bffe17 	ldw	r2,-8(fp)
 20048cc:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 20048d0:	e0bfff17 	ldw	r2,-4(fp)
 20048d4:	1090000c 	andi	r2,r2,16384
 20048d8:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20048dc:	00003b06 	br	20049cc <altera_avalon_uart_write+0x124>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 20048e0:	e0bffc17 	ldw	r2,-16(fp)
 20048e4:	10800517 	ldw	r2,20(r2)
 20048e8:	10800044 	addi	r2,r2,1
 20048ec:	10800fcc 	andi	r2,r2,63
 20048f0:	e0bff615 	stw	r2,-40(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 20048f4:	e0bffc17 	ldw	r2,-16(fp)
 20048f8:	10c00417 	ldw	r3,16(r2)
 20048fc:	e0bff617 	ldw	r2,-40(fp)
 2004900:	1880211e 	bne	r3,r2,2004988 <altera_avalon_uart_write+0xe0>
    {
      if (no_block)
 2004904:	e0bff517 	ldw	r2,-44(fp)
 2004908:	10000426 	beq	r2,zero,200491c <altera_avalon_uart_write+0x74>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 200490c:	20048580 	call	2004858 <alt_get_errno>
 2004910:	00c002c4 	movi	r3,11
 2004914:	10c00015 	stw	r3,0(r2)
        break;
 2004918:	00002e06 	br	20049d4 <altera_avalon_uart_write+0x12c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200491c:	0005303a 	rdctl	r2,status
 2004920:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004924:	e0fff817 	ldw	r3,-32(fp)
 2004928:	00bfff84 	movi	r2,-2
 200492c:	1884703a 	and	r2,r3,r2
 2004930:	1001703a 	wrctl	status,r2
  
  return context;
 2004934:	e0bff817 	ldw	r2,-32(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 2004938:	e0bff715 	stw	r2,-36(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 200493c:	e0bffc17 	ldw	r2,-16(fp)
 2004940:	10800117 	ldw	r2,4(r2)
 2004944:	10c11014 	ori	r3,r2,1088
 2004948:	e0bffc17 	ldw	r2,-16(fp)
 200494c:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2004950:	e0bffc17 	ldw	r2,-16(fp)
 2004954:	10800017 	ldw	r2,0(r2)
 2004958:	10800304 	addi	r2,r2,12
 200495c:	e0fffc17 	ldw	r3,-16(fp)
 2004960:	18c00117 	ldw	r3,4(r3)
 2004964:	10c00035 	stwio	r3,0(r2)
 2004968:	e0bff717 	ldw	r2,-36(fp)
 200496c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004970:	e0bff917 	ldw	r2,-28(fp)
 2004974:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 2004978:	e0bffc17 	ldw	r2,-16(fp)
 200497c:	10c00417 	ldw	r3,16(r2)
 2004980:	e0bff617 	ldw	r2,-40(fp)
 2004984:	18bffc26 	beq	r3,r2,2004978 <altera_avalon_uart_write+0xd0>
      }
    }

    count--;
 2004988:	e0bff417 	ldw	r2,-48(fp)
 200498c:	10bfffc4 	addi	r2,r2,-1
 2004990:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 2004994:	e0bffc17 	ldw	r2,-16(fp)
 2004998:	10800517 	ldw	r2,20(r2)
 200499c:	e0fffd17 	ldw	r3,-12(fp)
 20049a0:	18c00003 	ldbu	r3,0(r3)
 20049a4:	e13ffc17 	ldw	r4,-16(fp)
 20049a8:	2085883a 	add	r2,r4,r2
 20049ac:	10801704 	addi	r2,r2,92
 20049b0:	10c00005 	stb	r3,0(r2)
 20049b4:	e0bffd17 	ldw	r2,-12(fp)
 20049b8:	10800044 	addi	r2,r2,1
 20049bc:	e0bffd15 	stw	r2,-12(fp)
    sp->tx_end = next;
 20049c0:	e0bffc17 	ldw	r2,-16(fp)
 20049c4:	e0fff617 	ldw	r3,-40(fp)
 20049c8:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 20049cc:	e0bff417 	ldw	r2,-48(fp)
 20049d0:	103fc31e 	bne	r2,zero,20048e0 <altera_avalon_uart_write+0x38>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 20049d4:	0005303a 	rdctl	r2,status
 20049d8:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 20049dc:	e0fffa17 	ldw	r3,-24(fp)
 20049e0:	00bfff84 	movi	r2,-2
 20049e4:	1884703a 	and	r2,r3,r2
 20049e8:	1001703a 	wrctl	status,r2
  
  return context;
 20049ec:	e0bffa17 	ldw	r2,-24(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 20049f0:	e0bff715 	stw	r2,-36(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 20049f4:	e0bffc17 	ldw	r2,-16(fp)
 20049f8:	10800117 	ldw	r2,4(r2)
 20049fc:	10c11014 	ori	r3,r2,1088
 2004a00:	e0bffc17 	ldw	r2,-16(fp)
 2004a04:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 2004a08:	e0bffc17 	ldw	r2,-16(fp)
 2004a0c:	10800017 	ldw	r2,0(r2)
 2004a10:	10800304 	addi	r2,r2,12
 2004a14:	e0fffc17 	ldw	r3,-16(fp)
 2004a18:	18c00117 	ldw	r3,4(r3)
 2004a1c:	10c00035 	stwio	r3,0(r2)
 2004a20:	e0bff717 	ldw	r2,-36(fp)
 2004a24:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004a28:	e0bffb17 	ldw	r2,-20(fp)
 2004a2c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 2004a30:	e0fffe17 	ldw	r3,-8(fp)
 2004a34:	e0bff417 	ldw	r2,-48(fp)
 2004a38:	1885c83a 	sub	r2,r3,r2
}
 2004a3c:	e037883a 	mov	sp,fp
 2004a40:	dfc00117 	ldw	ra,4(sp)
 2004a44:	df000017 	ldw	fp,0(sp)
 2004a48:	dec00204 	addi	sp,sp,8
 2004a4c:	f800283a 	ret

02004a50 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 2004a50:	defff504 	addi	sp,sp,-44
 2004a54:	df000a15 	stw	fp,40(sp)
 2004a58:	df000a04 	addi	fp,sp,40
 2004a5c:	e13ffc15 	stw	r4,-16(fp)
 2004a60:	e17ffd15 	stw	r5,-12(fp)
 2004a64:	e1bffe15 	stw	r6,-8(fp)
 2004a68:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 2004a6c:	e03ff615 	stw	zero,-40(fp)
 2004a70:	00808074 	movhi	r2,513
 2004a74:	10a4c704 	addi	r2,r2,-27876
 2004a78:	10800017 	ldw	r2,0(r2)
  
  if (alt_ticks_per_second ())
 2004a7c:	10003f26 	beq	r2,zero,2004b7c <alt_alarm_start+0x12c>
  {
    if (alarm)
 2004a80:	e0bffc17 	ldw	r2,-16(fp)
 2004a84:	10003b26 	beq	r2,zero,2004b74 <alt_alarm_start+0x124>
    {
      alarm->callback = callback;
 2004a88:	e0bffc17 	ldw	r2,-16(fp)
 2004a8c:	e0fffe17 	ldw	r3,-8(fp)
 2004a90:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 2004a94:	e0bffc17 	ldw	r2,-16(fp)
 2004a98:	e0ffff17 	ldw	r3,-4(fp)
 2004a9c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004aa0:	0005303a 	rdctl	r2,status
 2004aa4:	e0bff815 	stw	r2,-32(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004aa8:	e0fff817 	ldw	r3,-32(fp)
 2004aac:	00bfff84 	movi	r2,-2
 2004ab0:	1884703a 	and	r2,r3,r2
 2004ab4:	1001703a 	wrctl	status,r2
  
  return context;
 2004ab8:	e0bff817 	ldw	r2,-32(fp)
 
      irq_context = alt_irq_disable_all ();
 2004abc:	e0bff715 	stw	r2,-36(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 2004ac0:	00808074 	movhi	r2,513
 2004ac4:	10a4c804 	addi	r2,r2,-27872
 2004ac8:	10800017 	ldw	r2,0(r2)
      
      current_nticks = alt_nticks();
 2004acc:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 2004ad0:	e0fffd17 	ldw	r3,-12(fp)
 2004ad4:	e0bff617 	ldw	r2,-40(fp)
 2004ad8:	1885883a 	add	r2,r3,r2
 2004adc:	10c00044 	addi	r3,r2,1
 2004ae0:	e0bffc17 	ldw	r2,-16(fp)
 2004ae4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 2004ae8:	e0bffc17 	ldw	r2,-16(fp)
 2004aec:	10c00217 	ldw	r3,8(r2)
 2004af0:	e0bff617 	ldw	r2,-40(fp)
 2004af4:	1880042e 	bgeu	r3,r2,2004b08 <alt_alarm_start+0xb8>
      {
        alarm->rollover = 1;
 2004af8:	e0bffc17 	ldw	r2,-16(fp)
 2004afc:	00c00044 	movi	r3,1
 2004b00:	10c00405 	stb	r3,16(r2)
 2004b04:	00000206 	br	2004b10 <alt_alarm_start+0xc0>
      }
      else
      {
        alarm->rollover = 0;
 2004b08:	e0bffc17 	ldw	r2,-16(fp)
 2004b0c:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 2004b10:	e0bffc17 	ldw	r2,-16(fp)
 2004b14:	00c08034 	movhi	r3,512
 2004b18:	18ddfa04 	addi	r3,r3,30696
 2004b1c:	e0fff915 	stw	r3,-28(fp)
 2004b20:	e0bffa15 	stw	r2,-24(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2004b24:	e0bffa17 	ldw	r2,-24(fp)
 2004b28:	e0fff917 	ldw	r3,-28(fp)
 2004b2c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2004b30:	e0bff917 	ldw	r2,-28(fp)
 2004b34:	10c00017 	ldw	r3,0(r2)
 2004b38:	e0bffa17 	ldw	r2,-24(fp)
 2004b3c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004b40:	e0bff917 	ldw	r2,-28(fp)
 2004b44:	10800017 	ldw	r2,0(r2)
 2004b48:	e0fffa17 	ldw	r3,-24(fp)
 2004b4c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004b50:	e0bff917 	ldw	r2,-28(fp)
 2004b54:	e0fffa17 	ldw	r3,-24(fp)
 2004b58:	10c00015 	stw	r3,0(r2)
 2004b5c:	e0bff717 	ldw	r2,-36(fp)
 2004b60:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004b64:	e0bffb17 	ldw	r2,-20(fp)
 2004b68:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 2004b6c:	0005883a 	mov	r2,zero
 2004b70:	00000306 	br	2004b80 <alt_alarm_start+0x130>
    }
    else
    {
      return -EINVAL;
 2004b74:	00bffa84 	movi	r2,-22
 2004b78:	00000106 	br	2004b80 <alt_alarm_start+0x130>
    }
  }
  else
  {
    return -ENOTSUP;
 2004b7c:	00bfde84 	movi	r2,-134
  }
}
 2004b80:	e037883a 	mov	sp,fp
 2004b84:	df000017 	ldw	fp,0(sp)
 2004b88:	dec00104 	addi	sp,sp,4
 2004b8c:	f800283a 	ret

02004b90 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 2004b90:	defffe04 	addi	sp,sp,-8
 2004b94:	df000115 	stw	fp,4(sp)
 2004b98:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2004b9c:	e03fff15 	stw	zero,-4(fp)
 2004ba0:	00000506 	br	2004bb8 <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
 2004ba4:	e0bfff17 	ldw	r2,-4(fp)
 2004ba8:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
 2004bac:	e0bfff17 	ldw	r2,-4(fp)
 2004bb0:	10800804 	addi	r2,r2,32
 2004bb4:	e0bfff15 	stw	r2,-4(fp)
 2004bb8:	e0bfff17 	ldw	r2,-4(fp)
 2004bbc:	10820030 	cmpltui	r2,r2,2048
 2004bc0:	103ff81e 	bne	r2,zero,2004ba4 <alt_dcache_flush_all+0x14>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 2004bc4:	e037883a 	mov	sp,fp
 2004bc8:	df000017 	ldw	fp,0(sp)
 2004bcc:	dec00104 	addi	sp,sp,4
 2004bd0:	f800283a 	ret

02004bd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 2004bd4:	defffe04 	addi	sp,sp,-8
 2004bd8:	dfc00115 	stw	ra,4(sp)
 2004bdc:	df000015 	stw	fp,0(sp)
 2004be0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 2004be4:	00808034 	movhi	r2,512
 2004be8:	109df704 	addi	r2,r2,30684
 2004bec:	10800017 	ldw	r2,0(r2)
 2004bf0:	10000526 	beq	r2,zero,2004c08 <alt_get_errno+0x34>
 2004bf4:	00808034 	movhi	r2,512
 2004bf8:	109df704 	addi	r2,r2,30684
 2004bfc:	10800017 	ldw	r2,0(r2)
 2004c00:	103ee83a 	callr	r2
 2004c04:	00000206 	br	2004c10 <alt_get_errno+0x3c>
 2004c08:	00808074 	movhi	r2,513
 2004c0c:	10a4c204 	addi	r2,r2,-27896
}
 2004c10:	e037883a 	mov	sp,fp
 2004c14:	dfc00117 	ldw	ra,4(sp)
 2004c18:	df000017 	ldw	fp,0(sp)
 2004c1c:	dec00204 	addi	sp,sp,8
 2004c20:	f800283a 	ret

02004c24 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 2004c24:	defffa04 	addi	sp,sp,-24
 2004c28:	dfc00515 	stw	ra,20(sp)
 2004c2c:	df000415 	stw	fp,16(sp)
 2004c30:	df000404 	addi	fp,sp,16
 2004c34:	e13ffe15 	stw	r4,-8(fp)
 2004c38:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 2004c3c:	e0bffe17 	ldw	r2,-8(fp)
 2004c40:	10000326 	beq	r2,zero,2004c50 <alt_dev_llist_insert+0x2c>
 2004c44:	e0bffe17 	ldw	r2,-8(fp)
 2004c48:	10800217 	ldw	r2,8(r2)
 2004c4c:	1000051e 	bne	r2,zero,2004c64 <alt_dev_llist_insert+0x40>
  {
    ALT_ERRNO = EINVAL;
 2004c50:	2004bd40 	call	2004bd4 <alt_get_errno>
 2004c54:	00c00584 	movi	r3,22
 2004c58:	10c00015 	stw	r3,0(r2)
    return -EINVAL;
 2004c5c:	00bffa84 	movi	r2,-22
 2004c60:	00001306 	br	2004cb0 <alt_dev_llist_insert+0x8c>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 2004c64:	e0bffe17 	ldw	r2,-8(fp)
 2004c68:	e0ffff17 	ldw	r3,-4(fp)
 2004c6c:	e0fffc15 	stw	r3,-16(fp)
 2004c70:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 2004c74:	e0bffd17 	ldw	r2,-12(fp)
 2004c78:	e0fffc17 	ldw	r3,-16(fp)
 2004c7c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 2004c80:	e0bffc17 	ldw	r2,-16(fp)
 2004c84:	10c00017 	ldw	r3,0(r2)
 2004c88:	e0bffd17 	ldw	r2,-12(fp)
 2004c8c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 2004c90:	e0bffc17 	ldw	r2,-16(fp)
 2004c94:	10800017 	ldw	r2,0(r2)
 2004c98:	e0fffd17 	ldw	r3,-12(fp)
 2004c9c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 2004ca0:	e0bffc17 	ldw	r2,-16(fp)
 2004ca4:	e0fffd17 	ldw	r3,-12(fp)
 2004ca8:	10c00015 	stw	r3,0(r2)

  return 0;  
 2004cac:	0005883a 	mov	r2,zero
}
 2004cb0:	e037883a 	mov	sp,fp
 2004cb4:	dfc00117 	ldw	ra,4(sp)
 2004cb8:	df000017 	ldw	fp,0(sp)
 2004cbc:	dec00204 	addi	sp,sp,8
 2004cc0:	f800283a 	ret

02004cc4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 2004cc4:	defffd04 	addi	sp,sp,-12
 2004cc8:	dfc00215 	stw	ra,8(sp)
 2004ccc:	df000115 	stw	fp,4(sp)
 2004cd0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2004cd4:	00808034 	movhi	r2,512
 2004cd8:	10972304 	addi	r2,r2,23692
 2004cdc:	e0bfff15 	stw	r2,-4(fp)
 2004ce0:	00000606 	br	2004cfc <_do_ctors+0x38>
        (*ctor) (); 
 2004ce4:	e0bfff17 	ldw	r2,-4(fp)
 2004ce8:	10800017 	ldw	r2,0(r2)
 2004cec:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 2004cf0:	e0bfff17 	ldw	r2,-4(fp)
 2004cf4:	10bfff04 	addi	r2,r2,-4
 2004cf8:	e0bfff15 	stw	r2,-4(fp)
 2004cfc:	e0ffff17 	ldw	r3,-4(fp)
 2004d00:	00808034 	movhi	r2,512
 2004d04:	10972404 	addi	r2,r2,23696
 2004d08:	18bff62e 	bgeu	r3,r2,2004ce4 <_do_ctors+0x20>
        (*ctor) (); 
}
 2004d0c:	e037883a 	mov	sp,fp
 2004d10:	dfc00117 	ldw	ra,4(sp)
 2004d14:	df000017 	ldw	fp,0(sp)
 2004d18:	dec00204 	addi	sp,sp,8
 2004d1c:	f800283a 	ret

02004d20 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 2004d20:	defffd04 	addi	sp,sp,-12
 2004d24:	dfc00215 	stw	ra,8(sp)
 2004d28:	df000115 	stw	fp,4(sp)
 2004d2c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004d30:	00808034 	movhi	r2,512
 2004d34:	10972304 	addi	r2,r2,23692
 2004d38:	e0bfff15 	stw	r2,-4(fp)
 2004d3c:	00000606 	br	2004d58 <_do_dtors+0x38>
        (*dtor) (); 
 2004d40:	e0bfff17 	ldw	r2,-4(fp)
 2004d44:	10800017 	ldw	r2,0(r2)
 2004d48:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 2004d4c:	e0bfff17 	ldw	r2,-4(fp)
 2004d50:	10bfff04 	addi	r2,r2,-4
 2004d54:	e0bfff15 	stw	r2,-4(fp)
 2004d58:	e0ffff17 	ldw	r3,-4(fp)
 2004d5c:	00808034 	movhi	r2,512
 2004d60:	10972404 	addi	r2,r2,23696
 2004d64:	18bff62e 	bgeu	r3,r2,2004d40 <_do_dtors+0x20>
        (*dtor) (); 
}
 2004d68:	e037883a 	mov	sp,fp
 2004d6c:	dfc00117 	ldw	ra,4(sp)
 2004d70:	df000017 	ldw	fp,0(sp)
 2004d74:	dec00204 	addi	sp,sp,8
 2004d78:	f800283a 	ret

02004d7c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 2004d7c:	defffe04 	addi	sp,sp,-8
 2004d80:	dfc00115 	stw	ra,4(sp)
 2004d84:	df000015 	stw	fp,0(sp)
 2004d88:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
 2004d8c:	0009883a 	mov	r4,zero
 2004d90:	01440004 	movi	r5,4096
 2004d94:	20058300 	call	2005830 <alt_icache_flush>
#endif
}
 2004d98:	e037883a 	mov	sp,fp
 2004d9c:	dfc00117 	ldw	ra,4(sp)
 2004da0:	df000017 	ldw	fp,0(sp)
 2004da4:	dec00204 	addi	sp,sp,8
 2004da8:	f800283a 	ret

02004dac <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2004dac:	defff904 	addi	sp,sp,-28
 2004db0:	dfc00615 	stw	ra,24(sp)
 2004db4:	df000515 	stw	fp,20(sp)
 2004db8:	df000504 	addi	fp,sp,20
 2004dbc:	e13ffc15 	stw	r4,-16(fp)
 2004dc0:	e17ffd15 	stw	r5,-12(fp)
 2004dc4:	e1bffe15 	stw	r6,-8(fp)
 2004dc8:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 2004dcc:	e0800217 	ldw	r2,8(fp)
 2004dd0:	d8800015 	stw	r2,0(sp)
 2004dd4:	e13ffc17 	ldw	r4,-16(fp)
 2004dd8:	e17ffd17 	ldw	r5,-12(fp)
 2004ddc:	e1bffe17 	ldw	r6,-8(fp)
 2004de0:	e1ffff17 	ldw	r7,-4(fp)
 2004de4:	2004f840 	call	2004f84 <alt_iic_isr_register>
}  
 2004de8:	e037883a 	mov	sp,fp
 2004dec:	dfc00117 	ldw	ra,4(sp)
 2004df0:	df000017 	ldw	fp,0(sp)
 2004df4:	dec00204 	addi	sp,sp,8
 2004df8:	f800283a 	ret

02004dfc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 2004dfc:	defff904 	addi	sp,sp,-28
 2004e00:	df000615 	stw	fp,24(sp)
 2004e04:	df000604 	addi	fp,sp,24
 2004e08:	e13ffe15 	stw	r4,-8(fp)
 2004e0c:	e17fff15 	stw	r5,-4(fp)
 2004e10:	e0bfff17 	ldw	r2,-4(fp)
 2004e14:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004e18:	0005303a 	rdctl	r2,status
 2004e1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004e20:	e0fffb17 	ldw	r3,-20(fp)
 2004e24:	00bfff84 	movi	r2,-2
 2004e28:	1884703a 	and	r2,r3,r2
 2004e2c:	1001703a 	wrctl	status,r2
  
  return context;
 2004e30:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004e34:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 2004e38:	e0bffa17 	ldw	r2,-24(fp)
 2004e3c:	00c00044 	movi	r3,1
 2004e40:	1884983a 	sll	r2,r3,r2
 2004e44:	1007883a 	mov	r3,r2
 2004e48:	00808074 	movhi	r2,513
 2004e4c:	10a4c604 	addi	r2,r2,-27880
 2004e50:	10800017 	ldw	r2,0(r2)
 2004e54:	1886b03a 	or	r3,r3,r2
 2004e58:	00808074 	movhi	r2,513
 2004e5c:	10a4c604 	addi	r2,r2,-27880
 2004e60:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2004e64:	00808074 	movhi	r2,513
 2004e68:	10a4c604 	addi	r2,r2,-27880
 2004e6c:	10800017 	ldw	r2,0(r2)
 2004e70:	100170fa 	wrctl	ienable,r2
 2004e74:	e0bffc17 	ldw	r2,-16(fp)
 2004e78:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004e7c:	e0bffd17 	ldw	r2,-12(fp)
 2004e80:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004e84:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
}
 2004e88:	e037883a 	mov	sp,fp
 2004e8c:	df000017 	ldw	fp,0(sp)
 2004e90:	dec00104 	addi	sp,sp,4
 2004e94:	f800283a 	ret

02004e98 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 2004e98:	defff904 	addi	sp,sp,-28
 2004e9c:	df000615 	stw	fp,24(sp)
 2004ea0:	df000604 	addi	fp,sp,24
 2004ea4:	e13ffe15 	stw	r4,-8(fp)
 2004ea8:	e17fff15 	stw	r5,-4(fp)
 2004eac:	e0bfff17 	ldw	r2,-4(fp)
 2004eb0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004eb4:	0005303a 	rdctl	r2,status
 2004eb8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004ebc:	e0fffb17 	ldw	r3,-20(fp)
 2004ec0:	00bfff84 	movi	r2,-2
 2004ec4:	1884703a 	and	r2,r3,r2
 2004ec8:	1001703a 	wrctl	status,r2
  
  return context;
 2004ecc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 2004ed0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 2004ed4:	e0bffa17 	ldw	r2,-24(fp)
 2004ed8:	00c00044 	movi	r3,1
 2004edc:	1884983a 	sll	r2,r3,r2
 2004ee0:	0084303a 	nor	r2,zero,r2
 2004ee4:	1007883a 	mov	r3,r2
 2004ee8:	00808074 	movhi	r2,513
 2004eec:	10a4c604 	addi	r2,r2,-27880
 2004ef0:	10800017 	ldw	r2,0(r2)
 2004ef4:	1886703a 	and	r3,r3,r2
 2004ef8:	00808074 	movhi	r2,513
 2004efc:	10a4c604 	addi	r2,r2,-27880
 2004f00:	10c00015 	stw	r3,0(r2)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 2004f04:	00808074 	movhi	r2,513
 2004f08:	10a4c604 	addi	r2,r2,-27880
 2004f0c:	10800017 	ldw	r2,0(r2)
 2004f10:	100170fa 	wrctl	ienable,r2
 2004f14:	e0bffc17 	ldw	r2,-16(fp)
 2004f18:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2004f1c:	e0bffd17 	ldw	r2,-12(fp)
 2004f20:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 2004f24:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
}
 2004f28:	e037883a 	mov	sp,fp
 2004f2c:	df000017 	ldw	fp,0(sp)
 2004f30:	dec00104 	addi	sp,sp,4
 2004f34:	f800283a 	ret

02004f38 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 2004f38:	defffc04 	addi	sp,sp,-16
 2004f3c:	df000315 	stw	fp,12(sp)
 2004f40:	df000304 	addi	fp,sp,12
 2004f44:	e13ffe15 	stw	r4,-8(fp)
 2004f48:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 2004f4c:	000530fa 	rdctl	r2,ienable
 2004f50:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 2004f54:	e0bfff17 	ldw	r2,-4(fp)
 2004f58:	00c00044 	movi	r3,1
 2004f5c:	1884983a 	sll	r2,r3,r2
 2004f60:	1007883a 	mov	r3,r2
 2004f64:	e0bffd17 	ldw	r2,-12(fp)
 2004f68:	1884703a 	and	r2,r3,r2
 2004f6c:	1004c03a 	cmpne	r2,r2,zero
 2004f70:	10803fcc 	andi	r2,r2,255
}
 2004f74:	e037883a 	mov	sp,fp
 2004f78:	df000017 	ldw	fp,0(sp)
 2004f7c:	dec00104 	addi	sp,sp,4
 2004f80:	f800283a 	ret

02004f84 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 2004f84:	defff504 	addi	sp,sp,-44
 2004f88:	dfc00a15 	stw	ra,40(sp)
 2004f8c:	df000915 	stw	fp,36(sp)
 2004f90:	df000904 	addi	fp,sp,36
 2004f94:	e13ffc15 	stw	r4,-16(fp)
 2004f98:	e17ffd15 	stw	r5,-12(fp)
 2004f9c:	e1bffe15 	stw	r6,-8(fp)
 2004fa0:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 2004fa4:	00bffa84 	movi	r2,-22
 2004fa8:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 2004fac:	e0bffd17 	ldw	r2,-12(fp)
 2004fb0:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 2004fb4:	e0bff817 	ldw	r2,-32(fp)
 2004fb8:	10800808 	cmpgei	r2,r2,32
 2004fbc:	1000271e 	bne	r2,zero,200505c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 2004fc0:	0005303a 	rdctl	r2,status
 2004fc4:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2004fc8:	e0fffa17 	ldw	r3,-24(fp)
 2004fcc:	00bfff84 	movi	r2,-2
 2004fd0:	1884703a 	and	r2,r3,r2
 2004fd4:	1001703a 	wrctl	status,r2
  
  return context;
 2004fd8:	e0bffa17 	ldw	r2,-24(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 2004fdc:	e0bff915 	stw	r2,-28(fp)

    alt_irq[id].handler = isr;
 2004fe0:	00c08074 	movhi	r3,513
 2004fe4:	18e4d304 	addi	r3,r3,-27828
 2004fe8:	e0bff817 	ldw	r2,-32(fp)
 2004fec:	100490fa 	slli	r2,r2,3
 2004ff0:	1885883a 	add	r2,r3,r2
 2004ff4:	e0fffe17 	ldw	r3,-8(fp)
 2004ff8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 2004ffc:	00c08074 	movhi	r3,513
 2005000:	18e4d304 	addi	r3,r3,-27828
 2005004:	e0bff817 	ldw	r2,-32(fp)
 2005008:	100490fa 	slli	r2,r2,3
 200500c:	1885883a 	add	r2,r3,r2
 2005010:	10800104 	addi	r2,r2,4
 2005014:	e0ffff17 	ldw	r3,-4(fp)
 2005018:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 200501c:	e0bffe17 	ldw	r2,-8(fp)
 2005020:	10000526 	beq	r2,zero,2005038 <alt_iic_isr_register+0xb4>
 2005024:	e0bff817 	ldw	r2,-32(fp)
 2005028:	e13ffc17 	ldw	r4,-16(fp)
 200502c:	100b883a 	mov	r5,r2
 2005030:	2004dfc0 	call	2004dfc <alt_ic_irq_enable>
 2005034:	00000406 	br	2005048 <alt_iic_isr_register+0xc4>
 2005038:	e0bff817 	ldw	r2,-32(fp)
 200503c:	e13ffc17 	ldw	r4,-16(fp)
 2005040:	100b883a 	mov	r5,r2
 2005044:	2004e980 	call	2004e98 <alt_ic_irq_disable>
 2005048:	e0bff715 	stw	r2,-36(fp)
 200504c:	e0bff917 	ldw	r2,-28(fp)
 2005050:	e0bffb15 	stw	r2,-20(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 2005054:	e0bffb17 	ldw	r2,-20(fp)
 2005058:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 200505c:	e0bff717 	ldw	r2,-36(fp)
}
 2005060:	e037883a 	mov	sp,fp
 2005064:	dfc00117 	ldw	ra,4(sp)
 2005068:	df000017 	ldw	fp,0(sp)
 200506c:	dec00204 	addi	sp,sp,8
 2005070:	f800283a 	ret

02005074 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 2005074:	defff904 	addi	sp,sp,-28
 2005078:	dfc00615 	stw	ra,24(sp)
 200507c:	df000515 	stw	fp,20(sp)
 2005080:	df000504 	addi	fp,sp,20
 2005084:	e13ffc15 	stw	r4,-16(fp)
 2005088:	e17ffd15 	stw	r5,-12(fp)
 200508c:	e1bffe15 	stw	r6,-8(fp)
 2005090:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
 2005094:	e13ffd17 	ldw	r4,-12(fp)
 2005098:	e17ffe17 	ldw	r5,-8(fp)
 200509c:	e1bfff17 	ldw	r6,-4(fp)
 20050a0:	20052c80 	call	20052c8 <open>
 20050a4:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
 20050a8:	e0bffb17 	ldw	r2,-20(fp)
 20050ac:	10001c16 	blt	r2,zero,2005120 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
 20050b0:	00c08034 	movhi	r3,512
 20050b4:	18d94504 	addi	r3,r3,25876
 20050b8:	e0bffb17 	ldw	r2,-20(fp)
 20050bc:	10800324 	muli	r2,r2,12
 20050c0:	1885883a 	add	r2,r3,r2
 20050c4:	10c00017 	ldw	r3,0(r2)
 20050c8:	e0bffc17 	ldw	r2,-16(fp)
 20050cc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 20050d0:	00c08034 	movhi	r3,512
 20050d4:	18d94504 	addi	r3,r3,25876
 20050d8:	e0bffb17 	ldw	r2,-20(fp)
 20050dc:	10800324 	muli	r2,r2,12
 20050e0:	1885883a 	add	r2,r3,r2
 20050e4:	10800104 	addi	r2,r2,4
 20050e8:	10c00017 	ldw	r3,0(r2)
 20050ec:	e0bffc17 	ldw	r2,-16(fp)
 20050f0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 20050f4:	00c08034 	movhi	r3,512
 20050f8:	18d94504 	addi	r3,r3,25876
 20050fc:	e0bffb17 	ldw	r2,-20(fp)
 2005100:	10800324 	muli	r2,r2,12
 2005104:	1885883a 	add	r2,r3,r2
 2005108:	10800204 	addi	r2,r2,8
 200510c:	10c00017 	ldw	r3,0(r2)
 2005110:	e0bffc17 	ldw	r2,-16(fp)
 2005114:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 2005118:	e13ffb17 	ldw	r4,-20(fp)
 200511c:	20033c80 	call	20033c8 <alt_release_fd>
  }
} 
 2005120:	e037883a 	mov	sp,fp
 2005124:	dfc00117 	ldw	ra,4(sp)
 2005128:	df000017 	ldw	fp,0(sp)
 200512c:	dec00204 	addi	sp,sp,8
 2005130:	f800283a 	ret

02005134 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 2005134:	defffb04 	addi	sp,sp,-20
 2005138:	dfc00415 	stw	ra,16(sp)
 200513c:	df000315 	stw	fp,12(sp)
 2005140:	df000304 	addi	fp,sp,12
 2005144:	e13ffd15 	stw	r4,-12(fp)
 2005148:	e17ffe15 	stw	r5,-8(fp)
 200514c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 2005150:	01008034 	movhi	r4,512
 2005154:	21194804 	addi	r4,r4,25888
 2005158:	e17ffd17 	ldw	r5,-12(fp)
 200515c:	01800044 	movi	r6,1
 2005160:	01c07fc4 	movi	r7,511
 2005164:	20050740 	call	2005074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 2005168:	01008034 	movhi	r4,512
 200516c:	21194504 	addi	r4,r4,25876
 2005170:	e17ffe17 	ldw	r5,-8(fp)
 2005174:	000d883a 	mov	r6,zero
 2005178:	01c07fc4 	movi	r7,511
 200517c:	20050740 	call	2005074 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 2005180:	01008034 	movhi	r4,512
 2005184:	21194b04 	addi	r4,r4,25900
 2005188:	e17fff17 	ldw	r5,-4(fp)
 200518c:	01800044 	movi	r6,1
 2005190:	01c07fc4 	movi	r7,511
 2005194:	20050740 	call	2005074 <alt_open_fd>
}  
 2005198:	e037883a 	mov	sp,fp
 200519c:	dfc00117 	ldw	ra,4(sp)
 20051a0:	df000017 	ldw	fp,0(sp)
 20051a4:	dec00204 	addi	sp,sp,8
 20051a8:	f800283a 	ret

020051ac <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 20051ac:	defffe04 	addi	sp,sp,-8
 20051b0:	dfc00115 	stw	ra,4(sp)
 20051b4:	df000015 	stw	fp,0(sp)
 20051b8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 20051bc:	00808034 	movhi	r2,512
 20051c0:	109df704 	addi	r2,r2,30684
 20051c4:	10800017 	ldw	r2,0(r2)
 20051c8:	10000526 	beq	r2,zero,20051e0 <alt_get_errno+0x34>
 20051cc:	00808034 	movhi	r2,512
 20051d0:	109df704 	addi	r2,r2,30684
 20051d4:	10800017 	ldw	r2,0(r2)
 20051d8:	103ee83a 	callr	r2
 20051dc:	00000206 	br	20051e8 <alt_get_errno+0x3c>
 20051e0:	00808074 	movhi	r2,513
 20051e4:	10a4c204 	addi	r2,r2,-27896
}
 20051e8:	e037883a 	mov	sp,fp
 20051ec:	dfc00117 	ldw	ra,4(sp)
 20051f0:	df000017 	ldw	fp,0(sp)
 20051f4:	dec00204 	addi	sp,sp,8
 20051f8:	f800283a 	ret

020051fc <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 20051fc:	defffd04 	addi	sp,sp,-12
 2005200:	df000215 	stw	fp,8(sp)
 2005204:	df000204 	addi	fp,sp,8
 2005208:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 200520c:	e0bfff17 	ldw	r2,-4(fp)
 2005210:	10800217 	ldw	r2,8(r2)
 2005214:	10d00034 	orhi	r3,r2,16384
 2005218:	e0bfff17 	ldw	r2,-4(fp)
 200521c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2005220:	e03ffe15 	stw	zero,-8(fp)
 2005224:	00001d06 	br	200529c <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2005228:	00c08034 	movhi	r3,512
 200522c:	18d94504 	addi	r3,r3,25876
 2005230:	e0bffe17 	ldw	r2,-8(fp)
 2005234:	10800324 	muli	r2,r2,12
 2005238:	1885883a 	add	r2,r3,r2
 200523c:	10c00017 	ldw	r3,0(r2)
 2005240:	e0bfff17 	ldw	r2,-4(fp)
 2005244:	10800017 	ldw	r2,0(r2)
 2005248:	1880111e 	bne	r3,r2,2005290 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 200524c:	00c08034 	movhi	r3,512
 2005250:	18d94504 	addi	r3,r3,25876
 2005254:	e0bffe17 	ldw	r2,-8(fp)
 2005258:	10800324 	muli	r2,r2,12
 200525c:	1885883a 	add	r2,r3,r2
 2005260:	10800204 	addi	r2,r2,8
 2005264:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 2005268:	1000090e 	bge	r2,zero,2005290 <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 200526c:	e0bffe17 	ldw	r2,-8(fp)
 2005270:	10c00324 	muli	r3,r2,12
 2005274:	00808034 	movhi	r2,512
 2005278:	10994504 	addi	r2,r2,25876
 200527c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 2005280:	e0bfff17 	ldw	r2,-4(fp)
 2005284:	18800226 	beq	r3,r2,2005290 <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 2005288:	00bffcc4 	movi	r2,-13
 200528c:	00000a06 	br	20052b8 <alt_file_locked+0xbc>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 2005290:	e0bffe17 	ldw	r2,-8(fp)
 2005294:	10800044 	addi	r2,r2,1
 2005298:	e0bffe15 	stw	r2,-8(fp)
 200529c:	00808034 	movhi	r2,512
 20052a0:	109df604 	addi	r2,r2,30680
 20052a4:	10800017 	ldw	r2,0(r2)
 20052a8:	1007883a 	mov	r3,r2
 20052ac:	e0bffe17 	ldw	r2,-8(fp)
 20052b0:	18bfdd2e 	bgeu	r3,r2,2005228 <alt_file_locked+0x2c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 20052b4:	0005883a 	mov	r2,zero
}
 20052b8:	e037883a 	mov	sp,fp
 20052bc:	df000017 	ldw	fp,0(sp)
 20052c0:	dec00104 	addi	sp,sp,4
 20052c4:	f800283a 	ret

020052c8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 20052c8:	defff604 	addi	sp,sp,-40
 20052cc:	dfc00915 	stw	ra,36(sp)
 20052d0:	df000815 	stw	fp,32(sp)
 20052d4:	df000804 	addi	fp,sp,32
 20052d8:	e13ffd15 	stw	r4,-12(fp)
 20052dc:	e17ffe15 	stw	r5,-8(fp)
 20052e0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 20052e4:	00bfffc4 	movi	r2,-1
 20052e8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 20052ec:	00bffb44 	movi	r2,-19
 20052f0:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 20052f4:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 20052f8:	e13ffd17 	ldw	r4,-12(fp)
 20052fc:	01408034 	movhi	r5,512
 2005300:	295df404 	addi	r5,r5,30672
 2005304:	20055d80 	call	20055d8 <alt_find_dev>
 2005308:	e0bff815 	stw	r2,-32(fp)
 200530c:	e0bff817 	ldw	r2,-32(fp)
 2005310:	1000051e 	bne	r2,zero,2005328 <open+0x60>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 2005314:	e13ffd17 	ldw	r4,-12(fp)
 2005318:	20056680 	call	2005668 <alt_find_file>
 200531c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 2005320:	00800044 	movi	r2,1
 2005324:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 2005328:	e0bff817 	ldw	r2,-32(fp)
 200532c:	10002926 	beq	r2,zero,20053d4 <open+0x10c>
  {
    if ((index = alt_get_fd (dev)) < 0)
 2005330:	e13ff817 	ldw	r4,-32(fp)
 2005334:	200577c0 	call	200577c <alt_get_fd>
 2005338:	e0bff915 	stw	r2,-28(fp)
 200533c:	e0bff917 	ldw	r2,-28(fp)
 2005340:	1000030e 	bge	r2,zero,2005350 <open+0x88>
    {
      status = index;
 2005344:	e0bff917 	ldw	r2,-28(fp)
 2005348:	e0bffa15 	stw	r2,-24(fp)
 200534c:	00002306 	br	20053dc <open+0x114>
    }
    else
    {
      fd = &alt_fd_list[index];
 2005350:	e0bff917 	ldw	r2,-28(fp)
 2005354:	10c00324 	muli	r3,r2,12
 2005358:	00808034 	movhi	r2,512
 200535c:	10994504 	addi	r2,r2,25876
 2005360:	1885883a 	add	r2,r3,r2
 2005364:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 2005368:	e0fffe17 	ldw	r3,-8(fp)
 200536c:	00900034 	movhi	r2,16384
 2005370:	10bfffc4 	addi	r2,r2,-1
 2005374:	1886703a 	and	r3,r3,r2
 2005378:	e0bffc17 	ldw	r2,-16(fp)
 200537c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 2005380:	e0bffb17 	ldw	r2,-20(fp)
 2005384:	1000051e 	bne	r2,zero,200539c <open+0xd4>
 2005388:	e13ffc17 	ldw	r4,-16(fp)
 200538c:	20051fc0 	call	20051fc <alt_file_locked>
 2005390:	e0bffa15 	stw	r2,-24(fp)
 2005394:	e0bffa17 	ldw	r2,-24(fp)
 2005398:	10001016 	blt	r2,zero,20053dc <open+0x114>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 200539c:	e0bff817 	ldw	r2,-32(fp)
 20053a0:	10800317 	ldw	r2,12(r2)
 20053a4:	10000826 	beq	r2,zero,20053c8 <open+0x100>
 20053a8:	e0bff817 	ldw	r2,-32(fp)
 20053ac:	10800317 	ldw	r2,12(r2)
 20053b0:	e13ffc17 	ldw	r4,-16(fp)
 20053b4:	e17ffd17 	ldw	r5,-12(fp)
 20053b8:	e1bffe17 	ldw	r6,-8(fp)
 20053bc:	e1ffff17 	ldw	r7,-4(fp)
 20053c0:	103ee83a 	callr	r2
 20053c4:	00000106 	br	20053cc <open+0x104>
 20053c8:	0005883a 	mov	r2,zero
 20053cc:	e0bffa15 	stw	r2,-24(fp)
 20053d0:	00000206 	br	20053dc <open+0x114>
      }
    }
  }
  else
  {
    status = -ENODEV;
 20053d4:	00bffb44 	movi	r2,-19
 20053d8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 20053dc:	e0bffa17 	ldw	r2,-24(fp)
 20053e0:	1000080e 	bge	r2,zero,2005404 <open+0x13c>
  {
    alt_release_fd (index);  
 20053e4:	e13ff917 	ldw	r4,-28(fp)
 20053e8:	20033c80 	call	20033c8 <alt_release_fd>
    ALT_ERRNO = -status;
 20053ec:	20051ac0 	call	20051ac <alt_get_errno>
 20053f0:	e0fffa17 	ldw	r3,-24(fp)
 20053f4:	00c7c83a 	sub	r3,zero,r3
 20053f8:	10c00015 	stw	r3,0(r2)
    return -1;
 20053fc:	00bfffc4 	movi	r2,-1
 2005400:	00000106 	br	2005408 <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
 2005404:	e0bff917 	ldw	r2,-28(fp)
}
 2005408:	e037883a 	mov	sp,fp
 200540c:	dfc00117 	ldw	ra,4(sp)
 2005410:	df000017 	ldw	fp,0(sp)
 2005414:	dec00204 	addi	sp,sp,8
 2005418:	f800283a 	ret

0200541c <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 200541c:	defffa04 	addi	sp,sp,-24
 2005420:	df000515 	stw	fp,20(sp)
 2005424:	df000504 	addi	fp,sp,20
 2005428:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 200542c:	0005303a 	rdctl	r2,status
 2005430:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 2005434:	e0fffc17 	ldw	r3,-16(fp)
 2005438:	00bfff84 	movi	r2,-2
 200543c:	1884703a 	and	r2,r3,r2
 2005440:	1001703a 	wrctl	status,r2
  
  return context;
 2005444:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 2005448:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 200544c:	e0bfff17 	ldw	r2,-4(fp)
 2005450:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 2005454:	e0bffd17 	ldw	r2,-12(fp)
 2005458:	10800017 	ldw	r2,0(r2)
 200545c:	e0fffd17 	ldw	r3,-12(fp)
 2005460:	18c00117 	ldw	r3,4(r3)
 2005464:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 2005468:	e0bffd17 	ldw	r2,-12(fp)
 200546c:	10800117 	ldw	r2,4(r2)
 2005470:	e0fffd17 	ldw	r3,-12(fp)
 2005474:	18c00017 	ldw	r3,0(r3)
 2005478:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 200547c:	e0bffd17 	ldw	r2,-12(fp)
 2005480:	e0fffd17 	ldw	r3,-12(fp)
 2005484:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 2005488:	e0bffd17 	ldw	r2,-12(fp)
 200548c:	e0fffd17 	ldw	r3,-12(fp)
 2005490:	10c00015 	stw	r3,0(r2)
 2005494:	e0bffb17 	ldw	r2,-20(fp)
 2005498:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 200549c:	e0bffe17 	ldw	r2,-8(fp)
 20054a0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 20054a4:	e037883a 	mov	sp,fp
 20054a8:	df000017 	ldw	fp,0(sp)
 20054ac:	dec00104 	addi	sp,sp,4
 20054b0:	f800283a 	ret

020054b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 20054b4:	defffb04 	addi	sp,sp,-20
 20054b8:	dfc00415 	stw	ra,16(sp)
 20054bc:	df000315 	stw	fp,12(sp)
 20054c0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 20054c4:	d0a00c17 	ldw	r2,-32720(gp)
 20054c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 20054cc:	d0a6da17 	ldw	r2,-25752(gp)
 20054d0:	10800044 	addi	r2,r2,1
 20054d4:	d0a6da15 	stw	r2,-25752(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 20054d8:	00002e06 	br	2005594 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 20054dc:	e0bffd17 	ldw	r2,-12(fp)
 20054e0:	10800017 	ldw	r2,0(r2)
 20054e4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 20054e8:	e0bffd17 	ldw	r2,-12(fp)
 20054ec:	10800403 	ldbu	r2,16(r2)
 20054f0:	10803fcc 	andi	r2,r2,255
 20054f4:	10000426 	beq	r2,zero,2005508 <alt_tick+0x54>
 20054f8:	d0a6da17 	ldw	r2,-25752(gp)
 20054fc:	1000021e 	bne	r2,zero,2005508 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 2005500:	e0bffd17 	ldw	r2,-12(fp)
 2005504:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 2005508:	e0bffd17 	ldw	r2,-12(fp)
 200550c:	10800217 	ldw	r2,8(r2)
 2005510:	d0e6da17 	ldw	r3,-25752(gp)
 2005514:	18801d36 	bltu	r3,r2,200558c <alt_tick+0xd8>
 2005518:	e0bffd17 	ldw	r2,-12(fp)
 200551c:	10800403 	ldbu	r2,16(r2)
 2005520:	10803fcc 	andi	r2,r2,255
 2005524:	1000191e 	bne	r2,zero,200558c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 2005528:	e0bffd17 	ldw	r2,-12(fp)
 200552c:	10c00317 	ldw	r3,12(r2)
 2005530:	e0bffd17 	ldw	r2,-12(fp)
 2005534:	10800517 	ldw	r2,20(r2)
 2005538:	1009883a 	mov	r4,r2
 200553c:	183ee83a 	callr	r3
 2005540:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 2005544:	e0bfff17 	ldw	r2,-4(fp)
 2005548:	1000031e 	bne	r2,zero,2005558 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 200554c:	e13ffd17 	ldw	r4,-12(fp)
 2005550:	200541c0 	call	200541c <alt_alarm_stop>
 2005554:	00000d06 	br	200558c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 2005558:	e0bffd17 	ldw	r2,-12(fp)
 200555c:	10c00217 	ldw	r3,8(r2)
 2005560:	e0bfff17 	ldw	r2,-4(fp)
 2005564:	1887883a 	add	r3,r3,r2
 2005568:	e0bffd17 	ldw	r2,-12(fp)
 200556c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 2005570:	e0bffd17 	ldw	r2,-12(fp)
 2005574:	10c00217 	ldw	r3,8(r2)
 2005578:	d0a6da17 	ldw	r2,-25752(gp)
 200557c:	1880032e 	bgeu	r3,r2,200558c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 2005580:	e0bffd17 	ldw	r2,-12(fp)
 2005584:	00c00044 	movi	r3,1
 2005588:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 200558c:	e0bffe17 	ldw	r2,-8(fp)
 2005590:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 2005594:	e0fffd17 	ldw	r3,-12(fp)
 2005598:	d0a00c04 	addi	r2,gp,-32720
 200559c:	18bfcf1e 	bne	r3,r2,20054dc <alt_tick+0x28>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 20055a0:	0001883a 	nop
}
 20055a4:	e037883a 	mov	sp,fp
 20055a8:	dfc00117 	ldw	ra,4(sp)
 20055ac:	df000017 	ldw	fp,0(sp)
 20055b0:	dec00204 	addi	sp,sp,8
 20055b4:	f800283a 	ret

020055b8 <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 20055b8:	deffff04 	addi	sp,sp,-4
 20055bc:	df000015 	stw	fp,0(sp)
 20055c0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 20055c4:	000170fa 	wrctl	ienable,zero
}
 20055c8:	e037883a 	mov	sp,fp
 20055cc:	df000017 	ldw	fp,0(sp)
 20055d0:	dec00104 	addi	sp,sp,4
 20055d4:	f800283a 	ret

020055d8 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 20055d8:	defffa04 	addi	sp,sp,-24
 20055dc:	dfc00515 	stw	ra,20(sp)
 20055e0:	df000415 	stw	fp,16(sp)
 20055e4:	df000404 	addi	fp,sp,16
 20055e8:	e13ffe15 	stw	r4,-8(fp)
 20055ec:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 20055f0:	e0bfff17 	ldw	r2,-4(fp)
 20055f4:	10800017 	ldw	r2,0(r2)
 20055f8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 20055fc:	e13ffe17 	ldw	r4,-8(fp)
 2005600:	20002d00 	call	20002d0 <strlen>
 2005604:	10800044 	addi	r2,r2,1
 2005608:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 200560c:	00000d06 	br	2005644 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 2005610:	e0bffc17 	ldw	r2,-16(fp)
 2005614:	10c00217 	ldw	r3,8(r2)
 2005618:	e0bffd17 	ldw	r2,-12(fp)
 200561c:	1809883a 	mov	r4,r3
 2005620:	e17ffe17 	ldw	r5,-8(fp)
 2005624:	100d883a 	mov	r6,r2
 2005628:	20059080 	call	2005908 <memcmp>
 200562c:	1000021e 	bne	r2,zero,2005638 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 2005630:	e0bffc17 	ldw	r2,-16(fp)
 2005634:	00000706 	br	2005654 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 2005638:	e0bffc17 	ldw	r2,-16(fp)
 200563c:	10800017 	ldw	r2,0(r2)
 2005640:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 2005644:	e0fffc17 	ldw	r3,-16(fp)
 2005648:	e0bfff17 	ldw	r2,-4(fp)
 200564c:	18bff01e 	bne	r3,r2,2005610 <alt_find_dev+0x38>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 2005650:	0005883a 	mov	r2,zero
}
 2005654:	e037883a 	mov	sp,fp
 2005658:	dfc00117 	ldw	ra,4(sp)
 200565c:	df000017 	ldw	fp,0(sp)
 2005660:	dec00204 	addi	sp,sp,8
 2005664:	f800283a 	ret

02005668 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 2005668:	defffb04 	addi	sp,sp,-20
 200566c:	dfc00415 	stw	ra,16(sp)
 2005670:	df000315 	stw	fp,12(sp)
 2005674:	df000304 	addi	fp,sp,12
 2005678:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 200567c:	00808034 	movhi	r2,512
 2005680:	109df204 	addi	r2,r2,30664
 2005684:	10800017 	ldw	r2,0(r2)
 2005688:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 200568c:	00003106 	br	2005754 <alt_find_file+0xec>
  {
    len = strlen(next->name);
 2005690:	e0bffd17 	ldw	r2,-12(fp)
 2005694:	10800217 	ldw	r2,8(r2)
 2005698:	1009883a 	mov	r4,r2
 200569c:	20002d00 	call	20002d0 <strlen>
 20056a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 20056a4:	e0bffd17 	ldw	r2,-12(fp)
 20056a8:	10c00217 	ldw	r3,8(r2)
 20056ac:	e0bffe17 	ldw	r2,-8(fp)
 20056b0:	10bfffc4 	addi	r2,r2,-1
 20056b4:	1885883a 	add	r2,r3,r2
 20056b8:	10800003 	ldbu	r2,0(r2)
 20056bc:	10803fcc 	andi	r2,r2,255
 20056c0:	1080201c 	xori	r2,r2,128
 20056c4:	10bfe004 	addi	r2,r2,-128
 20056c8:	10800bd8 	cmpnei	r2,r2,47
 20056cc:	1000031e 	bne	r2,zero,20056dc <alt_find_file+0x74>
    {
      len -= 1;
 20056d0:	e0bffe17 	ldw	r2,-8(fp)
 20056d4:	10bfffc4 	addi	r2,r2,-1
 20056d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 20056dc:	e0bffe17 	ldw	r2,-8(fp)
 20056e0:	e0ffff17 	ldw	r3,-4(fp)
 20056e4:	1885883a 	add	r2,r3,r2
 20056e8:	10800003 	ldbu	r2,0(r2)
 20056ec:	10803fcc 	andi	r2,r2,255
 20056f0:	1080201c 	xori	r2,r2,128
 20056f4:	10bfe004 	addi	r2,r2,-128
 20056f8:	10800be0 	cmpeqi	r2,r2,47
 20056fc:	1000081e 	bne	r2,zero,2005720 <alt_find_file+0xb8>
 2005700:	e0bffe17 	ldw	r2,-8(fp)
 2005704:	e0ffff17 	ldw	r3,-4(fp)
 2005708:	1885883a 	add	r2,r3,r2
 200570c:	10800003 	ldbu	r2,0(r2)
 2005710:	10803fcc 	andi	r2,r2,255
 2005714:	1080201c 	xori	r2,r2,128
 2005718:	10bfe004 	addi	r2,r2,-128
 200571c:	10000a1e 	bne	r2,zero,2005748 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
 2005720:	e0bffd17 	ldw	r2,-12(fp)
 2005724:	10c00217 	ldw	r3,8(r2)
 2005728:	e0bffe17 	ldw	r2,-8(fp)
 200572c:	1809883a 	mov	r4,r3
 2005730:	e17fff17 	ldw	r5,-4(fp)
 2005734:	100d883a 	mov	r6,r2
 2005738:	20059080 	call	2005908 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 200573c:	1000021e 	bne	r2,zero,2005748 <alt_find_file+0xe0>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 2005740:	e0bffd17 	ldw	r2,-12(fp)
 2005744:	00000806 	br	2005768 <alt_find_file+0x100>
    }
    next = (alt_dev*) next->llist.next;
 2005748:	e0bffd17 	ldw	r2,-12(fp)
 200574c:	10800017 	ldw	r2,0(r2)
 2005750:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 2005754:	e0fffd17 	ldw	r3,-12(fp)
 2005758:	00808034 	movhi	r2,512
 200575c:	109df204 	addi	r2,r2,30664
 2005760:	18bfcb1e 	bne	r3,r2,2005690 <alt_find_file+0x28>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 2005764:	0005883a 	mov	r2,zero
}
 2005768:	e037883a 	mov	sp,fp
 200576c:	dfc00117 	ldw	ra,4(sp)
 2005770:	df000017 	ldw	fp,0(sp)
 2005774:	dec00204 	addi	sp,sp,8
 2005778:	f800283a 	ret

0200577c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 200577c:	defffc04 	addi	sp,sp,-16
 2005780:	df000315 	stw	fp,12(sp)
 2005784:	df000304 	addi	fp,sp,12
 2005788:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
 200578c:	00bffa04 	movi	r2,-24
 2005790:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005794:	e03ffd15 	stw	zero,-12(fp)
 2005798:	00001d06 	br	2005810 <alt_get_fd+0x94>
  {
    if (!alt_fd_list[i].dev)
 200579c:	00c08034 	movhi	r3,512
 20057a0:	18d94504 	addi	r3,r3,25876
 20057a4:	e0bffd17 	ldw	r2,-12(fp)
 20057a8:	10800324 	muli	r2,r2,12
 20057ac:	1885883a 	add	r2,r3,r2
 20057b0:	10800017 	ldw	r2,0(r2)
 20057b4:	1000131e 	bne	r2,zero,2005804 <alt_get_fd+0x88>
    {
      alt_fd_list[i].dev = dev;
 20057b8:	00c08034 	movhi	r3,512
 20057bc:	18d94504 	addi	r3,r3,25876
 20057c0:	e0bffd17 	ldw	r2,-12(fp)
 20057c4:	10800324 	muli	r2,r2,12
 20057c8:	1885883a 	add	r2,r3,r2
 20057cc:	e0ffff17 	ldw	r3,-4(fp)
 20057d0:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 20057d4:	00808034 	movhi	r2,512
 20057d8:	109df604 	addi	r2,r2,30680
 20057dc:	10c00017 	ldw	r3,0(r2)
 20057e0:	e0bffd17 	ldw	r2,-12(fp)
 20057e4:	1880040e 	bge	r3,r2,20057f8 <alt_get_fd+0x7c>
      {
        alt_max_fd = i;
 20057e8:	00808034 	movhi	r2,512
 20057ec:	109df604 	addi	r2,r2,30680
 20057f0:	e0fffd17 	ldw	r3,-12(fp)
 20057f4:	10c00015 	stw	r3,0(r2)
      }
      rc = i;
 20057f8:	e0bffd17 	ldw	r2,-12(fp)
 20057fc:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
 2005800:	00000606 	br	200581c <alt_get_fd+0xa0>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 2005804:	e0bffd17 	ldw	r2,-12(fp)
 2005808:	10800044 	addi	r2,r2,1
 200580c:	e0bffd15 	stw	r2,-12(fp)
 2005810:	e0bffd17 	ldw	r2,-12(fp)
 2005814:	10800810 	cmplti	r2,r2,32
 2005818:	103fe01e 	bne	r2,zero,200579c <alt_get_fd+0x20>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 200581c:	e0bffe17 	ldw	r2,-8(fp)
}
 2005820:	e037883a 	mov	sp,fp
 2005824:	df000017 	ldw	fp,0(sp)
 2005828:	dec00104 	addi	sp,sp,4
 200582c:	f800283a 	ret

02005830 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
 2005830:	defffb04 	addi	sp,sp,-20
 2005834:	df000415 	stw	fp,16(sp)
 2005838:	df000404 	addi	fp,sp,16
 200583c:	e13ffe15 	stw	r4,-8(fp)
 2005840:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
 2005844:	e0bfff17 	ldw	r2,-4(fp)
 2005848:	10840070 	cmpltui	r2,r2,4097
 200584c:	1000021e 	bne	r2,zero,2005858 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
 2005850:	00840004 	movi	r2,4096
 2005854:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
 2005858:	e0fffe17 	ldw	r3,-8(fp)
 200585c:	e0bfff17 	ldw	r2,-4(fp)
 2005860:	1885883a 	add	r2,r3,r2
 2005864:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 2005868:	e0bffe17 	ldw	r2,-8(fp)
 200586c:	e0bffc15 	stw	r2,-16(fp)
 2005870:	00000506 	br	2005888 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
 2005874:	e0bffc17 	ldw	r2,-16(fp)
 2005878:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
 200587c:	e0bffc17 	ldw	r2,-16(fp)
 2005880:	10800804 	addi	r2,r2,32
 2005884:	e0bffc15 	stw	r2,-16(fp)
 2005888:	e0fffc17 	ldw	r3,-16(fp)
 200588c:	e0bffd17 	ldw	r2,-12(fp)
 2005890:	18bff836 	bltu	r3,r2,2005874 <alt_icache_flush+0x44>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
 2005894:	e0bffe17 	ldw	r2,-8(fp)
 2005898:	108007cc 	andi	r2,r2,31
 200589c:	10000226 	beq	r2,zero,20058a8 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
 20058a0:	e0bffc17 	ldw	r2,-16(fp)
 20058a4:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
 20058a8:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
 20058ac:	e037883a 	mov	sp,fp
 20058b0:	df000017 	ldw	fp,0(sp)
 20058b4:	dec00104 	addi	sp,sp,4
 20058b8:	f800283a 	ret

020058bc <atexit>:
 20058bc:	200b883a 	mov	r5,r4
 20058c0:	000d883a 	mov	r6,zero
 20058c4:	0009883a 	mov	r4,zero
 20058c8:	000f883a 	mov	r7,zero
 20058cc:	20059841 	jmpi	2005984 <__register_exitproc>

020058d0 <exit>:
 20058d0:	defffe04 	addi	sp,sp,-8
 20058d4:	000b883a 	mov	r5,zero
 20058d8:	dc000015 	stw	r16,0(sp)
 20058dc:	dfc00115 	stw	ra,4(sp)
 20058e0:	2021883a 	mov	r16,r4
 20058e4:	2005ab40 	call	2005ab4 <__call_exitprocs>
 20058e8:	00808034 	movhi	r2,512
 20058ec:	109dee04 	addi	r2,r2,30648
 20058f0:	11000017 	ldw	r4,0(r2)
 20058f4:	20800f17 	ldw	r2,60(r4)
 20058f8:	10000126 	beq	r2,zero,2005900 <exit+0x30>
 20058fc:	103ee83a 	callr	r2
 2005900:	8009883a 	mov	r4,r16
 2005904:	2005c540 	call	2005c54 <_exit>

02005908 <memcmp>:
 2005908:	01c000c4 	movi	r7,3
 200590c:	3980192e 	bgeu	r7,r6,2005974 <memcmp+0x6c>
 2005910:	2904b03a 	or	r2,r5,r4
 2005914:	11c4703a 	and	r2,r2,r7
 2005918:	10000f26 	beq	r2,zero,2005958 <memcmp+0x50>
 200591c:	20c00003 	ldbu	r3,0(r4)
 2005920:	28800003 	ldbu	r2,0(r5)
 2005924:	1880151e 	bne	r3,r2,200597c <memcmp+0x74>
 2005928:	31bfff84 	addi	r6,r6,-2
 200592c:	01ffffc4 	movi	r7,-1
 2005930:	00000406 	br	2005944 <memcmp+0x3c>
 2005934:	20c00003 	ldbu	r3,0(r4)
 2005938:	28800003 	ldbu	r2,0(r5)
 200593c:	31bfffc4 	addi	r6,r6,-1
 2005940:	18800e1e 	bne	r3,r2,200597c <memcmp+0x74>
 2005944:	21000044 	addi	r4,r4,1
 2005948:	29400044 	addi	r5,r5,1
 200594c:	31fff91e 	bne	r6,r7,2005934 <memcmp+0x2c>
 2005950:	0005883a 	mov	r2,zero
 2005954:	f800283a 	ret
 2005958:	20c00017 	ldw	r3,0(r4)
 200595c:	28800017 	ldw	r2,0(r5)
 2005960:	1880041e 	bne	r3,r2,2005974 <memcmp+0x6c>
 2005964:	31bfff04 	addi	r6,r6,-4
 2005968:	21000104 	addi	r4,r4,4
 200596c:	29400104 	addi	r5,r5,4
 2005970:	39bff936 	bltu	r7,r6,2005958 <memcmp+0x50>
 2005974:	303fe91e 	bne	r6,zero,200591c <memcmp+0x14>
 2005978:	003ff506 	br	2005950 <memcmp+0x48>
 200597c:	1885c83a 	sub	r2,r3,r2
 2005980:	f800283a 	ret

02005984 <__register_exitproc>:
 2005984:	defffa04 	addi	sp,sp,-24
 2005988:	00808034 	movhi	r2,512
 200598c:	109dee04 	addi	r2,r2,30648
 2005990:	dc000315 	stw	r16,12(sp)
 2005994:	14000017 	ldw	r16,0(r2)
 2005998:	dc400415 	stw	r17,16(sp)
 200599c:	dfc00515 	stw	ra,20(sp)
 20059a0:	80805217 	ldw	r2,328(r16)
 20059a4:	2023883a 	mov	r17,r4
 20059a8:	10003e26 	beq	r2,zero,2005aa4 <__register_exitproc+0x120>
 20059ac:	10c00117 	ldw	r3,4(r2)
 20059b0:	020007c4 	movi	r8,31
 20059b4:	40c0180e 	bge	r8,r3,2005a18 <__register_exitproc+0x94>
 20059b8:	00800034 	movhi	r2,0
 20059bc:	10800004 	addi	r2,r2,0
 20059c0:	1000061e 	bne	r2,zero,20059dc <__register_exitproc+0x58>
 20059c4:	00bfffc4 	movi	r2,-1
 20059c8:	dfc00517 	ldw	ra,20(sp)
 20059cc:	dc400417 	ldw	r17,16(sp)
 20059d0:	dc000317 	ldw	r16,12(sp)
 20059d4:	dec00604 	addi	sp,sp,24
 20059d8:	f800283a 	ret
 20059dc:	01006404 	movi	r4,400
 20059e0:	d9400015 	stw	r5,0(sp)
 20059e4:	d9800115 	stw	r6,4(sp)
 20059e8:	d9c00215 	stw	r7,8(sp)
 20059ec:	00000000 	call	0 <__alt_mem_SDRAM-0x2000000>
 20059f0:	d9400017 	ldw	r5,0(sp)
 20059f4:	d9800117 	ldw	r6,4(sp)
 20059f8:	d9c00217 	ldw	r7,8(sp)
 20059fc:	103ff126 	beq	r2,zero,20059c4 <__register_exitproc+0x40>
 2005a00:	80c05217 	ldw	r3,328(r16)
 2005a04:	10000115 	stw	zero,4(r2)
 2005a08:	10c00015 	stw	r3,0(r2)
 2005a0c:	80805215 	stw	r2,328(r16)
 2005a10:	10006215 	stw	zero,392(r2)
 2005a14:	10006315 	stw	zero,396(r2)
 2005a18:	10c00117 	ldw	r3,4(r2)
 2005a1c:	88000d1e 	bne	r17,zero,2005a54 <__register_exitproc+0xd0>
 2005a20:	19000084 	addi	r4,r3,2
 2005a24:	2109883a 	add	r4,r4,r4
 2005a28:	18c00044 	addi	r3,r3,1
 2005a2c:	2109883a 	add	r4,r4,r4
 2005a30:	1109883a 	add	r4,r2,r4
 2005a34:	10c00115 	stw	r3,4(r2)
 2005a38:	0005883a 	mov	r2,zero
 2005a3c:	21400015 	stw	r5,0(r4)
 2005a40:	dfc00517 	ldw	ra,20(sp)
 2005a44:	dc400417 	ldw	r17,16(sp)
 2005a48:	dc000317 	ldw	r16,12(sp)
 2005a4c:	dec00604 	addi	sp,sp,24
 2005a50:	f800283a 	ret
 2005a54:	02400044 	movi	r9,1
 2005a58:	12806217 	ldw	r10,392(r2)
 2005a5c:	48d2983a 	sll	r9,r9,r3
 2005a60:	19000804 	addi	r4,r3,32
 2005a64:	18d1883a 	add	r8,r3,r3
 2005a68:	2109883a 	add	r4,r4,r4
 2005a6c:	4211883a 	add	r8,r8,r8
 2005a70:	2109883a 	add	r4,r4,r4
 2005a74:	1109883a 	add	r4,r2,r4
 2005a78:	1211883a 	add	r8,r2,r8
 2005a7c:	5254b03a 	or	r10,r10,r9
 2005a80:	21c02215 	stw	r7,136(r4)
 2005a84:	41802215 	stw	r6,136(r8)
 2005a88:	12806215 	stw	r10,392(r2)
 2005a8c:	01000084 	movi	r4,2
 2005a90:	893fe31e 	bne	r17,r4,2005a20 <__register_exitproc+0x9c>
 2005a94:	11006317 	ldw	r4,396(r2)
 2005a98:	2252b03a 	or	r9,r4,r9
 2005a9c:	12406315 	stw	r9,396(r2)
 2005aa0:	003fdf06 	br	2005a20 <__register_exitproc+0x9c>
 2005aa4:	00808074 	movhi	r2,513
 2005aa8:	10a51304 	addi	r2,r2,-27572
 2005aac:	80805215 	stw	r2,328(r16)
 2005ab0:	003fbe06 	br	20059ac <__register_exitproc+0x28>

02005ab4 <__call_exitprocs>:
 2005ab4:	00808034 	movhi	r2,512
 2005ab8:	109dee04 	addi	r2,r2,30648
 2005abc:	10800017 	ldw	r2,0(r2)
 2005ac0:	defff304 	addi	sp,sp,-52
 2005ac4:	df000b15 	stw	fp,44(sp)
 2005ac8:	d8800015 	stw	r2,0(sp)
 2005acc:	10805204 	addi	r2,r2,328
 2005ad0:	dd400815 	stw	r21,32(sp)
 2005ad4:	dfc00c15 	stw	ra,48(sp)
 2005ad8:	ddc00a15 	stw	r23,40(sp)
 2005adc:	dd800915 	stw	r22,36(sp)
 2005ae0:	dd000715 	stw	r20,28(sp)
 2005ae4:	dcc00615 	stw	r19,24(sp)
 2005ae8:	dc800515 	stw	r18,20(sp)
 2005aec:	dc400415 	stw	r17,16(sp)
 2005af0:	dc000315 	stw	r16,12(sp)
 2005af4:	d9000115 	stw	r4,4(sp)
 2005af8:	2839883a 	mov	fp,r5
 2005afc:	d8800215 	stw	r2,8(sp)
 2005b00:	057fffc4 	movi	r21,-1
 2005b04:	d8800017 	ldw	r2,0(sp)
 2005b08:	ddc00217 	ldw	r23,8(sp)
 2005b0c:	14805217 	ldw	r18,328(r2)
 2005b10:	90001726 	beq	r18,zero,2005b70 <__call_exitprocs+0xbc>
 2005b14:	94400117 	ldw	r17,4(r18)
 2005b18:	8c3fffc4 	addi	r16,r17,-1
 2005b1c:	80001116 	blt	r16,zero,2005b64 <__call_exitprocs+0xb0>
 2005b20:	8c400044 	addi	r17,r17,1
 2005b24:	8427883a 	add	r19,r16,r16
 2005b28:	8c63883a 	add	r17,r17,r17
 2005b2c:	95802204 	addi	r22,r18,136
 2005b30:	9ce7883a 	add	r19,r19,r19
 2005b34:	8c63883a 	add	r17,r17,r17
 2005b38:	b4e7883a 	add	r19,r22,r19
 2005b3c:	9463883a 	add	r17,r18,r17
 2005b40:	e0001726 	beq	fp,zero,2005ba0 <__call_exitprocs+0xec>
 2005b44:	8c87c83a 	sub	r3,r17,r18
 2005b48:	b0c7883a 	add	r3,r22,r3
 2005b4c:	18c01e17 	ldw	r3,120(r3)
 2005b50:	1f001326 	beq	r3,fp,2005ba0 <__call_exitprocs+0xec>
 2005b54:	843fffc4 	addi	r16,r16,-1
 2005b58:	9cffff04 	addi	r19,r19,-4
 2005b5c:	8c7fff04 	addi	r17,r17,-4
 2005b60:	857ff71e 	bne	r16,r21,2005b40 <__call_exitprocs+0x8c>
 2005b64:	00800034 	movhi	r2,0
 2005b68:	10800004 	addi	r2,r2,0
 2005b6c:	10002a1e 	bne	r2,zero,2005c18 <__call_exitprocs+0x164>
 2005b70:	dfc00c17 	ldw	ra,48(sp)
 2005b74:	df000b17 	ldw	fp,44(sp)
 2005b78:	ddc00a17 	ldw	r23,40(sp)
 2005b7c:	dd800917 	ldw	r22,36(sp)
 2005b80:	dd400817 	ldw	r21,32(sp)
 2005b84:	dd000717 	ldw	r20,28(sp)
 2005b88:	dcc00617 	ldw	r19,24(sp)
 2005b8c:	dc800517 	ldw	r18,20(sp)
 2005b90:	dc400417 	ldw	r17,16(sp)
 2005b94:	dc000317 	ldw	r16,12(sp)
 2005b98:	dec00d04 	addi	sp,sp,52
 2005b9c:	f800283a 	ret
 2005ba0:	91000117 	ldw	r4,4(r18)
 2005ba4:	88c00017 	ldw	r3,0(r17)
 2005ba8:	213fffc4 	addi	r4,r4,-1
 2005bac:	24001526 	beq	r4,r16,2005c04 <__call_exitprocs+0x150>
 2005bb0:	88000015 	stw	zero,0(r17)
 2005bb4:	183fe726 	beq	r3,zero,2005b54 <__call_exitprocs+0xa0>
 2005bb8:	00800044 	movi	r2,1
 2005bbc:	1408983a 	sll	r4,r2,r16
 2005bc0:	91406217 	ldw	r5,392(r18)
 2005bc4:	95000117 	ldw	r20,4(r18)
 2005bc8:	214a703a 	and	r5,r4,r5
 2005bcc:	28000b26 	beq	r5,zero,2005bfc <__call_exitprocs+0x148>
 2005bd0:	91406317 	ldw	r5,396(r18)
 2005bd4:	2148703a 	and	r4,r4,r5
 2005bd8:	20000c1e 	bne	r4,zero,2005c0c <__call_exitprocs+0x158>
 2005bdc:	99400017 	ldw	r5,0(r19)
 2005be0:	d9000117 	ldw	r4,4(sp)
 2005be4:	183ee83a 	callr	r3
 2005be8:	90c00117 	ldw	r3,4(r18)
 2005bec:	1d3fc51e 	bne	r3,r20,2005b04 <__call_exitprocs+0x50>
 2005bf0:	b8c00017 	ldw	r3,0(r23)
 2005bf4:	1cbfd726 	beq	r3,r18,2005b54 <__call_exitprocs+0xa0>
 2005bf8:	003fc206 	br	2005b04 <__call_exitprocs+0x50>
 2005bfc:	183ee83a 	callr	r3
 2005c00:	003ff906 	br	2005be8 <__call_exitprocs+0x134>
 2005c04:	94000115 	stw	r16,4(r18)
 2005c08:	003fea06 	br	2005bb4 <__call_exitprocs+0x100>
 2005c0c:	99000017 	ldw	r4,0(r19)
 2005c10:	183ee83a 	callr	r3
 2005c14:	003ff406 	br	2005be8 <__call_exitprocs+0x134>
 2005c18:	90c00117 	ldw	r3,4(r18)
 2005c1c:	1800071e 	bne	r3,zero,2005c3c <__call_exitprocs+0x188>
 2005c20:	90c00017 	ldw	r3,0(r18)
 2005c24:	18000926 	beq	r3,zero,2005c4c <__call_exitprocs+0x198>
 2005c28:	9009883a 	mov	r4,r18
 2005c2c:	b8c00015 	stw	r3,0(r23)
 2005c30:	00000000 	call	0 <__alt_mem_SDRAM-0x2000000>
 2005c34:	bc800017 	ldw	r18,0(r23)
 2005c38:	003fb506 	br	2005b10 <__call_exitprocs+0x5c>
 2005c3c:	90c00017 	ldw	r3,0(r18)
 2005c40:	902f883a 	mov	r23,r18
 2005c44:	1825883a 	mov	r18,r3
 2005c48:	003fb106 	br	2005b10 <__call_exitprocs+0x5c>
 2005c4c:	0007883a 	mov	r3,zero
 2005c50:	003ffb06 	br	2005c40 <__call_exitprocs+0x18c>

02005c54 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 2005c54:	defffc04 	addi	sp,sp,-16
 2005c58:	df000315 	stw	fp,12(sp)
 2005c5c:	df000304 	addi	fp,sp,12
 2005c60:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 2005c64:	0001883a 	nop
 2005c68:	e0bfff17 	ldw	r2,-4(fp)
 2005c6c:	e0bffd15 	stw	r2,-12(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  int r2 = exit_code;
 2005c70:	e0bffd17 	ldw	r2,-12(fp)
 2005c74:	e0bffe15 	stw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "D02"(r2), "D03"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 2005c78:	e0bffe17 	ldw	r2,-8(fp)
 2005c7c:	10000226 	beq	r2,zero,2005c88 <_exit+0x34>
    ALT_SIM_FAIL();
 2005c80:	002af070 	cmpltui	zero,zero,43969
 2005c84:	00000106 	br	2005c8c <_exit+0x38>
  } else {
    ALT_SIM_PASS();
 2005c88:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 2005c8c:	003fff06 	br	2005c8c <_exit+0x38>
